; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30143.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	fabsl
PUBLIC	frexpl
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsprintf_s_l
PUBLIC	sprintf_s
PUBLIC	??0exception@std@@QEAA@QEBD@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64>
PUBLIC	?_Orphan_all@_Container_base0@std@@QEAAXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators
PUBLIC	?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy
PUBLIC	??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
PUBLIC	?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ	; std::_Fake_proxy_ptr_impl::_Release
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
PUBLIC	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UEAA@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QEAA@AEBV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UEAAPEAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	?iostream_category@std@@YAAEBVerror_category@1@XZ ; std::iostream_category
PUBLIC	??1error_category@std@@UEAA@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QEBA_NAEBV01@@Z		; std::error_category::operator==
PUBLIC	??0error_code@std@@QEAA@HAEBVerror_category@1@@Z ; std::error_code::error_code
PUBLIC	?value@error_code@std@@QEBAHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QEBAAEBVerror_category@2@XZ ; std::error_code::category
PUBLIC	?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
PUBLIC	??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QEBAHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QEBAAEBVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8std@@YA_NAEBVerror_condition@0@0@Z		; std::operator==
PUBLIC	?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
PUBLIC	??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??1_System_error@std@@UEAA@XZ			; std::_System_error::~_System_error
PUBLIC	??0_System_error@std@@QEAA@AEBV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UEAAPEAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??0system_error@std@@QEAA@Verror_code@1@PEBD@Z	; std::system_error::system_error
PUBLIC	??1system_error@std@@UEAA@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QEAA@AEBV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UEAAPEAXI@Z		; std::system_error::`scalar deleting destructor'
PUBLIC	?name@_Iostream_error_category2@std@@UEBAPEBDXZ	; std::_Iostream_error_category2::name
PUBLIC	?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category2::message
PUBLIC	??1_Iostream_error_category2@std@@UEAA@XZ	; std::_Iostream_error_category2::~_Iostream_error_category2
PUBLIC	??_G_Iostream_error_category2@std@@UEAAPEAXI@Z	; std::_Iostream_error_category2::`scalar deleting destructor'
PUBLIC	??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
PUBLIC	??0bad_cast@std@@QEAA@XZ			; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UEAA@XZ			; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QEAA@AEBV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UEAAPEAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	?_Throw_bad_cast@std@@YAXXZ			; std::_Throw_bad_cast
PUBLIC	??1_Facet_base@std@@UEAA@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??0_Facet_base@std@@QEAA@XZ			; std::_Facet_base::_Facet_base
PUBLIC	??_G_Facet_base@std@@UEAAPEAXI@Z		; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QEAA@PEBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QEAA@XZ			; std::_Locinfo::~_Locinfo
PUBLIC	?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
PUBLIC	?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
PUBLIC	?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ	; std::_Locinfo::_Getlconv
PUBLIC	?_Getfalse@_Locinfo@std@@QEBAPEBDXZ		; std::_Locinfo::_Getfalse
PUBLIC	?_Gettrue@_Locinfo@std@@QEBAPEBDXZ		; std::_Locinfo::_Gettrue
PUBLIC	??0?$_Yarn@D@std@@QEAA@XZ			; std::_Yarn<char>::_Yarn<char>
PUBLIC	??1?$_Yarn@D@std@@QEAA@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	?c_str@?$_Yarn@D@std@@QEBAPEBDXZ		; std::_Yarn<char>::c_str
PUBLIC	?_Tidy@?$_Yarn@D@std@@AEAAXXZ			; std::_Yarn<char>::_Tidy
PUBLIC	??0?$_Yarn@_W@std@@QEAA@XZ			; std::_Yarn<wchar_t>::_Yarn<wchar_t>
PUBLIC	??1?$_Yarn@_W@std@@QEAA@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Tidy@?$_Yarn@_W@std@@AEAAXXZ			; std::_Yarn<wchar_t>::_Tidy
PUBLIC	??0id@locale@std@@QEAA@_K@Z			; std::locale::id::id
PUBLIC	??Bid@locale@std@@QEAA_KXZ			; std::locale::id::operator unsigned __int64
PUBLIC	?_Incref@facet@locale@std@@UEAAXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??0facet@locale@std@@IEAA@_K@Z			; std::locale::facet::facet
PUBLIC	??1facet@locale@std@@MEAA@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MEAAPEAXI@Z		; std::locale::facet::`scalar deleting destructor'
PUBLIC	??0locale@std@@QEAA@AEBV01@@Z			; std::locale::locale
PUBLIC	??1locale@std@@QEAA@XZ				; std::locale::~locale
PUBLIC	?c_str@locale@std@@QEBAPEBDXZ			; std::locale::c_str
PUBLIC	?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z	; std::locale::_Getfacet
PUBLIC	??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>
PUBLIC	??0ctype_base@std@@QEAA@_K@Z			; std::ctype_base::ctype_base
PUBLIC	??1ctype_base@std@@UEAA@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UEAAPEAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	?widen@?$ctype@D@std@@QEBADD@Z			; std::ctype<char>::widen
PUBLIC	?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z	; std::ctype<char>::widen
PUBLIC	??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z	; std::ctype<char>::ctype<char>
PUBLIC	?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??1?$ctype@D@std@@MEAA@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z	; std::ctype<char>::_Init
PUBLIC	?_Tidy@?$ctype@D@std@@IEAAXXZ			; std::ctype<char>::_Tidy
PUBLIC	?do_tolower@?$ctype@D@std@@MEBADD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MEBADD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MEBADD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MEBADDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MEAAPEAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z ; std::_Adl_verify_range<char *,char const *>
PUBLIC	??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UEAA@XZ		; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QEAA@AEBV012@@Z	; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UEAAPEAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QEAAXH_N@Z			; std::ios_base::clear
PUBLIC	?rdstate@ios_base@std@@QEBAHXZ			; std::ios_base::rdstate
PUBLIC	?good@ios_base@std@@QEBA_NXZ			; std::ios_base::good
PUBLIC	?flags@ios_base@std@@QEBAHXZ			; std::ios_base::flags
PUBLIC	?precision@ios_base@std@@QEBA_JXZ		; std::ios_base::precision
PUBLIC	?width@ios_base@std@@QEBA_JXZ			; std::ios_base::width
PUBLIC	?width@ios_base@std@@QEAA_J_J@Z			; std::ios_base::width
PUBLIC	?getloc@ios_base@std@@QEBA?AVlocale@2@XZ	; std::ios_base::getloc
PUBLIC	?print@complex@@QEAAXXZ				; complex::print
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	?print@point@@QEAAXXZ				; point::print
PUBLIC	main
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
PUBLIC	??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
PUBLIC	??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Float_put_desired_precision@O@std@@YAH_JH@Z	; std::_Float_put_desired_precision<long double>
PUBLIC	??$_Float_put_desired_precision@N@std@@YAH_JH@Z	; std::_Float_put_desired_precision<double>
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
PUBLIC	?decimal_point@?$numpunct@D@std@@QEBADXZ	; std::numpunct<char>::decimal_point
PUBLIC	?thousands_sep@?$numpunct@D@std@@QEBADXZ	; std::numpunct<char>::thousands_sep
PUBLIC	?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
PUBLIC	?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
PUBLIC	?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
PUBLIC	??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::numpunct<char>::_Getcat
PUBLIC	??1?$numpunct@D@std@@MEAA@XZ			; std::numpunct<char>::~numpunct<char>
PUBLIC	?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MEBADXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MEBADXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
PUBLIC	?_Tidy@?$numpunct@D@std@@AEAAXXZ		; std::numpunct<char>::_Tidy
PUBLIC	??_G?$numpunct@D@std@@MEAAPEAXI@Z		; std::numpunct<char>::`scalar deleting destructor'
PUBLIC	??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
PUBLIC	??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
PUBLIC	??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z ; <lambda_65e615be2a453ca0576c979606f46740>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const *,unsigned __int64>
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z ; std::_Construct_in_place<char *,char * &>
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
PUBLIC	??$_Get_size_of_n@$00@std@@YA_K_K@Z		; std::_Get_size_of_n<1>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??R<lambda_b986da8d428e4af07c64af60eec09b61>@@QEBA@QEADQEBD_K22D@Z ; <lambda_b986da8d428e4af07c64af60eec09b61>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_b986da8d428e4af07c64af60eec09b61>@@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_b986da8d428e4af07c64af60eec09b61>@@_K2D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_b986da8d428e4af07c64af60eec09b61>,unsigned __int64,unsigned __int64,char>
PUBLIC	??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z ; <lambda_e1befb086ad3257e3f042a63030725f7>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_e1befb086ad3257e3f042a63030725f7>,unsigned __int64,char>
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char *>
PUBLIC	??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z	; std::forward<char * const &>
PUBLIC	??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z	; std::forward<char * &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>
PUBLIC	??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::numpunct<char> >::~_Tidy_guard<std::numpunct<char> >
PUBLIC	??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
PUBLIC	??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z	; std::_Maklocchr<char>
PUBLIC	??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z ; std::numpunct<char>::_Getvals<char>
PUBLIC	??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z ; std::forward<std::_Facet_base * &>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QEAA@AEBV01@@Z40
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QEAA@AEBV01@@Z40
PUBLIC	??_7_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream@			; `string'
PUBLIC	?_Iostream_error@?4??message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	_TI2?AVbad_cast@std@@
PUBLIC	_CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@	; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@	; `string'
PUBLIC	_TI5?AVfailure@ios_base@std@@
PUBLIC	_CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QEAA@AEBV012@@Z40
PUBLIC	??_C@_01IHBHIGKO@?0@				; `string'
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??_C@_02BBAHNLBA@?$CFp@				; `string'
PUBLIC	??_C@_02CLHGNPPK@Lu@				; `string'
PUBLIC	??_C@_02HIKPPMOK@Ld@				; `string'
PUBLIC	??_C@_02BDDLJJBK@lu@				; `string'
PUBLIC	??_C@_02EAOCLKAK@ld@				; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??_C@_02MDKMJEGG@eE@				; `string'
PUBLIC	??_C@_02OOPEBDOJ@pP@				; `string'
PUBLIC	??_C@_01LFCBOECM@?4@				; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category2@std@@@8	; std::_Iostream_error_category2 `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category2@std@@8	; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4026000000000000
PUBLIC	__real@4036000000000000
PUBLIC	__real@4202a05f20000000
EXTRN	_purecall:PROC
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	_invalid_parameter_noinfo_noreturn:PROC
EXTRN	??0_Lockit@std@@QEAA@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QEAA@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	abs:PROC
EXTRN	fabs:PROC
EXTRN	frexp:PROC
EXTRN	calloc:PROC
EXTRN	free:PROC
EXTRN	__stdio_common_vsprintf_s:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	strcspn:PROC
EXTRN	strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPEBD@Z:PROC		; std::_Xout_of_range
EXTRN	?_Xruntime_error@std@@YAXPEBD@Z:PROC		; std::_Xruntime_error
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	??_Eruntime_error@std@@UEAAPEAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_E_System_error@std@@UEAAPEAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UEAAPEAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPEBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Iostream_error_category2@std@@UEAAPEAXI@Z:PROC ; std::_Iostream_error_category2::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UEAAPEAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	??_E_Facet_base@std@@UEAAPEAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	localeconv:PROC
EXTRN	_Getctype:PROC
EXTRN	_Getcvt:PROC
EXTRN	_Tolower:PROC
EXTRN	_Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPEAV12@PEBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPEAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_Efacet@locale@std@@MEAAPEAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UEAAPEAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MEAAPEAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UEAAPEAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
EXTRN	??_E?$numpunct@D@std@@MEAAPEAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
EXTRN	_CxxThrowException:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:QWORD		; std::ctype<char>::id
EXTRN	?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE ; std::cout
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DQ 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DQ 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fabsl DD	imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$fabsl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$frexpl DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$frexpl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+110
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf_s DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$sprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN11
	DD	imagerel $LN11+153
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+21
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+46
	DD	imagerel $unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD imagerel $LN3
	DD	imagerel $LN3+21
	DD	imagerel $unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+122
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U_Equal_allocators@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U_Equal_allocators@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z DD imagerel $LN5
	DD	imagerel $LN5+235
	DD	imagerel $unwind$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z DD imagerel $LN6
	DD	imagerel $LN6+363
	DD	imagerel $unwind$?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+250
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD imagerel $LN4
	DD	imagerel $LN4+250
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+178
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD imagerel $LN4
	DD	imagerel $LN4+180
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z DD imagerel $LN4
	DD	imagerel $LN4+293
	DD	imagerel $unwind$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z DD imagerel $LN5
	DD	imagerel $LN5+103
	DD	imagerel $unwind$?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+52
	DD	imagerel $unwind$?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+182
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1runtime_error@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1runtime_error@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gruntime_error@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gruntime_error@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?iostream_category@std@@YAAEBVerror_category@1@XZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?iostream_category@std@@YAAEBVerror_category@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z DD imagerel $LN5
	DD	imagerel $LN5+93
	DD	imagerel $unwind$?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??8error_category@std@@QEBA_NAEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+59
	DD	imagerel $unwind$??8error_category@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??8std@@YA_NAEBVerror_condition@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+122
	DD	imagerel $unwind$??8std@@YA_NAEBVerror_condition@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD imagerel $LN4
	DD	imagerel $LN4+154
	DD	imagerel $unwind$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+216
	DD	imagerel $unwind$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_System_error@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1_System_error@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_System_error@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??0_System_error@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G_System_error@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G_System_error@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1system_error@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1system_error@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0system_error@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0system_error@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gsystem_error@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gsystem_error@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD imagerel $LN5
	DD	imagerel $LN5+99
	DD	imagerel $unwind$?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Iostream_error_category2@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1_Iostream_error_category2@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G_Iostream_error_category2@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G_Iostream_error_category2@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_cast@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1bad_cast@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_cast@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gbad_cast@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_cast@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?_Throw_bad_cast@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G_Facet_base@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G_Facet_base@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Locinfo@std@@QEAA@PEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+178
	DD	imagerel $unwind$??0_Locinfo@std@@QEAA@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Locinfo@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$??1_Locinfo@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ DD imagerel $LN3
	DD	imagerel $LN3+122
	DD	imagerel $unwind$?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Yarn@D@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1?$_Yarn@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$_Yarn@D@std@@QEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$?c_str@?$_Yarn@D@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$_Yarn@D@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$?_Tidy@?$_Yarn@D@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Yarn@_W@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1?$_Yarn@_W@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bid@locale@std@@QEAA_KXZ DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$??Bid@locale@std@@QEAA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0facet@locale@std@@IEAA@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??0facet@locale@std@@IEAA@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1facet@locale@std@@MEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??1facet@locale@std@@MEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gfacet@locale@std@@MEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gfacet@locale@std@@MEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0locale@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0locale@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1locale@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+99
	DD	imagerel $unwind$??1locale@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@locale@std@@QEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?c_str@locale@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD imagerel $LN8
	DD	imagerel $LN8+167
	DD	imagerel $unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ctype_base@std@@QEAA@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0ctype_base@std@@QEAA@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ctype_base@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??1ctype_base@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gctype_base@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gctype_base@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?widen@?$ctype@D@std@@QEBADD@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?widen@?$ctype@D@std@@QEBADD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD imagerel $LN7
	DD	imagerel $LN7+199
	DD	imagerel $unwind$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ctype@D@std@@MEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??1?$ctype@D@std@@MEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$ctype@D@std@@IEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+90
	DD	imagerel $unwind$?_Tidy@?$ctype@D@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_tolower@?$ctype@D@std@@MEBADD@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$?do_tolower@?$ctype@D@std@@MEBADD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+105
	DD	imagerel $unwind$?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_toupper@?$ctype@D@std@@MEBADD@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$?do_toupper@?$ctype@D@std@@MEBADD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+105
	DD	imagerel $unwind$?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$ctype@D@std@@MEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G?$ctype@D@std@@MEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+253
	DD	imagerel $unwind$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1failure@ios_base@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1failure@ios_base@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0failure@ios_base@std@@QEAA@AEBV012@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0failure@ios_base@std@@QEAA@AEBV012@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gfailure@ios_base@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gfailure@ios_base@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@ios_base@std@@QEAAXH_N@Z DD imagerel $LN9
	DD	imagerel $LN9+228
	DD	imagerel $unwind$?clear@ios_base@std@@QEAAXH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?good@ios_base@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$?good@ios_base@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?width@ios_base@std@@QEAA_J_J@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?width@ios_base@std@@QEAA_J_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getloc@ios_base@std@@QEBA?AVlocale@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?getloc@ios_base@std@@QEBA?AVlocale@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?print@complex@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?print@complex@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z DD imagerel $LN5
	DD	imagerel $LN5+83
	DD	imagerel $unwind$?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN11
	DD	imagerel $LN11+176
	DD	imagerel $unwind$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA DD imagerel ?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA
	DD	imagerel ?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA+27
	DD	imagerel $unwind$?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z DD imagerel $LN11
	DD	imagerel $LN11+444
	DD	imagerel $unwind$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z@4HA DD imagerel ?catch$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z@4HA
	DD	imagerel ?catch$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z@4HA+71
	DD	imagerel $unwind$?catch$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DD imagerel $LN12
	DD	imagerel $LN12+226
	DD	imagerel $unwind$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA DD imagerel ?catch$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA
	DD	imagerel ?catch$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA+65
	DD	imagerel $unwind$?catch$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN24
	DD	imagerel $LN24+851
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+71
	DD	imagerel $unwind$?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?print@point@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?print@point@@QEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+87
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN6
	DD	imagerel $LN6+204
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+79
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+253
	DD	imagerel $unwind$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD imagerel $LN7
	DD	imagerel $LN7+199
	DD	imagerel $unwind$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z DD imagerel $LN11
	DD	imagerel $LN11+843
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z DD imagerel $LN3
	DD	imagerel $LN3+234
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z DD imagerel $LN3
	DD	imagerel $LN3+234
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z DD imagerel $LN3
	DD	imagerel $LN3+234
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z DD imagerel $LN3
	DD	imagerel $LN3+234
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z DD imagerel $LN10
	DD	imagerel $LN10+620
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z DD imagerel $LN10
	DD	imagerel $LN10+620
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z DD imagerel $LN3
	DD	imagerel $LN3+197
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z DD imagerel $LN20
	DD	imagerel $LN20+367
	DD	imagerel $unwind$?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z DD imagerel $LN23
	DD	imagerel $LN23+1889
	DD	imagerel $unwind$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z DD imagerel $LN13
	DD	imagerel $LN13+390
	DD	imagerel $unwind$?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z DD imagerel $LN19
	DD	imagerel $LN19+1638
	DD	imagerel $unwind$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z DD imagerel $LN6
	DD	imagerel $LN6+129
	DD	imagerel $unwind$?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z DD imagerel $LN6
	DD	imagerel $LN6+113
	DD	imagerel $unwind$?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Float_put_desired_precision@O@std@@YAH_JH@Z DD imagerel $LN14
	DD	imagerel $LN14+151
	DD	imagerel $unwind$??$_Float_put_desired_precision@O@std@@YAH_JH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Float_put_desired_precision@N@std@@YAH_JH@Z DD imagerel $LN14
	DD	imagerel $LN14+151
	DD	imagerel $unwind$??$_Float_put_desired_precision@N@std@@YAH_JH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+253
	DD	imagerel $unwind$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decimal_point@?$numpunct@D@std@@QEBADXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?decimal_point@?$numpunct@D@std@@QEBADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?thousands_sep@?$numpunct@D@std@@QEBADXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?thousands_sep@?$numpunct@D@std@@QEBADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD imagerel $LN7
	DD	imagerel $LN7+202
	DD	imagerel $unwind$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$numpunct@D@std@@MEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??1?$numpunct@D@std@@MEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z DD imagerel $LN7
	DD	imagerel $LN7+464
	DD	imagerel $unwind$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$numpunct@D@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Tidy@?$numpunct@D@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$numpunct@D@std@@MEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G?$numpunct@D@std@@MEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z DD imagerel $LN6
	DD	imagerel $LN6+276
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+275
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z DD imagerel $LN6
	DD	imagerel $LN6+460
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z DD imagerel $LN5
	DD	imagerel $LN5+122
	DD	imagerel $unwind$?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+60
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+59
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_b986da8d428e4af07c64af60eec09b61>@@QEBA@QEADQEBD_K22D@Z DD imagerel $LN3
	DD	imagerel $LN3+164
	DD	imagerel $unwind$??R<lambda_b986da8d428e4af07c64af60eec09b61>@@QEBA@QEADQEBD_K22D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_b986da8d428e4af07c64af60eec09b61>@@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_b986da8d428e4af07c64af60eec09b61>@@_K2D@Z DD imagerel $LN6
	DD	imagerel $LN6+497
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_b986da8d428e4af07c64af60eec09b61>@@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_b986da8d428e4af07c64af60eec09b61>@@_K2D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z DD imagerel $LN6
	DD	imagerel $LN6+458
	DD	imagerel $unwind$??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+73
	DD	imagerel $unwind$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN12
	DD	imagerel $LN12+133
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+38
	DD	imagerel $unwind$??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD imagerel $LN7
	DD	imagerel $LN7+156
	DD	imagerel $unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ DD imagerel ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
	DD	imagerel ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ+23
	DD	imagerel $unwind$??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ DD imagerel ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
	DD	imagerel ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ+23
	DD	imagerel $unwind$??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z
pdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZEA@@3P6AXXZEA DQ FLAT:??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZEA@@3P6AXXZEA
CRT$XCU	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+10
CONST	ENDS
;	COMDAT __real@4036000000000000
CONST	SEGMENT
__real@4036000000000000 DQ 04036000000000000r	; 22
CONST	ENDS
;	COMDAT __real@4026000000000000
CONST	SEGMENT
__real@4026000000000000 DQ 04026000000000000r	; 11
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD imagerel ??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD imagerel ??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@facet@locale@std@@8
	DD	imagerel ??_R1A@?0A@EA@_Facet_base@std@@8
	DD	imagerel ??_R17?0A@EA@_Crt_new_delete@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	imagerel ??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
data$rs	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$numpunct@D@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 01H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$numpunct@D@std@@@8
	DD	imagerel ??_R3?$numpunct@D@std@@8
	DD	imagerel ??_R4?$numpunct@D@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD imagerel ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@facet@locale@std@@8
	DD	imagerel ??_R1A@?0A@EA@_Facet_base@std@@8
	DD	imagerel ??_R17?0A@EA@_Crt_new_delete@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	imagerel ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 01H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	imagerel ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
	DD	imagerel ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD imagerel ??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD imagerel ??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@system_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@_System_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@runtime_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	imagerel ??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 01H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVfailure@ios_base@std@@@8
	DD	imagerel ??_R3failure@ios_base@std@@8
	DD	imagerel ??_R4failure@ios_base@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD imagerel ??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD imagerel ??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ctype_base@std@@8
	DD	imagerel ??_R1A@?0A@EA@facet@locale@std@@8
	DD	imagerel ??_R1A@?0A@EA@_Facet_base@std@@8
	DD	imagerel ??_R17?0A@EA@_Crt_new_delete@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	imagerel ??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$rs	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$ctype@D@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 01H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$ctype@D@std@@@8
	DD	imagerel ??_R3?$ctype@D@std@@8
	DD	imagerel ??_R4?$ctype@D@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD imagerel ??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD imagerel ??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@facet@locale@std@@8
	DD	imagerel ??_R1A@?0A@EA@_Facet_base@std@@8
	DD	imagerel ??_R17?0A@EA@_Crt_new_delete@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	imagerel ??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$rs	SEGMENT
??_R0?AUctype_base@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUctype_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 01H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AUctype_base@std@@@8
	DD	imagerel ??_R3ctype_base@std@@8
	DD	imagerel ??_R4ctype_base@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 01H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVfacet@locale@std@@@8
	DD	imagerel ??_R3facet@locale@std@@8
	DD	imagerel ??_R4facet@locale@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD imagerel ??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD imagerel ??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$rs	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@_Crt_new_delete@std@@8 DD imagerel ??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD imagerel ??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@_Facet_base@std@@8
	DD	imagerel ??_R17?0A@EA@_Crt_new_delete@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	imagerel ??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$rs	SEGMENT
??_R0?AVfacet@locale@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVfacet@locale@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD imagerel ??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD imagerel ??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD imagerel ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$rs	SEGMENT
??_R0?AV_Facet_base@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV_Facet_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 01H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV_Facet_base@std@@@8
	DD	imagerel ??_R3_Facet_base@std@@8
	DD	imagerel ??_R4_Facet_base@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD imagerel ??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD imagerel ??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 01H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	imagerel ??_R3bad_cast@std@@8
	DD	imagerel ??_R4bad_cast@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category2@std@@8 DD imagerel ??_R0?AV_Iostream_error_category2@std@@@8 ; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category2@std@@8 DD imagerel ??_R1A@?0A@EA@_Iostream_error_category2@std@@8 ; std::_Iostream_error_category2::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@error_category@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category2@std@@8 DD 00H		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category2@std@@@8
data$rs	SEGMENT
??_R0?AV_Iostream_error_category2@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category2 `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV_Iostream_error_category2@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Iostream_error_category2@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category2@std@@6B@ DD 01H		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV_Iostream_error_category2@std@@@8
	DD	imagerel ??_R3_Iostream_error_category2@std@@8
	DD	imagerel ??_R4_Iostream_error_category2@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD imagerel ??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD imagerel ??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@_System_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@runtime_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 01H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVsystem_error@std@@@8
	DD	imagerel ??_R3system_error@std@@8
	DD	imagerel ??_R4system_error@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD imagerel ??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD imagerel ??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@runtime_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 01H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV_System_error@std@@@8
	DD	imagerel ??_R3_System_error@std@@8
	DD	imagerel ??_R4_System_error@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD imagerel ??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD imagerel ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$rs	SEGMENT
??_R0?AVerror_category@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVerror_category@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD imagerel ??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD imagerel ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 01H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVruntime_error@std@@@8
	DD	imagerel ??_R3runtime_error@std@@8
	DD	imagerel ??_R4runtime_error@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A
_DATA	SEGMENT
?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A DQ FLAT:??_7_Iostream_error_category2@std@@6B@ ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static
	DQ	0000000000000005H
_DATA	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4@
CONST	SEGMENT
??_C@_01LFCBOECM@?4@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OOPEBDOJ@pP@
CONST	SEGMENT
??_C@_02OOPEBDOJ@pP@ DB 'pP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDKMJEGG@eE@
CONST	SEGMENT
??_C@_02MDKMJEGG@eE@ DB 'eE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DQ FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DQ	FLAT:??_E?$numpunct@D@std@@MEAAPEAXI@Z
	DQ	FLAT:?_Incref@facet@locale@std@@UEAAXXZ
	DQ	FLAT:?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
	DQ	FLAT:?do_decimal_point@?$numpunct@D@std@@MEBADXZ
	DQ	FLAT:?do_thousands_sep@?$numpunct@D@std@@MEBADXZ
	DQ	FLAT:?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DQ	FLAT:?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DQ	FLAT:?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld@
CONST	SEGMENT
??_C@_02EAOCLKAK@ld@ DB 'ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu@
CONST	SEGMENT
??_C@_02BDDLJJBK@lu@ DB 'lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld@
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld@ DB 'Ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu@
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu@ DB 'Lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp@ DB '%p', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DQ FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DQ	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z
	DQ	FLAT:?_Incref@facet@locale@std@@UEAAXXZ
	DQ	FLAT:?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QEAA@AEBV012@@Z40
xdata$x	SEGMENT
_CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QEAA@AEBV012@@Z40 DD 00H
	DD	imagerel ??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	imagerel ??0failure@ios_base@std@@QEAA@AEBV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT _CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
_CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	imagerel _CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QEAA@AEBV012@@Z40
	DD	imagerel _CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QEAA@AEBV01@@Z40
	DD	imagerel _CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QEAA@AEBV01@@Z40
	DD	imagerel _CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
_TI5?AVfailure@ios_base@std@@ DD 00H
	DD	imagerel ??1failure@ios_base@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@ DB 'ios_base::failbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DQ FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DQ	FLAT:??_Efailure@ios_base@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DQ FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DQ	FLAT:??_E?$ctype@D@std@@MEAAPEAXI@Z
	DQ	FLAT:?_Incref@facet@locale@std@@UEAAXXZ
	DQ	FLAT:?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
	DQ	FLAT:?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
	DQ	FLAT:?do_tolower@?$ctype@D@std@@MEBADD@Z
	DQ	FLAT:?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
	DQ	FLAT:?do_toupper@?$ctype@D@std@@MEBADD@Z
	DQ	FLAT:?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z
	DQ	FLAT:?do_widen@?$ctype@D@std@@MEBADD@Z
	DQ	FLAT:?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z
	DQ	FLAT:?do_narrow@?$ctype@D@std@@MEBADDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DQ FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DQ	FLAT:??_Ectype_base@std@@UEAAPEAXI@Z
	DQ	FLAT:?_Incref@facet@locale@std@@UEAAXXZ
	DQ	FLAT:?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DQ FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DQ	FLAT:??_Efacet@locale@std@@MEAAPEAXI@Z
	DQ	FLAT:?_Incref@facet@locale@std@@UEAAXXZ
	DQ	FLAT:?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DQ FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DQ	FLAT:??_E_Facet_base@std@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT _CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_cast@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
_CTA2?AVbad_cast@std@@ DD 02H
	DD	imagerel _CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI2?AVbad_cast@std@@
xdata$x	SEGMENT
_TI2?AVbad_cast@std@@ DD 00H
	DD	imagerel ??1bad_cast@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DQ FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DQ	FLAT:??_Ebad_cast@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB
CONST	SEGMENT
?_Iostream_error@?4??message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB DB 069H ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
	DB	06fH
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	065H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	00H
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream@ DB 'iostream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category2@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category2@std@@6B@ DQ FLAT:??_R4_Iostream_error_category2@std@@6B@ ; std::_Iostream_error_category2::`vftable'
	DQ	FLAT:??_E_Iostream_error_category2@std@@UEAAPEAXI@Z
	DQ	FLAT:?name@_Iostream_error_category2@std@@UEBAPEBDXZ
	DQ	FLAT:?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DQ	FLAT:?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z
	DQ	FLAT:?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z
	DQ	FLAT:?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z
CONST	ENDS
;	COMDAT _CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QEAA@AEBV01@@Z40
xdata$x	SEGMENT
_CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QEAA@AEBV01@@Z40 DD 00H
	DD	imagerel ??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	imagerel ??0_System_error@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QEAA@AEBV01@@Z40
xdata$x	SEGMENT
_CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QEAA@AEBV01@@Z40 DD 00H
	DD	imagerel ??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	imagerel ??0system_error@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DQ FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DQ	FLAT:??_Esystem_error@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DQ FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DQ	FLAT:??_E_System_error@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT _CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0runtime_error@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DQ FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DQ	FLAT:??_Eruntime_error@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z DD 011701H
	DD	04217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z DD 021b01H
	DD	011011bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_b986da8d428e4af07c64af60eec09b61>@@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_b986da8d428e4af07c64af60eec09b61>@@_K2D@Z DD 021b01H
	DD	013011bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_b986da8d428e4af07c64af60eec09b61>@@QEBA@QEADQEBD_K22D@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z DD 010d01H
	DD	0820dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z DD 021b01H
	DD	011011bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$numpunct@D@std@@MEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$numpunct@D@std@@AEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	022H
	DW	01b6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z DD 042a19H
	DD	01d0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$numpunct@D@std@@MEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?thousands_sep@?$numpunct@D@std@@QEBADXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decimal_point@?$numpunct@D@std@@QEBADXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Float_put_desired_precision@N@std@@YAH_JH@Z DD 010d01H
	DD	0220dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Float_put_desired_precision@O@std@@YAH_JH@Z DD 010d01H
	DD	0220dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	027H
	DW	064cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z DD 042f19H
	DD	039011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z DD 011801H
	DD	02218H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	027H
	DW	0747H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z DD 042f19H
	DD	03d011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	01d0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z DD 011801H
	DD	02218H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	027H
	DB	0abH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z DD 042f19H
	DD	015011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	027H
	DW	0252H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z DD 042f19H
	DD	019011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	027H
	DW	0252H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z DD 042f19H
	DD	019011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	027H
	DB	0d0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z DD 042f19H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	027H
	DB	0d0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z DD 042f19H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	027H
	DB	0d0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z DD 042f19H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	027H
	DB	0d0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z DD 042f19H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	027H
	DW	0331H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z DD 042f19H
	DD	029011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z DD 031a01H
	DD	07016821aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	0eH
	DD	061H
voltbl	ENDS
xdata	SEGMENT
$unwind$main DD	011319H
	DD	0a204H
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?print@point@@QEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	00H
	DB	00H
	DB	0d5H, 03H
	DB	02H
	DB	'=', 08H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	00H
	DD	imagerel ?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 018H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 010e19H
	DD	0e20eH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DB 06H
	DB	00H
	DB	00H
	DB	084H
	DB	02H
	DB	0b4H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DB 02H
	DB	00H
	DD	imagerel ?catch$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DB 018H
	DD	imagerel $stateUnwindMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
	DD	imagerel $tryMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
	DD	imagerel $ip2state$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DD 010d19H
	DD	0a20dH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z@4HA DD 020a01H
	DD	05006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z DB 06H
	DB	00H
	DB	00H
	DB	015H, 02H
	DB	02H
	DB	08dH, 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z DB 02H
	DB	00H
	DD	imagerel ?catch$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z DB 018H
	DD	imagerel $stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	DD	imagerel $tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
	DD	imagerel $ip2state$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z DD 041419H
	DD	0150114H
	DD	0600c700dH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DB 06H
	DB	00H
	DB	00H
	DB	012H
	DB	02H
	DB	081H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DB 02H
	DB	00H
	DD	imagerel ?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DB 018H
	DD	imagerel $stateUnwindMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	DD	imagerel $tryMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	DD	imagerel $ip2state$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 010919H
	DD	04209H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z DD 010d01H
	DD	0820dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?print@complex@@QEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getloc@ios_base@std@@QEBA?AVlocale@2@XZ DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?width@ios_base@std@@QEAA_J_J@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?good@ios_base@std@@QEBA_NXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@ios_base@std@@QEAAXH_N@Z DD 011201H
	DD	0e212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gfailure@ios_base@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0failure@ios_base@std@@QEAA@AEBV012@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1failure@ios_base@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$ctype@D@std@@MEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_toupper@?$ctype@D@std@@MEBADD@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_tolower@?$ctype@D@std@@MEBADD@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$ctype@D@std@@IEAAXXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ctype@D@std@@MEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?widen@?$ctype@D@std@@QEBADD@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gctype_base@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ctype_base@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ctype_base@std@@QEAA@_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@locale@std@@QEBAPEBDXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1locale@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0locale@std@@QEAA@AEBV01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gfacet@locale@std@@MEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1facet@locale@std@@MEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0facet@locale@std@@IEAA@_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	013H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bid@locale@std@@QEAA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Yarn@_W@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$_Yarn@D@std@@AEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$_Yarn@D@std@@QEBAPEBDXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Yarn@D@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
	DB	060H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ DD 042519H
	DD	0130113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Locinfo@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Locinfo@std@@QEAA@PEBD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G_Facet_base@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_cast@std@@YAXXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_cast@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@AEBV01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_cast@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G_Iostream_error_category2@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Iostream_error_category2@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gsystem_error@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0system_error@std@@QEAA@AEBV01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1system_error@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01fH
	DB	088H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z DD 032419H
	DD	07011c215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G_System_error@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_System_error@std@@QEAA@AEBV01@@Z DD 031001H
	DD	0700c4210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_System_error@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	0beH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 042a19H
	DD	0130118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
	DB	088H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 012219H
	DD	0a213H
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??8std@@YA_NAEBVerror_condition@0@0@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??8error_category@std@@QEBA_NAEBV01@@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?iostream_category@std@@YAAEBVerror_category@1@XZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gruntime_error@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@AEBV01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1runtime_error@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U_Equal_allocators@2@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBD@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf_s DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frexpl DD 010f01H
	DD	0420fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fabsl DD 010a01H
	DD	0420aH
xdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$numpunct@D@std@@2P6AXXZEA@@3P6AXXZEA DQ FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$numpunct@D@std@@2P6AXXZEA@@3P6AXXZEA
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z PROC ; std::forward<std::_Facet_base * &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1445 : }

  0000a	c3		 ret	 0
??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z ENDP ; std::forward<std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
<_Val2_0>$ = 64
??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT

; 1390 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Val2_0>$[rsp]
  00017	e8 00 00 00 00	 call	 ??$forward@AEAPEAV_Facet_base@std@@@std@@YAAEAPEAV_Facet_base@0@AEAPEAV10@@Z ; std::forward<std::_Facet_base * &>
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00021	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00024	48 89 01	 mov	 QWORD PTR [rcx], rax
  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 263  : __PURE_APPDOMAIN_GLOBAL locale::id numpunct<_Elem>::id;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	33 d2		 xor	 edx, edx
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  0000d	e8 00 00 00 00	 call	 ??0id@locale@std@@QEAA@_K@Z ; std::locale::id::id
  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$di	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id'', COMDAT

; 1616 : __PURE_APPDOMAIN_GLOBAL locale::id num_put<_Elem, _OutIt>::id;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	33 d2		 xor	 edx, edx
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  0000d	e8 00 00 00 00	 call	 ??0id@locale@std@@QEAA@_K@Z ; std::locale::id::id
  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id''
text$di	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Ptr$ = 64
_Cvt$ = 72
??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z PROC ; std::numpunct<char>::_Getvals<char>, COMDAT

; 172  :     void _Getvals(_Elem2, const lconv* _Ptr, _Locinfo::_Cvtvec _Cvt) { // get values

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 173  :         _Dp         = _Maklocchr(_Ptr->decimal_point[0], static_cast<_Elem2*>(nullptr), _Cvt);

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	48 6b c0 00	 imul	 rax, rax, 0
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00028	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Cvt$[rsp]
  0002d	33 d2		 xor	 edx, edx
  0002f	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  00033	e8 00 00 00 00	 call	 ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z ; std::_Maklocchr<char>
  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003d	88 41 18	 mov	 BYTE PTR [rcx+24], al

; 174  :         _Kseparator = _Maklocchr(_Ptr->thousands_sep[0], static_cast<_Elem2*>(nullptr), _Cvt);

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	48 6b c0 00	 imul	 rax, rax, 0
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0004e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00052	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Cvt$[rsp]
  00057	33 d2		 xor	 edx, edx
  00059	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0005d	e8 00 00 00 00	 call	 ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z ; std::_Maklocchr<char>
  00062	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00067	88 41 19	 mov	 BYTE PTR [rcx+25], al

; 175  :     }

  0006a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006e	c3		 ret	 0
??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z ENDP ; std::numpunct<char>::_Getvals<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Byte$ = 8
__formal$ = 16
__formal$ = 24
??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z PROC	; std::_Maklocchr<char>, COMDAT

; 495  : _Elem __CRTDECL _Maklocchr(char _Byte, _Elem*, const _Locinfo::_Cvtvec&) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 496  :     // convert char to _Elem using _Cvtvec
; 497  :     return static_cast<_Elem>(static_cast<unsigned char>(_Byte));

  0000e	0f b6 44 24 08	 movzx	 eax, BYTE PTR _Byte$[rsp]

; 498  : }

  00013	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z ENDP	; std::_Maklocchr<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 32
_Ptrnext$1 = 40
_Ptrdest$ = 48
_Ptr$ = 80
__formal$ = 88
__formal$ = 96
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 522  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 523  :     // convert C string to _Elem sequence using _Cvtvec
; 524  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  00013	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00018	e8 00 00 00 00	 call	 strlen
  0001d	48 ff c0	 inc	 rax
  00020	48 89 44 24 20	 mov	 QWORD PTR _Count$[rsp], rax

; 525  : 
; 526  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Count$[rsp]
  0002f	e8 00 00 00 00	 call	 calloc
  00034	48 89 44 24 30	 mov	 QWORD PTR _Ptrdest$[rsp], rax

; 527  : 
; 528  :     if (!_Ptrdest) {

  00039	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Ptrdest$[rsp], 0
  0003f	75 05		 jne	 SHORT $LN5@Maklocstr

; 529  :         _Xbad_alloc();

  00041	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 530  :     }
; 531  : 
; 532  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ptrdest$[rsp]
  0004b	48 89 44 24 28	 mov	 QWORD PTR _Ptrnext$1[rsp], rax
  00050	eb 27		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR _Count$[rsp]
  00057	48 ff c8	 dec	 rax
  0005a	48 89 44 24 20	 mov	 QWORD PTR _Count$[rsp], rax
  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ptrnext$1[rsp]
  00064	48 ff c0	 inc	 rax
  00067	48 89 44 24 28	 mov	 QWORD PTR _Ptrnext$1[rsp], rax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00071	48 ff c0	 inc	 rax
  00074	48 89 44 24 50	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN4@Maklocstr:
  00079	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  0007f	76 11		 jbe	 SHORT $LN3@Maklocstr

; 533  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  00081	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ptrnext$1[rsp]
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0008b	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0008e	88 08		 mov	 BYTE PTR [rax], cl

; 534  :     }

  00090	eb c0		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 535  : 
; 536  :     return _Ptrdest;

  00092	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ptrdest$[rsp]
$LN6@Maklocstr:

; 537  : }

  00097	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009b	c3		 ret	 0
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ PROC	; std::_Tidy_guard<std::numpunct<char> >::~_Tidy_guard<std::numpunct<char> >, COMDAT

; 34   :     _CONSTEXPR20_DYNALLOC ~_Tidy_guard() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 35   :         if (_Target) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 0d		 je	 SHORT $LN2@Tidy_guard

; 36   :             _Target->_Tidy();

  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001c	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AEAAXXZ ; std::numpunct<char>::_Tidy
$LN2@Tidy_guard:

; 37   :         }
; 38   :     }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ ENDP	; std::_Tidy_guard<std::numpunct<char> >::~_Tidy_guard<std::numpunct<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z PROC ; std::exchange<std::_Facet_base *,std::nullptr_t>, COMDAT

; 614  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) /* strengthened */ {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 615  :     // assign _New_val to _Val, return previous _Val
; 616  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Val$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 04 24	 mov	 QWORD PTR _Old_val$[rsp], rax

; 617  :     _Val         = static_cast<_Other&&>(_New_val);

  0001a	48 8b 44 24 20	 mov	 rax, QWORD PTR _Val$[rsp]
  0001f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _New_val$[rsp]
  00024	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00027	48 89 08	 mov	 QWORD PTR [rax], rcx

; 618  :     return _Old_val;

  0002a	48 8b 04 24	 mov	 rax, QWORD PTR _Old_val$[rsp]

; 619  : }

  0002e	48 83 c4 18	 add	 rsp, 24
  00032	c3		 ret	 0
??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z ENDP ; std::exchange<std::_Facet_base *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Ptr_container$ = 32
_Block_size$ = 40
_Ptr$ = 48
_Bytes$ = 80
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR _Bytes$[rsp]
  0000e	48 83 c0 27	 add	 rax, 39			; 00000027H
  00012	48 89 44 24 28	 mov	 QWORD PTR _Block_size$[rsp], rax

; 137  :     if (_Block_size <= _Bytes) {

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR _Bytes$[rsp]
  0001c	48 39 44 24 28	 cmp	 QWORD PTR _Block_size$[rsp], rax
  00021	77 05		 ja	 SHORT $LN8@Allocate_m

; 138  :         _Throw_bad_array_new_length(); // add overflow

  00023	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00028	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Block_size$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00032	48 89 44 24 20	 mov	 QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00037	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Ptr_container$[rsp], 0
  0003d	74 02		 je	 SHORT $LN9@Allocate_m
  0003f	eb 0b		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00041	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  00046	33 c0		 xor	 eax, eax
  00048	85 c0		 test	 eax, eax
  0004a	75 f5		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  0004c	33 c0		 xor	 eax, eax
  0004e	85 c0		 test	 eax, eax
  00050	75 e5		 jne	 SHORT $LN4@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr_container$[rsp]
  00057	48 83 c0 27	 add	 rax, 39			; 00000027H
  0005b	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  0005f	48 89 44 24 30	 mov	 QWORD PTR _Ptr$[rsp], rax

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00064	b8 08 00 00 00	 mov	 eax, 8
  00069	48 6b c0 ff	 imul	 rax, rax, -1
  0006d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00072	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Ptr_container$[rsp]
  00077	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 148  : #endif // _DEBUG
; 149  :     return _Ptr;

  0007b	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 150  : }

  00080	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00084	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z PROC		; std::forward<char * &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1445 : }

  0000a	c3		 ret	 0
??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1445 : }

  0000a	c3		 ret	 0
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z
_TEXT	SEGMENT
_It$ = 8
??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z PROC	; std::_Voidify_iter<char * *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _It$[rsp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  0000a	c3		 ret	 0
??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ENDP	; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char *>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 275  :     return __builtin_addressof(_Val);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 276  : }

  0000a	c3		 ret	 0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1444 :     return static_cast<_Ty&&>(_Arg);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1445 : }

  0000a	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Ptr$ = 72
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT

; 3173 :     explicit unique_ptr(pointer _Ptr) noexcept : _Mypair(_Zero_then_variadic_args_t{}, _Ptr) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00013	4c 8d 44 24 48	 lea	 r8, QWORD PTR _Ptr$[rsp]
  00018	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 ??$?0AEAPEAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@AEAPEAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
  00025	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002e	c3		 ret	 0
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT

; 1397 :     constexpr _Ty1& _Get_first() noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1398 :         return *this;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 1399 :     }

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT

; 3258 :     pointer release() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3259 :         return _STD exchange(_Mypair._Myval2, nullptr);

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR $T1[rsp], 0
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ??$exchange@PEAV_Facet_base@std@@$$T@std@@YAPEAV_Facet_base@0@AEAPEAV10@$$QEA$$T@Z ; std::exchange<std::_Facet_base *,std::nullptr_t>

; 3260 :     }

  00024	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00028	c3		 ret	 0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT

; 3228 :     ~unique_ptr() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3229 :         if (_Mypair._Myval2) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 1d		 je	 SHORT $LN2@unique_ptr

; 3230 :             _Mypair._Get_first()(_Mypair._Myval2);

  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b c8	 mov	 rcx, rax
  0001c	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PEAV_Facet_base@2@$00@std@@QEAAAEAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
  00021	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00026	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
$LN2@unique_ptr:

; 3231 :         }
; 3232 :     }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z
_TEXT	SEGMENT
$T1 = 32
tv70 = 40
this$ = 64
_Ptr$ = 72
??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT

; 3118 :     void operator()(_Ty* _Ptr) const noexcept /* strengthened */ { // delete a pointer

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3119 :         static_assert(0 < sizeof(_Ty), "can't delete an incomplete type");
; 3120 :         delete _Ptr;

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0001e	74 1b		 je	 SHORT $LN3@operator
  00020	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00025	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00028	ba 01 00 00 00	 mov	 edx, 1
  0002d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00032	ff 10		 call	 QWORD PTR [rax]
  00034	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00039	eb 09		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0003b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv70[rsp], 0
$LN4@operator:

; 3121 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
??R?$default_delete@V_Facet_base@std@@@std@@QEBAXPEAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
_Left$ = 48
_Right$ = 56
??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 926  : _CONSTEXPR20 void _Pocma(_Alloc& _Left, _Alloc& _Right) noexcept { // (maybe) propagate on container move assignment

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 927  :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_move_assignment::value) {
; 928  :         _Left = _STD move(_Right);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::move<std::allocator<char> &>

; 929  :     }
; 930  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 275  :     return __builtin_addressof(_Val);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 276  : }

  0000a	c3		 ret	 0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z
_TEXT	SEGMENT
_My_data$ = 48
_Old_size$ = 56
_New_ptr$ = 64
_New_size$ = 72
_New_capacity$ = 80
_Old_capacity$ = 88
_Old_ptr$1 = 96
_Al$ = 104
_Raw_new$ = 112
this$ = 144
_Size_increase$ = 152
_Fn$ = 160
<_Args_0>$ = 168
<_Args_1>$ = 176
??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_e1befb086ad3257e3f042a63030725f7>,unsigned __int64,char>, COMDAT

; 4538 :         const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 4539 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4540 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4541 :         auto& _My_data            = _Mypair._Myval2;

  0001b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 89 44 24 30	 mov	 QWORD PTR _My_data$[rsp], rax

; 4542 :         const size_type _Old_size = _My_data._Mysize;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  0002d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00031	48 89 44 24 38	 mov	 QWORD PTR _Old_size$[rsp], rax

; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  00036	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00043	48 2b 44 24 38	 sub	 rax, QWORD PTR _Old_size$[rsp]
  00048	48 3b 84 24 98
	00 00 00	 cmp	 rax, QWORD PTR _Size_increase$[rsp]
  00050	73 05		 jae	 SHORT $LN2@Reallocate

; 4544 :             _Xlen_string(); // result too long

  00052	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4545 :         }
; 4546 : 
; 4547 :         const size_type _New_size     = _Old_size + _Size_increase;

  00057	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR _Size_increase$[rsp]
  0005f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx
  0006a	48 89 44 24 48	 mov	 QWORD PTR _New_size$[rsp], rax

; 4548 :         const size_type _Old_capacity = _My_data._Myres;

  0006f	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  00074	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00078	48 89 44 24 58	 mov	 QWORD PTR _Old_capacity$[rsp], rax

; 4549 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0007d	48 8b 54 24 48	 mov	 rdx, QWORD PTR _New_size$[rsp]
  00082	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0008f	48 89 44 24 50	 mov	 QWORD PTR _New_capacity$[rsp], rax

; 4550 :         auto& _Al                     = _Getal();

  00094	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000a1	48 89 44 24 68	 mov	 QWORD PTR _Al$[rsp], rax

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a6	48 8b 44 24 50	 mov	 rax, QWORD PTR _New_capacity$[rsp]
  000ab	48 ff c0	 inc	 rax
  000ae	48 8b d0	 mov	 rdx, rax
  000b1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Al$[rsp]
  000b6	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000bb	48 89 44 24 40	 mov	 QWORD PTR _New_ptr$[rsp], rax

; 4552 : 
; 4553 : #ifdef __cpp_lib_constexpr_string
; 4554 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4555 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4556 :         }
; 4557 : #endif // __cpp_lib_constexpr_string
; 4558 :         _My_data._Orphan_all();

  000c0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _My_data$[rsp]
  000c5	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4559 :         _My_data._Mysize      = _New_size;

  000ca	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  000cf	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_size$[rsp]
  000d4	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 4560 :         _My_data._Myres       = _New_capacity;

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  000dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _New_capacity$[rsp]
  000e2	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4561 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000e6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  000eb	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  000f0	48 89 44 24 70	 mov	 QWORD PTR _Raw_new$[rsp], rax

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  000f5	48 83 7c 24 58
	10		 cmp	 QWORD PTR _Old_capacity$[rsp], 16
  000fb	72 73		 jb	 SHORT $LN3@Reallocate

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fd	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  00102	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00105	48 89 44 24 60	 mov	 QWORD PTR _Old_ptr$1[rsp], rax

; 4564 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  0010a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Old_ptr$1[rsp]
  0010f	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00114	0f b6 8c 24 b0
	00 00 00	 movzx	 ecx, BYTE PTR <_Args_1>$[rsp]
  0011c	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00120	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00128	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0012d	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _Old_size$[rsp]
  00132	4c 8b c0	 mov	 r8, rax
  00135	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Raw_new$[rsp]
  0013a	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Fn$[rsp]
  00142	e8 00 00 00 00	 call	 ??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z ; <lambda_e1befb086ad3257e3f042a63030725f7>::operator()

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00147	48 8b 44 24 58	 mov	 rax, QWORD PTR _Old_capacity$[rsp]
  0014c	48 ff c0	 inc	 rax
  0014f	4c 8b c0	 mov	 r8, rax
  00152	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Old_ptr$1[rsp]
  00157	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Al$[rsp]
  0015c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4566 :             _My_data._Bx._Ptr = _New_ptr;

  00161	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  00166	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  0016b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 4567 :         } else {

  0016e	eb 4a		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4568 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00170	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  00175	0f b6 8c 24 b0
	00 00 00	 movzx	 ecx, BYTE PTR <_Args_1>$[rsp]
  0017d	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00181	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00189	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0018e	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _Old_size$[rsp]
  00193	4c 8b c0	 mov	 r8, rax
  00196	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Raw_new$[rsp]
  0019b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Fn$[rsp]
  001a3	e8 00 00 00 00	 call	 ??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z ; <lambda_e1befb086ad3257e3f042a63030725f7>::operator()

; 4569 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001a8	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  001ad	48 8d 54 24 40	 lea	 rdx, QWORD PTR _New_ptr$[rsp]
  001b2	48 8b c8	 mov	 rcx, rax
  001b5	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4570 :         }
; 4571 : 
; 4572 :         return *this;

  001ba	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
$LN5@Reallocate:

; 4573 :     }

  001c2	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001c9	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_e1befb086ad3257e3f042a63030725f7>,unsigned __int64,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_New_ptr$ = 72
_Old_ptr$ = 80
_Old_size$ = 88
_Count$ = 96
_Ch$ = 104
??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z PROC ; <lambda_e1befb086ad3257e3f042a63030725f7>::operator(), COMDAT

; 3192 :                 const _Elem _Ch) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3193 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00018	4c 8b 44 24 58	 mov	 r8, QWORD PTR _Old_size$[rsp]
  0001d	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Old_ptr$[rsp]
  00022	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00027	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3194 :                 _Traits::assign(_New_ptr + _Old_size, _Count, _Ch);

  0002c	48 8b 44 24 58	 mov	 rax, QWORD PTR _Old_size$[rsp]
  00031	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00036	48 03 c8	 add	 rcx, rax
  00039	48 8b c1	 mov	 rax, rcx
  0003c	44 0f b6 44 24
	68		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  00042	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Count$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3195 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0004f	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  00054	48 8b 44 24 60	 mov	 rax, QWORD PTR _Count$[rsp]
  00059	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  0005e	48 03 c8	 add	 rcx, rax
  00061	48 8b c1	 mov	 rax, rcx
  00064	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00069	48 03 c8	 add	 rcx, rax
  0006c	48 8b c1	 mov	 rax, rcx
  0006f	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00074	48 8b c8	 mov	 rcx, rax
  00077	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3196 :             },

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
??R<lambda_e1befb086ad3257e3f042a63030725f7>@@QEBA@QEADQEBD_K2D@Z ENDP ; <lambda_e1befb086ad3257e3f042a63030725f7>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_b986da8d428e4af07c64af60eec09b61>@@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_b986da8d428e4af07c64af60eec09b61>@@_K2D@Z
_TEXT	SEGMENT
_My_data$ = 64
_Old_size$ = 72
_New_ptr$ = 80
_New_size$ = 88
_New_capacity$ = 96
_Old_capacity$ = 104
_Old_ptr$1 = 112
_Al$ = 120
_Raw_new$ = 128
this$ = 160
_Size_increase$ = 168
_Fn$ = 176
<_Args_0>$ = 184
<_Args_1>$ = 192
<_Args_2>$ = 200
??$_Reallocate_grow_by@V<lambda_b986da8d428e4af07c64af60eec09b61>@@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_b986da8d428e4af07c64af60eec09b61>@@_K2D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_b986da8d428e4af07c64af60eec09b61>,unsigned __int64,unsigned __int64,char>, COMDAT

; 4538 :         const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 4539 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4540 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4541 :         auto& _My_data            = _Mypair._Myval2;

  0001b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 89 44 24 40	 mov	 QWORD PTR _My_data$[rsp], rax

; 4542 :         const size_type _Old_size = _My_data._Mysize;

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR _My_data$[rsp]
  0002d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00031	48 89 44 24 48	 mov	 QWORD PTR _Old_size$[rsp], rax

; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  00036	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00043	48 2b 44 24 48	 sub	 rax, QWORD PTR _Old_size$[rsp]
  00048	48 3b 84 24 a8
	00 00 00	 cmp	 rax, QWORD PTR _Size_increase$[rsp]
  00050	73 05		 jae	 SHORT $LN2@Reallocate

; 4544 :             _Xlen_string(); // result too long

  00052	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4545 :         }
; 4546 : 
; 4547 :         const size_type _New_size     = _Old_size + _Size_increase;

  00057	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR _Size_increase$[rsp]
  0005f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx
  0006a	48 89 44 24 58	 mov	 QWORD PTR _New_size$[rsp], rax

; 4548 :         const size_type _Old_capacity = _My_data._Myres;

  0006f	48 8b 44 24 40	 mov	 rax, QWORD PTR _My_data$[rsp]
  00074	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00078	48 89 44 24 68	 mov	 QWORD PTR _Old_capacity$[rsp], rax

; 4549 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0007d	48 8b 54 24 58	 mov	 rdx, QWORD PTR _New_size$[rsp]
  00082	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0008f	48 89 44 24 60	 mov	 QWORD PTR _New_capacity$[rsp], rax

; 4550 :         auto& _Al                     = _Getal();

  00094	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000a1	48 89 44 24 78	 mov	 QWORD PTR _Al$[rsp], rax

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a6	48 8b 44 24 60	 mov	 rax, QWORD PTR _New_capacity$[rsp]
  000ab	48 ff c0	 inc	 rax
  000ae	48 8b d0	 mov	 rdx, rax
  000b1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Al$[rsp]
  000b6	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000bb	48 89 44 24 50	 mov	 QWORD PTR _New_ptr$[rsp], rax

; 4552 : 
; 4553 : #ifdef __cpp_lib_constexpr_string
; 4554 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4555 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4556 :         }
; 4557 : #endif // __cpp_lib_constexpr_string
; 4558 :         _My_data._Orphan_all();

  000c0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _My_data$[rsp]
  000c5	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4559 :         _My_data._Mysize      = _New_size;

  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR _My_data$[rsp]
  000cf	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _New_size$[rsp]
  000d4	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 4560 :         _My_data._Myres       = _New_capacity;

  000d8	48 8b 44 24 40	 mov	 rax, QWORD PTR _My_data$[rsp]
  000dd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _New_capacity$[rsp]
  000e2	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4561 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000e6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  000eb	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  000f0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _Raw_new$[rsp], rax

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  000f8	48 83 7c 24 68
	10		 cmp	 QWORD PTR _Old_capacity$[rsp], 16
  000fe	0f 82 83 00 00
	00		 jb	 $LN3@Reallocate

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00104	48 8b 44 24 40	 mov	 rax, QWORD PTR _My_data$[rsp]
  00109	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010c	48 89 44 24 70	 mov	 QWORD PTR _Old_ptr$1[rsp], rax

; 4564 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  00111	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Old_ptr$1[rsp]
  00116	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0011b	0f b6 8c 24 c8
	00 00 00	 movzx	 ecx, BYTE PTR <_Args_2>$[rsp]
  00123	88 4c 24 30	 mov	 BYTE PTR [rsp+48], cl
  00127	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR <_Args_1>$[rsp]
  0012f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00134	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  0013c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00141	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Old_size$[rsp]
  00146	4c 8b c0	 mov	 r8, rax
  00149	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Raw_new$[rsp]
  00151	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR _Fn$[rsp]
  00159	e8 00 00 00 00	 call	 ??R<lambda_b986da8d428e4af07c64af60eec09b61>@@QEBA@QEADQEBD_K22D@Z ; <lambda_b986da8d428e4af07c64af60eec09b61>::operator()

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  0015e	48 8b 44 24 68	 mov	 rax, QWORD PTR _Old_capacity$[rsp]
  00163	48 ff c0	 inc	 rax
  00166	4c 8b c0	 mov	 r8, rax
  00169	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Old_ptr$1[rsp]
  0016e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Al$[rsp]
  00173	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4566 :             _My_data._Bx._Ptr = _New_ptr;

  00178	48 8b 44 24 40	 mov	 rax, QWORD PTR _My_data$[rsp]
  0017d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00182	48 89 08	 mov	 QWORD PTR [rax], rcx

; 4567 :         } else {

  00185	eb 5a		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4568 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00187	48 8b 44 24 40	 mov	 rax, QWORD PTR _My_data$[rsp]
  0018c	0f b6 8c 24 c8
	00 00 00	 movzx	 ecx, BYTE PTR <_Args_2>$[rsp]
  00194	88 4c 24 30	 mov	 BYTE PTR [rsp+48], cl
  00198	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR <_Args_1>$[rsp]
  001a0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a5	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  001ad	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001b2	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Old_size$[rsp]
  001b7	4c 8b c0	 mov	 r8, rax
  001ba	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Raw_new$[rsp]
  001c2	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR _Fn$[rsp]
  001ca	e8 00 00 00 00	 call	 ??R<lambda_b986da8d428e4af07c64af60eec09b61>@@QEBA@QEADQEBD_K22D@Z ; <lambda_b986da8d428e4af07c64af60eec09b61>::operator()

; 4569 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001cf	48 8b 44 24 40	 mov	 rax, QWORD PTR _My_data$[rsp]
  001d4	48 8d 54 24 50	 lea	 rdx, QWORD PTR _New_ptr$[rsp]
  001d9	48 8b c8	 mov	 rcx, rax
  001dc	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4570 :         }
; 4571 : 
; 4572 :         return *this;

  001e1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
$LN5@Reallocate:

; 4573 :     }

  001e9	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  001f0	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_b986da8d428e4af07c64af60eec09b61>@@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_b986da8d428e4af07c64af60eec09b61>@@_K2D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_b986da8d428e4af07c64af60eec09b61>,unsigned __int64,unsigned __int64,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??R<lambda_b986da8d428e4af07c64af60eec09b61>@@QEBA@QEADQEBD_K22D@Z
_TEXT	SEGMENT
tv78 = 32
this$ = 64
_New_ptr$ = 72
_Old_ptr$ = 80
_Old_size$ = 88
_Off$ = 96
_Count$ = 104
_Ch$ = 112
??R<lambda_b986da8d428e4af07c64af60eec09b61>@@QEBA@QEADQEBD_K22D@Z PROC ; <lambda_b986da8d428e4af07c64af60eec09b61>::operator(), COMDAT

; 3405 :                 const size_type _Count, const _Elem _Ch) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3406 :                 _Traits::copy(_New_ptr, _Old_ptr, _Off);

  00018	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Off$[rsp]
  0001d	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Old_ptr$[rsp]
  00022	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00027	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3407 :                 _Traits::assign(_New_ptr + _Off, _Count, _Ch);

  0002c	48 8b 44 24 60	 mov	 rax, QWORD PTR _Off$[rsp]
  00031	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00036	48 03 c8	 add	 rcx, rax
  00039	48 8b c1	 mov	 rax, rcx
  0003c	44 0f b6 44 24
	70		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  00042	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Count$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3408 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0004f	48 8b 44 24 60	 mov	 rax, QWORD PTR _Off$[rsp]
  00054	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  00059	48 2b c8	 sub	 rcx, rax
  0005c	48 8b c1	 mov	 rax, rcx
  0005f	48 ff c0	 inc	 rax
  00062	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Off$[rsp]
  00067	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Old_ptr$[rsp]
  0006c	48 03 d1	 add	 rdx, rcx
  0006f	48 8b ca	 mov	 rcx, rdx
  00072	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Off$[rsp]
  00077	4c 8b 44 24 48	 mov	 r8, QWORD PTR _New_ptr$[rsp]
  0007c	4c 03 c2	 add	 r8, rdx
  0007f	49 8b d0	 mov	 rdx, r8
  00082	48 03 54 24 68	 add	 rdx, QWORD PTR _Count$[rsp]
  00087	48 89 54 24 20	 mov	 QWORD PTR tv78[rsp], rdx
  0008c	4c 8b c0	 mov	 r8, rax
  0008f	48 8b d1	 mov	 rdx, rcx
  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR tv78[rsp]
  00097	48 8b c8	 mov	 rcx, rax
  0009a	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3409 :             },

  0009f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a3	c3		 ret	 0
??R<lambda_b986da8d428e4af07c64af60eec09b61>@@QEBA@QEADQEBD_K22D@Z ENDP ; <lambda_b986da8d428e4af07c64af60eec09b61>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 230  : __declspec(allocator) _CONSTEXPR20_DYNALLOC void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 231  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 232  : #if defined(_M_IX86) || defined(_M_X64)
; 233  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 234  :     if (!_STD is_constant_evaluated())
; 235  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 236  :     {
; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00009	48 81 7c 24 30
	00 10 00 00	 cmp	 QWORD PTR _Bytes$[rsp], 4096 ; 00001000H
  00012	72 0c		 jb	 SHORT $LN2@Allocate

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  00019	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0001e	eb 16		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  00020	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Bytes$[rsp], 0
  00026	74 0c		 je	 SHORT $LN3@Allocate

; 244  :         return _Traits::_Allocate(_Bytes);

  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00032	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00034	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 248  : }

  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 0
_Count$ = 32
??$_Get_size_of_n@$00@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<1>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  00009	c6 04 24 00	 mov	 BYTE PTR _Overflow_is_possible$[rsp], 0

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 64   :         if (_Count > _Max_possible) {
; 65   :             _Throw_bad_array_new_length(); // multiply overflow
; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  0000d	48 8b 44 24 20	 mov	 rax, QWORD PTR _Count$[rsp]

; 70   : }

  00012	48 83 c4 18	 add	 rsp, 24
  00016	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > const >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 275  :     return __builtin_addressof(_Val);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 276  : }

  0000a	c3		 ret	 0
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 275  :     return __builtin_addressof(_Val);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 276  : }

  0000a	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 251  : _CONSTEXPR20_DYNALLOC void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 252  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 253  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 254  :     if (_STD is_constant_evaluated()) {
; 255  :         ::operator delete(_Ptr);
; 256  :     } else
; 257  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 258  :     {
; 259  : #if defined(_M_IX86) || defined(_M_X64)
; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	48 81 7c 24 38
	00 10 00 00	 cmp	 QWORD PTR _Bytes$[rsp], 4096 ; 00001000H
  00017	72 0f		 jb	 SHORT $LN2@Deallocate

; 261  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  00019	48 8d 54 24 38	 lea	 rdx, QWORD PTR _Bytes$[rsp]
  0001e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Ptr$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 262  :         }
; 263  : #endif // defined(_M_IX86) || defined(_M_X64)
; 264  :         ::operator delete(_Ptr, _Bytes);

  00028	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Bytes$[rsp]
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00032	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete

; 265  :     }
; 266  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
tv65 = 0
$T1 = 8
_Left$ = 32
_Right$ = 40
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 42   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 43   :     // return larger of _Left and _Right
; 44   :     return _Left < _Right ? _Right : _Left;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  00018	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001b	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0001e	73 0b		 jae	 SHORT $LN3@max
  00020	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00025	48 89 04 24	 mov	 QWORD PTR tv65[rsp], rax
  00029	eb 09		 jmp	 SHORT $LN4@max
$LN3@max:
  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00030	48 89 04 24	 mov	 QWORD PTR tv65[rsp], rax
$LN4@max:
  00034	48 8b 04 24	 mov	 rax, QWORD PTR tv65[rsp]
  00038	48 89 44 24 08	 mov	 QWORD PTR $T1[rsp], rax
  0003d	48 8b 44 24 08	 mov	 rax, QWORD PTR $T1[rsp]

; 45   : }

  00042	48 83 c4 18	 add	 rsp, 24
  00046	c3		 ret	 0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT

; 258  :     streamsize __CLR_OR_THIS_CALL _Pnavail() const { // count number of available positions in write buffer

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 259  :         return *_IPnext ? *_IPcount : 0;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00012	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00016	74 10		 je	 SHORT $LN3@Pnavail
  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00021	8b 00		 mov	 eax, DWORD PTR [rax]
  00023	89 04 24	 mov	 DWORD PTR tv69[rsp], eax
  00026	eb 07		 jmp	 SHORT $LN4@Pnavail
$LN3@Pnavail:
  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv69[rsp], 0
$LN4@Pnavail:
  0002f	48 63 04 24	 movsxd	 rax, DWORD PTR tv69[rsp]

; 260  :     }

  00033	48 83 c4 18	 add	 rsp, 24
  00037	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
_TEXT	SEGMENT
tv76 = 0
this$ = 32
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT

; 253  :     _Elem* __CLR_OR_THIS_CALL _Pninc() { // increment current position in write buffer

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 254  :         --*_IPcount;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	8b 00		 mov	 eax, DWORD PTR [rax]
  00014	ff c8		 dec	 eax
  00016	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0001b	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001f	89 01		 mov	 DWORD PTR [rcx], eax

; 255  :         return (*_IPnext)++;

  00021	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0002a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002d	48 89 04 24	 mov	 QWORD PTR tv76[rsp], rax
  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0003a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003d	48 ff c0	 inc	 rax
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00045	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00049	48 89 01	 mov	 QWORD PTR [rcx], rax
  0004c	48 8b 04 24	 mov	 rax, QWORD PTR tv76[rsp]

; 256  :     }

  00050	48 83 c4 18	 add	 rsp, 24
  00054	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT

; 172  :         streamsize _Count) { // put _Count characters from array beginning at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 173  :         return xsputn(_Ptr, _Count);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	ff 50 48	 call	 QWORD PTR [rax+72]

; 174  :     }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
_TEXT	SEGMENT
tv78 = 32
$T1 = 40
tv79 = 48
this$ = 80
_Ch$ = 88
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT

; 167  :     int_type __CLR_OR_THIS_CALL sputc(_Elem _Ch) { // put a character

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 168  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0000d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00017	48 85 c0	 test	 rax, rax
  0001a	7e 2b		 jle	 SHORT $LN3@sputc
  0001c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00021	e8 00 00 00 00	 call	 ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
  00026	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
  0002b	48 8b 44 24 28	 mov	 rax, QWORD PTR $T1[rsp]
  00030	0f b6 4c 24 58	 movzx	 ecx, BYTE PTR _Ch$[rsp]
  00035	88 08		 mov	 BYTE PTR [rax], cl
  00037	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T1[rsp]
  0003c	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00041	89 44 24 20	 mov	 DWORD PTR tv78[rsp], eax
  00045	eb 2a		 jmp	 SHORT $LN4@sputc
$LN3@sputc:
  00047	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Ch$[rsp]
  0004c	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00051	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00056	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00059	48 89 4c 24 30	 mov	 QWORD PTR tv79[rsp], rcx
  0005e	8b d0		 mov	 edx, eax
  00060	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00065	48 8b 44 24 30	 mov	 rax, QWORD PTR tv79[rsp]
  0006a	ff 50 18	 call	 QWORD PTR [rax+24]
  0006d	89 44 24 20	 mov	 DWORD PTR tv78[rsp], eax
$LN4@sputc:
  00071	8b 44 24 20	 mov	 eax, DWORD PTR tv78[rsp]

; 169  :     }

  00075	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00079	c3		 ret	 0
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
_TEXT	SEGMENT
this$ = 48
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT

; 122  :     int __CLR_OR_THIS_CALL pubsync() { // synchronize with external agent

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 123  :         return sync();

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00016	ff 50 68	 call	 QWORD PTR [rax+104]

; 124  :     }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z PROC ; std::_Construct_in_place<char *,char * &>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00013	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ; std::_Voidify_iter<char * *>
  00020	48 8b d0	 mov	 rdx, rax
  00023	b9 08 00 00 00	 mov	 ecx, 8
  00028	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0002d	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00032	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00037	e8 00 00 00 00	 call	 ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ; std::forward<char * &>
  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00041	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00044	48 89 01	 mov	 QWORD PTR [rcx], rax

; 159  :     }
; 160  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z ENDP ; std::_Construct_in_place<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 289  :     return _Ptr;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 290  : }

  0000a	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Obj$[rsp]
  00013	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ; std::_Voidify_iter<char * *>
  00020	48 8b d0	 mov	 rdx, rax
  00023	b9 08 00 00 00	 mov	 ecx, 8
  00028	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0002d	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00032	48 8b 4c 24 48	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00037	e8 00 00 00 00	 call	 ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ; std::forward<char * const &>
  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00041	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00044	48 89 01	 mov	 QWORD PTR [rcx], rax

; 159  :     }
; 160  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
tv65 = 0
$T1 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 66   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 67   :     // return smaller of _Left and _Right
; 68   :     return _Right < _Left ? _Right : _Left;

  0000e	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00013	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Left$[rsp]
  00018	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001b	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0001e	73 0b		 jae	 SHORT $LN3@min
  00020	48 8b 44 24 28	 mov	 rax, QWORD PTR _Right$[rsp]
  00025	48 89 04 24	 mov	 QWORD PTR tv65[rsp], rax
  00029	eb 09		 jmp	 SHORT $LN4@min
$LN3@min:
  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00030	48 89 04 24	 mov	 QWORD PTR tv65[rsp], rax
$LN4@min:
  00034	48 8b 04 24	 mov	 rax, QWORD PTR tv65[rsp]
  00038	48 89 44 24 08	 mov	 QWORD PTR $T1[rsp], rax
  0003d	48 8b 44 24 08	 mov	 rax, QWORD PTR $T1[rsp]

; 69   : }

  00042	48 83 c4 18	 add	 rsp, 24
  00046	c3		 ret	 0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z
_TEXT	SEGMENT
_My_data$ = 48
_Old_size$ = 56
_New_ptr$ = 64
_New_size$ = 72
_New_capacity$ = 80
_Old_capacity$ = 88
_Old_ptr$1 = 96
_Al$ = 104
_Raw_new$ = 112
this$ = 144
_Size_increase$ = 152
_Fn$ = 160
<_Args_0>$ = 168
<_Args_1>$ = 176
??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const *,unsigned __int64>, COMDAT

; 4538 :         const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 4539 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4540 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4541 :         auto& _My_data            = _Mypair._Myval2;

  0001b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 89 44 24 30	 mov	 QWORD PTR _My_data$[rsp], rax

; 4542 :         const size_type _Old_size = _My_data._Mysize;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  0002d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00031	48 89 44 24 38	 mov	 QWORD PTR _Old_size$[rsp], rax

; 4543 :         if (max_size() - _Old_size < _Size_increase) {

  00036	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00043	48 2b 44 24 38	 sub	 rax, QWORD PTR _Old_size$[rsp]
  00048	48 3b 84 24 98
	00 00 00	 cmp	 rax, QWORD PTR _Size_increase$[rsp]
  00050	73 05		 jae	 SHORT $LN2@Reallocate

; 4544 :             _Xlen_string(); // result too long

  00052	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4545 :         }
; 4546 : 
; 4547 :         const size_type _New_size     = _Old_size + _Size_increase;

  00057	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR _Size_increase$[rsp]
  0005f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx
  0006a	48 89 44 24 48	 mov	 QWORD PTR _New_size$[rsp], rax

; 4548 :         const size_type _Old_capacity = _My_data._Myres;

  0006f	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  00074	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00078	48 89 44 24 58	 mov	 QWORD PTR _Old_capacity$[rsp], rax

; 4549 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0007d	48 8b 54 24 48	 mov	 rdx, QWORD PTR _New_size$[rsp]
  00082	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008a	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0008f	48 89 44 24 50	 mov	 QWORD PTR _New_capacity$[rsp], rax

; 4550 :         auto& _Al                     = _Getal();

  00094	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000a1	48 89 44 24 68	 mov	 QWORD PTR _Al$[rsp], rax

; 4551 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a6	48 8b 44 24 50	 mov	 rax, QWORD PTR _New_capacity$[rsp]
  000ab	48 ff c0	 inc	 rax
  000ae	48 8b d0	 mov	 rdx, rax
  000b1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Al$[rsp]
  000b6	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000bb	48 89 44 24 40	 mov	 QWORD PTR _New_ptr$[rsp], rax

; 4552 : 
; 4553 : #ifdef __cpp_lib_constexpr_string
; 4554 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4555 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4556 :         }
; 4557 : #endif // __cpp_lib_constexpr_string
; 4558 :         _My_data._Orphan_all();

  000c0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _My_data$[rsp]
  000c5	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4559 :         _My_data._Mysize      = _New_size;

  000ca	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  000cf	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_size$[rsp]
  000d4	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 4560 :         _My_data._Myres       = _New_capacity;

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  000dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _New_capacity$[rsp]
  000e2	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4561 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000e6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  000eb	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  000f0	48 89 44 24 70	 mov	 QWORD PTR _Raw_new$[rsp], rax

; 4562 :         if (_BUF_SIZE <= _Old_capacity) {

  000f5	48 83 7c 24 58
	10		 cmp	 QWORD PTR _Old_capacity$[rsp], 16
  000fb	72 74		 jb	 SHORT $LN3@Reallocate

; 4563 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000fd	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  00102	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00105	48 89 44 24 60	 mov	 QWORD PTR _Old_ptr$1[rsp], rax

; 4564 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

  0010a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Old_ptr$1[rsp]
  0010f	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00114	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR <_Args_1>$[rsp]
  0011c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00121	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00129	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0012e	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _Old_size$[rsp]
  00133	4c 8b c0	 mov	 r8, rax
  00136	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Raw_new$[rsp]
  0013b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Fn$[rsp]
  00143	e8 00 00 00 00	 call	 ??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z ; <lambda_65e615be2a453ca0576c979606f46740>::operator()

; 4565 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00148	48 8b 44 24 58	 mov	 rax, QWORD PTR _Old_capacity$[rsp]
  0014d	48 ff c0	 inc	 rax
  00150	4c 8b c0	 mov	 r8, rax
  00153	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Old_ptr$1[rsp]
  00158	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Al$[rsp]
  0015d	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4566 :             _My_data._Bx._Ptr = _New_ptr;

  00162	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  00167	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  0016c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 4567 :         } else {

  0016f	eb 4b		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4568 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

  00171	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  00176	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR <_Args_1>$[rsp]
  0017e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00183	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  0018b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00190	4c 8b 4c 24 38	 mov	 r9, QWORD PTR _Old_size$[rsp]
  00195	4c 8b c0	 mov	 r8, rax
  00198	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Raw_new$[rsp]
  0019d	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Fn$[rsp]
  001a5	e8 00 00 00 00	 call	 ??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z ; <lambda_65e615be2a453ca0576c979606f46740>::operator()

; 4569 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  001aa	48 8b 44 24 30	 mov	 rax, QWORD PTR _My_data$[rsp]
  001af	48 8d 54 24 40	 lea	 rdx, QWORD PTR _New_ptr$[rsp]
  001b4	48 8b c8	 mov	 rcx, rax
  001b7	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4570 :         }
; 4571 : 
; 4572 :         return *this;

  001bc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
$LN5@Reallocate:

; 4573 :     }

  001c4	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001cb	c3		 ret	 0
??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const *,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_New_ptr$ = 72
_Old_ptr$ = 80
_Old_size$ = 88
_Ptr$ = 96
_Count$ = 104
??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z PROC ; <lambda_65e615be2a453ca0576c979606f46740>::operator(), COMDAT

; 3166 :                 const size_type _Count) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3167 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

  00018	4c 8b 44 24 58	 mov	 r8, QWORD PTR _Old_size$[rsp]
  0001d	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Old_ptr$[rsp]
  00022	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00027	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3168 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

  0002c	48 8b 44 24 58	 mov	 rax, QWORD PTR _Old_size$[rsp]
  00031	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00036	48 03 c8	 add	 rcx, rax
  00039	48 8b c1	 mov	 rax, rcx
  0003c	4c 8b 44 24 68	 mov	 r8, QWORD PTR _Count$[rsp]
  00041	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0004e	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  00053	48 8b 44 24 68	 mov	 rax, QWORD PTR _Count$[rsp]
  00058	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  0005d	48 03 c8	 add	 rcx, rax
  00060	48 8b c1	 mov	 rax, rcx
  00063	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00068	48 03 c8	 add	 rcx, rax
  0006b	48 8b c1	 mov	 rax, rcx
  0006e	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00073	48 8b c8	 mov	 rcx, rax
  00076	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3170 :             },

  0007b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007f	c3		 ret	 0
??R<lambda_65e615be2a453ca0576c979606f46740>@@QEBA@QEADQEBD_K12@Z ENDP ; <lambda_65e615be2a453ca0576c979606f46740>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
_TEXT	SEGMENT
_New_ptr$ = 32
_New_capacity$ = 40
_Old_capacity$ = 48
_Al$ = 56
this$ = 80
_New_size$ = 88
_Fn$ = 96
<_Args_0>$ = 104
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>, COMDAT

; 4505 :     _CONSTEXPR20_CONTAINER basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4506 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4507 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4508 :         if (_New_size > max_size()) {

  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00022	48 39 44 24 58	 cmp	 QWORD PTR _New_size$[rsp], rax
  00027	76 05		 jbe	 SHORT $LN2@Reallocate

; 4509 :             _Xlen_string(); // result too long

  00029	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4510 :         }
; 4511 : 
; 4512 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00037	48 89 44 24 30	 mov	 QWORD PTR _Old_capacity$[rsp], rax

; 4513 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0003c	48 8b 54 24 58	 mov	 rdx, QWORD PTR _New_size$[rsp]
  00041	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00046	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0004b	48 89 44 24 28	 mov	 QWORD PTR _New_capacity$[rsp], rax

; 4514 :         auto& _Al                     = _Getal();

  00050	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00055	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0005a	48 89 44 24 38	 mov	 QWORD PTR _Al$[rsp], rax

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR _New_capacity$[rsp]
  00064	48 ff c0	 inc	 rax
  00067	48 8b d0	 mov	 rdx, rax
  0006a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Al$[rsp]
  0006f	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00074	48 89 44 24 20	 mov	 QWORD PTR _New_ptr$[rsp], rax

; 4516 : 
; 4517 : #ifdef __cpp_lib_constexpr_string
; 4518 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4519 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4520 :         }
; 4521 : #endif // __cpp_lib_constexpr_string
; 4522 :         _Mypair._Myval2._Orphan_all();

  00079	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  00086	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0008b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _New_size$[rsp]
  00090	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  00094	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00099	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _New_capacity$[rsp]
  0009e	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4525 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000a2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  000a7	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  000ac	4c 8b 4c 24 68	 mov	 r9, QWORD PTR <_Args_0>$[rsp]
  000b1	4c 8b 44 24 58	 mov	 r8, QWORD PTR _New_size$[rsp]
  000b6	48 8b d0	 mov	 rdx, rax
  000b9	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Fn$[rsp]
  000be	e8 00 00 00 00	 call	 ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000c3	48 83 7c 24 30
	10		 cmp	 QWORD PTR _Old_capacity$[rsp], 16
  000c9	72 2c		 jb	 SHORT $LN3@Reallocate

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000cb	48 8b 44 24 30	 mov	 rax, QWORD PTR _Old_capacity$[rsp]
  000d0	48 ff c0	 inc	 rax
  000d3	4c 8b c0	 mov	 r8, rax
  000d6	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000db	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000de	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Al$[rsp]
  000e3	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4528 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000e8	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000ed	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  000f2	48 89 08	 mov	 QWORD PTR [rax], rcx

; 4529 :         } else {

  000f5	eb 12		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4530 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000f7	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000fc	48 8d 54 24 20	 lea	 rdx, QWORD PTR _New_ptr$[rsp]
  00101	48 8b c8	 mov	 rcx, rax
  00104	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4531 :         }
; 4532 : 
; 4533 :         return *this;

  00109	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
$LN5@Reallocate:

; 4534 :     }

  0010e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00112	c3		 ret	 0
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_New_ptr$ = 72
_Count$ = 80
_Ptr$ = 88
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z PROC ; <lambda_66f57f934f28d61049862f64df852ff0>::operator(), COMDAT

; 3256 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3257 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  00018	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  0001d	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00022	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00027	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0002c	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  00031	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  00036	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  0003b	48 03 c8	 add	 rcx, rax
  0003e	48 8b c1	 mov	 rax, rcx
  00041	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3259 :             },

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ENDP ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z
_TEXT	SEGMENT
_New_ptr$ = 32
_New_capacity$ = 40
_Old_capacity$ = 48
_Al$ = 56
this$ = 80
_New_size$ = 88
_Fn$ = 96
<_Args_0>$ = 104
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>, COMDAT

; 4505 :     _CONSTEXPR20_CONTAINER basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4506 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4507 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4508 :         if (_New_size > max_size()) {

  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00022	48 39 44 24 58	 cmp	 QWORD PTR _New_size$[rsp], rax
  00027	76 05		 jbe	 SHORT $LN2@Reallocate

; 4509 :             _Xlen_string(); // result too long

  00029	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4510 :         }
; 4511 : 
; 4512 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00037	48 89 44 24 30	 mov	 QWORD PTR _Old_capacity$[rsp], rax

; 4513 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  0003c	48 8b 54 24 58	 mov	 rdx, QWORD PTR _New_size$[rsp]
  00041	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00046	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  0004b	48 89 44 24 28	 mov	 QWORD PTR _New_capacity$[rsp], rax

; 4514 :         auto& _Al                     = _Getal();

  00050	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00055	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0005a	48 89 44 24 38	 mov	 QWORD PTR _Al$[rsp], rax

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR _New_capacity$[rsp]
  00064	48 ff c0	 inc	 rax
  00067	48 8b d0	 mov	 rdx, rax
  0006a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Al$[rsp]
  0006f	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00074	48 89 44 24 20	 mov	 QWORD PTR _New_ptr$[rsp], rax

; 4516 : 
; 4517 : #ifdef __cpp_lib_constexpr_string
; 4518 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4519 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4520 :         }
; 4521 : #endif // __cpp_lib_constexpr_string
; 4522 :         _Mypair._Myval2._Orphan_all();

  00079	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  00086	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0008b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _New_size$[rsp]
  00090	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  00094	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00099	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _New_capacity$[rsp]
  0009e	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4525 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000a2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  000a7	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  000ac	44 0f b6 4c 24
	68		 movzx	 r9d, BYTE PTR <_Args_0>$[rsp]
  000b2	4c 8b 44 24 58	 mov	 r8, QWORD PTR _New_size$[rsp]
  000b7	48 8b d0	 mov	 rdx, rax
  000ba	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Fn$[rsp]
  000bf	e8 00 00 00 00	 call	 ??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator()

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  000c4	48 83 7c 24 30
	10		 cmp	 QWORD PTR _Old_capacity$[rsp], 16
  000ca	72 2c		 jb	 SHORT $LN3@Reallocate

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000cc	48 8b 44 24 30	 mov	 rax, QWORD PTR _Old_capacity$[rsp]
  000d1	48 ff c0	 inc	 rax
  000d4	4c 8b c0	 mov	 r8, rax
  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000dc	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000df	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Al$[rsp]
  000e4	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4528 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  000e9	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  000f3	48 89 08	 mov	 QWORD PTR [rax], rcx

; 4529 :         } else {

  000f6	eb 12		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4530 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000fd	48 8d 54 24 20	 lea	 rdx, QWORD PTR _New_ptr$[rsp]
  00102	48 8b c8	 mov	 rcx, rax
  00105	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4531 :         }
; 4532 : 
; 4533 :         return *this;

  0010a	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
$LN5@Reallocate:

; 4534 :     }

  0010f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00113	c3		 ret	 0
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_New_ptr$ = 72
_Count$ = 80
_Ch$ = 88
??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z PROC ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator(), COMDAT

; 3279 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem _Ch) {

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3280 :                 _Traits::assign(_New_ptr, _Count, _Ch);

  00018	44 0f b6 44 24
	58		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  0001e	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Count$[rsp]
  00023	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  00028	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3281 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0002d	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  00032	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  00037	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _New_ptr$[rsp]
  0003c	48 03 c8	 add	 rcx, rax
  0003f	48 8b c1	 mov	 rax, rcx
  00042	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3282 :             },

  0004f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00053	c3		 ret	 0
??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z ENDP ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
_TEXT	SEGMENT
_Obj$ = 8
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z PROC	; std::_Destroy_in_place<char *>, COMDAT

; 307  : _CONSTEXPR20_DYNALLOC void _Destroy_in_place(_Ty& _Obj) noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 308  :     if constexpr (is_array_v<_Ty>) {
; 309  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 310  :     } else {
; 311  :         _Obj.~_Ty();
; 312  :     }
; 313  : }

  00005	c3		 ret	 0
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ENDP	; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1457 : }

  0000a	c3		 ret	 0
??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$numpunct@D@std@@MEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$numpunct@D@std@@MEAAPEAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1?$numpunct@D@std@@MEAA@XZ ; std::numpunct<char>::~numpunct<char>
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G?$numpunct@D@std@@MEAAPEAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Tidy@?$numpunct@D@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$numpunct@D@std@@AEAAXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT

; 226  :     void _Tidy() noexcept { // free all storage

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 227  :         _CSTD free(const_cast<char*>(_Grouping));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00012	e8 00 00 00 00	 call	 free

; 228  :         _CSTD free(const_cast<_Elem*>(_Falsename));

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00020	e8 00 00 00 00	 call	 free

; 229  :         _CSTD free(const_cast<_Elem*>(_Truename));

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  0002e	e8 00 00 00 00	 call	 free

; 230  :     }

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00037	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AEAAXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT

; 221  :     virtual string_type __CLR_OR_THIS_CALL do_truename() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 222  :         return string_type(_Truename);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  00017	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0001c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00021	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 223  :     }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT

; 217  :     virtual string_type __CLR_OR_THIS_CALL do_falsename() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 218  :         return string_type(_Falsename);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00017	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0001c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00021	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 219  :     }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT

; 213  :     virtual string __CLR_OR_THIS_CALL do_grouping() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 214  :         return string(_Grouping);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00017	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0001c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00021	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 215  :     }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MEBADXZ
_TEXT	SEGMENT
this$ = 8
?do_thousands_sep@?$numpunct@D@std@@MEBADXZ PROC	; std::numpunct<char>::do_thousands_sep, COMDAT

; 209  :     virtual _Elem __CLR_OR_THIS_CALL do_thousands_sep() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 210  :         return _Kseparator;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 40 19	 movzx	 eax, BYTE PTR [rax+25]

; 211  :     }

  0000e	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MEBADXZ ENDP	; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MEBADXZ
_TEXT	SEGMENT
this$ = 8
?do_decimal_point@?$numpunct@D@std@@MEBADXZ PROC	; std::numpunct<char>::do_decimal_point, COMDAT

; 205  :     virtual _Elem __CLR_OR_THIS_CALL do_decimal_point() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 206  :         return _Dp;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]

; 207  :     }

  0000e	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MEBADXZ ENDP	; std::numpunct<char>::do_decimal_point
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
_TEXT	SEGMENT
tv82 = 32
_Ptr$ = 40
_Guard$ = 48
$T1 = 64
_Cvt$ = 112
$T2 = 160
__$ArrayPad$ = 208
this$ = 256
_Lobj$ = 264
_Isdef$ = 272
?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT

; 182  :     void _Init(const _Locinfo& _Lobj, bool _Isdef = false) { // initialize from _Lobj

$LN7:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 183  :         const lconv* _Ptr      = _Lobj._Getlconv();

  0002a	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  00032	e8 00 00 00 00	 call	 ?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ ; std::_Locinfo::_Getlconv
  00037	48 89 44 24 28	 mov	 QWORD PTR _Ptr$[rsp], rax

; 184  :         _Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt(); // conversion information

  0003c	48 8d 54 24 70	 lea	 rdx, QWORD PTR _Cvt$[rsp]
  00041	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  00049	e8 00 00 00 00	 call	 ?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ ; std::_Locinfo::_Getcvt

; 185  : 
; 186  :         _Grouping  = nullptr;

  0004e	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 187  :         _Falsename = nullptr;

  0005e	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00066	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 188  :         _Truename  = nullptr;

  0006e	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00076	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 189  : 
; 190  :         _Tidy_guard<numpunct> _Guard{this};

  0007e	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00086	48 89 44 24 30	 mov	 QWORD PTR _Guard$[rsp], rax

; 191  :         _Grouping      = _Maklocstr(_Isdef ? "" : _Ptr->grouping, static_cast<char*>(nullptr), _Lobj._Getcvt());

  0008b	0f b6 84 24 10
	01 00 00	 movzx	 eax, BYTE PTR _Isdef$[rsp]
  00093	85 c0		 test	 eax, eax
  00095	74 0e		 je	 SHORT $LN5@Init
  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
  0009e	48 89 44 24 20	 mov	 QWORD PTR tv82[rsp], rax
  000a3	eb 0e		 jmp	 SHORT $LN6@Init
$LN5@Init:
  000a5	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000aa	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000ae	48 89 44 24 20	 mov	 QWORD PTR tv82[rsp], rax
$LN6@Init:
  000b3	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T2[rsp]
  000bb	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ ; std::_Locinfo::_Getcvt
  000c8	4c 8b c0	 mov	 r8, rax
  000cb	33 d2		 xor	 edx, edx
  000cd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv82[rsp]
  000d2	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000d7	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000df	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 192  :         _Falsename     = _Maklocstr(_Lobj._Getfalse(), static_cast<_Elem*>(nullptr), _Cvt);

  000e3	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  000eb	e8 00 00 00 00	 call	 ?_Getfalse@_Locinfo@std@@QEBAPEBDXZ ; std::_Locinfo::_Getfalse
  000f0	4c 8d 44 24 70	 lea	 r8, QWORD PTR _Cvt$[rsp]
  000f5	33 d2		 xor	 edx, edx
  000f7	48 8b c8	 mov	 rcx, rax
  000fa	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000ff	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00107	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 193  :         _Truename      = _Maklocstr(_Lobj._Gettrue(), static_cast<_Elem*>(nullptr), _Cvt);

  0010b	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  00113	e8 00 00 00 00	 call	 ?_Gettrue@_Locinfo@std@@QEBAPEBDXZ ; std::_Locinfo::_Gettrue
  00118	4c 8d 44 24 70	 lea	 r8, QWORD PTR _Cvt$[rsp]
  0011d	33 d2		 xor	 edx, edx
  0011f	48 8b c8	 mov	 rcx, rax
  00122	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00127	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0012f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 194  :         _Guard._Target = nullptr;

  00133	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR _Guard$[rsp], 0

; 195  : 
; 196  :         if (_Isdef) { // apply defaults for required facets

  0013c	0f b6 84 24 10
	01 00 00	 movzx	 eax, BYTE PTR _Isdef$[rsp]
  00144	85 c0		 test	 eax, eax
  00146	74 34		 je	 SHORT $LN2@Init

; 197  :             // _Grouping = _Maklocstr("", static_cast<char *>(nullptr), _Cvt);
; 198  :             _Dp         = _Maklocchr('.', static_cast<_Elem*>(nullptr), _Cvt);

  00148	4c 8d 44 24 70	 lea	 r8, QWORD PTR _Cvt$[rsp]
  0014d	33 d2		 xor	 edx, edx
  0014f	b1 2e		 mov	 cl, 46			; 0000002eH
  00151	e8 00 00 00 00	 call	 ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z ; std::_Maklocchr<char>
  00156	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0015e	88 41 18	 mov	 BYTE PTR [rcx+24], al

; 199  :             _Kseparator = _Maklocchr(',', static_cast<_Elem*>(nullptr), _Cvt);

  00161	4c 8d 44 24 70	 lea	 r8, QWORD PTR _Cvt$[rsp]
  00166	33 d2		 xor	 edx, edx
  00168	b1 2c		 mov	 cl, 44			; 0000002cH
  0016a	e8 00 00 00 00	 call	 ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z ; std::_Maklocchr<char>
  0016f	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00177	88 41 19	 mov	 BYTE PTR [rcx+25], al

; 200  :         } else {

  0017a	eb 30		 jmp	 SHORT $LN3@Init
$LN2@Init:

; 201  :             _Getvals(_Elem{}, _Ptr, _Cvt);

  0017c	48 8d 44 24 40	 lea	 rax, QWORD PTR $T1[rsp]
  00181	48 8d 4c 24 70	 lea	 rcx, QWORD PTR _Cvt$[rsp]
  00186	48 8b f8	 mov	 rdi, rax
  00189	48 8b f1	 mov	 rsi, rcx
  0018c	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00191	f3 a4		 rep movsb
  00193	4c 8d 4c 24 40	 lea	 r9, QWORD PTR $T1[rsp]
  00198	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Ptr$[rsp]
  0019d	33 d2		 xor	 edx, edx
  0019f	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001a7	e8 00 00 00 00	 call	 ??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z ; std::numpunct<char>::_Getvals<char>
$LN3@Init:

; 202  :         }
; 203  :     }

  001ac	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Guard$[rsp]
  001b1	e8 00 00 00 00	 call	 ??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::numpunct<char> >::~_Tidy_guard<std::numpunct<char> >
  001b6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001be	48 33 cc	 xor	 rcx, rsp
  001c1	e8 00 00 00 00	 call	 __security_check_cookie
  001c6	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  001cd	5f		 pop	 rdi
  001ce	5e		 pop	 rsi
  001cf	c3		 ret	 0
?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ??1?$numpunct@D@std@@MEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$numpunct@D@std@@MEAA@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT

; 161  :     virtual __CLR_OR_THIS_CALL ~numpunct() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$numpunct@D@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 162  :         _Tidy();

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AEAAXXZ ; std::numpunct<char>::_Tidy

; 163  :     }

  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??1?$numpunct@D@std@@MEAA@XZ ENDP			; std::numpunct<char>::~numpunct<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv87 = 48
$T3 = 56
_Ppf$ = 176
_Ploc$ = 184
?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 152  :     static size_t _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00011	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 153  :         // return locale category mask and construct standard facet
; 154  :         if (_Ppf && !*_Ppf) {

  00019	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR _Ppf$[rsp], 0
  00022	0f 84 95 00 00
	00		 je	 $LN2@Getcat
  00028	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  00030	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00034	0f 85 83 00 00
	00		 jne	 $LN2@Getcat

; 155  :             *_Ppf = new numpunct<_Elem>(_Locinfo(_Ploc->c_str()), 0, true);

  0003a	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0003f	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00044	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00049	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T2[rsp], 0
  0004f	74 39		 je	 SHORT $LN4@Getcat
  00051	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _Ploc$[rsp]
  00059	e8 00 00 00 00	 call	 ?c_str@locale@std@@QEBAPEBDXZ ; std::locale::c_str
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T3[rsp]
  00066	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QEAA@PEBD@Z ; std::_Locinfo::_Locinfo
  0006b	83 4c 24 20 01	 or	 DWORD PTR $T1[rsp], 1
  00070	41 b1 01	 mov	 r9b, 1
  00073	45 33 c0	 xor	 r8d, r8d
  00076	48 8b d0	 mov	 rdx, rax
  00079	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T2[rsp]
  0007e	e8 00 00 00 00	 call	 ??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z ; std::numpunct<char>::numpunct<char>
  00083	48 89 44 24 30	 mov	 QWORD PTR tv87[rsp], rax
  00088	eb 09		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  0008a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv87[rsp], 0
$LN5@Getcat:
  00093	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  0009b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv87[rsp]
  000a0	48 89 08	 mov	 QWORD PTR [rax], rcx
  000a3	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  000a7	83 e0 01	 and	 eax, 1
  000aa	85 c0		 test	 eax, eax
  000ac	74 0f		 je	 SHORT $LN2@Getcat
  000ae	83 64 24 20 fe	 and	 DWORD PTR $T1[rsp], -2
  000b3	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T3[rsp]
  000b8	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 156  :         }
; 157  :         return _X_NUMERIC;

  000bd	b8 04 00 00 00	 mov	 eax, 4

; 158  :     }

  000c2	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000c9	c3		 ret	 0
?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ENDP ; std::numpunct<char>::_Getcat
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z
_TEXT	SEGMENT
this$ = 48
_Lobj$ = 56
_Refs$ = 64
_Isdef$ = 72
??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT

; 148  :     numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false) : locale::facet(_Refs) {

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00018	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Refs$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ??0facet@locale@std@@IEAA@_K@Z ; std::locale::facet::facet
  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$numpunct@D@std@@6B@
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 149  :         _Init(_Lobj, _Isdef);

  00036	44 0f b6 44 24
	48		 movzx	 r8d, BYTE PTR _Isdef$[rsp]
  0003c	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Lobj$[rsp]
  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00046	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 150  :     }

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00054	c3		 ret	 0
??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z ENDP	; std::numpunct<char>::numpunct<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT

; 134  :     string_type truename() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 135  :         return do_truename();

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 8b 54 24 38	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	ff 50 38	 call	 QWORD PTR [rax+56]
  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 136  :     }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT

; 130  :     string_type falsename() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 131  :         return do_falsename();

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 8b 54 24 38	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	ff 50 30	 call	 QWORD PTR [rax+48]
  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 132  :     }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT

; 126  :     string grouping() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 127  :         return do_grouping();

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 8b 54 24 38	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	ff 50 28	 call	 QWORD PTR [rax+40]
  00023	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 128  :     }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QEBADXZ
_TEXT	SEGMENT
this$ = 48
?thousands_sep@?$numpunct@D@std@@QEBADXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT

; 122  :     _Elem thousands_sep() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 123  :         return do_thousands_sep();

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00016	ff 50 20	 call	 QWORD PTR [rax+32]

; 124  :     }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
?thousands_sep@?$numpunct@D@std@@QEBADXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QEBADXZ
_TEXT	SEGMENT
this$ = 48
?decimal_point@?$numpunct@D@std@@QEBADXZ PROC		; std::numpunct<char>::decimal_point, COMDAT

; 118  :     _Elem decimal_point() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 119  :         return do_decimal_point();

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00016	ff 50 18	 call	 QWORD PTR [rax+24]

; 120  :     }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
?decimal_point@?$numpunct@D@std@@QEBADXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Lock$1 = 32
_Psave$2 = 40
_Pfmod$3 = 48
_Pf$4 = 56
_Psave_guard$5 = 64
_Id$6 = 72
$T7 = 80
_Loc$ = 112
??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 428  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 429  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00009	33 d2		 xor	 edx, edx
  0000b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00010	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 430  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::numpunct<char> >::_Psave
  0001c	48 89 44 24 28	 mov	 QWORD PTR _Psave$2[rsp], rax

; 431  : 
; 432  :     const size_t _Id         = _Facet::id;

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00028	e8 00 00 00 00	 call	 ??Bid@locale@std@@QEAA_KXZ ; std::locale::id::operator unsigned __int64
  0002d	48 89 44 24 48	 mov	 QWORD PTR _Id$6[rsp], rax

; 433  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);

  00032	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Id$6[rsp]
  00037	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Loc$[rsp]
  0003c	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
  00041	48 89 44 24 38	 mov	 QWORD PTR _Pf$4[rsp], rax

; 434  : 
; 435  :     if (!_Pf) {

  00046	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Pf$4[rsp], 0
  0004c	0f 85 8d 00 00
	00		 jne	 $LN2@use_facet

; 436  :         if (_Psave) {

  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Psave$2[rsp], 0
  00058	74 0c		 je	 SHORT $LN3@use_facet

; 437  :             _Pf = _Psave; // lazy facet already allocated

  0005a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  0005f	48 89 44 24 38	 mov	 QWORD PTR _Pf$4[rsp], rax
  00064	eb 79		 jmp	 SHORT $LN2@use_facet
$LN3@use_facet:

; 438  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  00066	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Loc$[rsp]
  0006b	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Psave$2[rsp]
  00070	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::numpunct<char>::_Getcat
  00075	48 83 f8 ff	 cmp	 rax, -1
  00079	75 07		 jne	 SHORT $LN5@use_facet

; 439  : #if _HAS_EXCEPTIONS
; 440  :             _Throw_bad_cast(); // lazy disallowed

  0007b	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast

; 441  : #else // _HAS_EXCEPTIONS
; 442  :             _CSTD abort(); // lazy disallowed
; 443  : #endif // _HAS_EXCEPTIONS
; 444  :         } else { // queue up lazy facet for destruction

  00080	eb 5d		 jmp	 SHORT $LN2@use_facet
$LN5@use_facet:

; 445  :             auto _Pfmod = const_cast<locale::facet*>(_Psave);

  00082	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  00087	48 89 44 24 30	 mov	 QWORD PTR _Pfmod$3[rsp], rax

; 446  :             unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base*>(_Pfmod));

  0008c	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Pfmod$3[rsp]
  00091	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Psave_guard$5[rsp]
  00096	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>

; 447  : 
; 448  : #if defined(_M_CEE)
; 449  :             _Facet_Register_m(_Pfmod);
; 450  : #else // defined(_M_CEE)
; 451  :             _Facet_Register(_Pfmod);

  0009b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Pfmod$3[rsp]
  000a0	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register

; 452  : #endif // defined(_M_CEE)
; 453  : 
; 454  :             _Pfmod->_Incref();

  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pfmod$3[rsp]
  000aa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ad	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Pfmod$3[rsp]
  000b2	ff 50 08	 call	 QWORD PTR [rax+8]

; 455  :             _Facetptr<_Facet>::_Psave = _Psave;

  000b5	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  000ba	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::numpunct<char> >::_Psave

; 456  :             _Pf                       = _Psave;

  000c1	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  000c6	48 89 44 24 38	 mov	 QWORD PTR _Pf$4[rsp], rax

; 457  : 
; 458  :             (void) _Psave_guard.release();

  000cb	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Psave_guard$5[rsp]
  000d0	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 459  :         }

  000d5	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Psave_guard$5[rsp]
  000da	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 460  :     }
; 461  : 
; 462  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  000df	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pf$4[rsp]
  000e4	48 89 44 24 50	 mov	 QWORD PTR $T7[rsp], rax
  000e9	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  000ee	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  000f3	48 8b 44 24 50	 mov	 rax, QWORD PTR $T7[rsp]

; 463  :     _END_LOCK()
; 464  : } // end of use_facet body

  000f8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000fc	c3		 ret	 0
??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ??$_Float_put_desired_precision@N@std@@YAH_JH@Z
_TEXT	SEGMENT
tv65 = 0
tv71 = 1
_Is_hex$ = 2
_Is_default_float$1 = 3
_Default_precision$2 = 4
_Precision$ = 32
_Float_flags$ = 40
??$_Float_put_desired_precision@N@std@@YAH_JH@Z PROC	; std::_Float_put_desired_precision<double>, COMDAT

; 1167 : int _Float_put_desired_precision(const streamsize _Precision, const ios_base::fmtflags _Float_flags) {

$LN14:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 1168 :     const bool _Is_hex = _Float_flags == (ios_base::fixed | ios_base::scientific);

  0000d	81 7c 24 28 00
	30 00 00	 cmp	 DWORD PTR _Float_flags$[rsp], 12288 ; 00003000H
  00015	75 06		 jne	 SHORT $LN10@Float_put_
  00017	c6 04 24 01	 mov	 BYTE PTR tv65[rsp], 1
  0001b	eb 04		 jmp	 SHORT $LN11@Float_put_
$LN10@Float_put_:
  0001d	c6 04 24 00	 mov	 BYTE PTR tv65[rsp], 0
$LN11@Float_put_:
  00021	0f b6 04 24	 movzx	 eax, BYTE PTR tv65[rsp]
  00025	88 44 24 02	 mov	 BYTE PTR _Is_hex$[rsp], al

; 1169 :     if (_Is_hex) {

  00029	0f b6 44 24 02	 movzx	 eax, BYTE PTR _Is_hex$[rsp]
  0002e	85 c0		 test	 eax, eax
  00030	74 07		 je	 SHORT $LN2@Float_put_

; 1170 :         return _Hex_float_precision<_Ty>::value;

  00032	b8 0d 00 00 00	 mov	 eax, 13
  00037	eb 59		 jmp	 SHORT $LN1@Float_put_
$LN2@Float_put_:

; 1171 :     }
; 1172 : 
; 1173 :     if (_Precision > 0) {

  00039	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Precision$[rsp], 0
  0003f	7e 08		 jle	 SHORT $LN3@Float_put_

; 1174 :         return static_cast<int>(_Precision);

  00041	8b 44 24 20	 mov	 eax, DWORD PTR _Precision$[rsp]
  00045	eb 4b		 jmp	 SHORT $LN1@Float_put_
  00047	eb 49		 jmp	 SHORT $LN4@Float_put_
$LN3@Float_put_:

; 1175 :     } else if (_Precision == 0) {

  00049	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Precision$[rsp], 0
  0004f	75 34		 jne	 SHORT $LN5@Float_put_

; 1176 :         const bool _Is_default_float = _Float_flags == 0;

  00051	83 7c 24 28 00	 cmp	 DWORD PTR _Float_flags$[rsp], 0
  00056	75 07		 jne	 SHORT $LN12@Float_put_
  00058	c6 44 24 01 01	 mov	 BYTE PTR tv71[rsp], 1
  0005d	eb 05		 jmp	 SHORT $LN13@Float_put_
$LN12@Float_put_:
  0005f	c6 44 24 01 00	 mov	 BYTE PTR tv71[rsp], 0
$LN13@Float_put_:
  00064	0f b6 44 24 01	 movzx	 eax, BYTE PTR tv71[rsp]
  00069	88 44 24 03	 mov	 BYTE PTR _Is_default_float$1[rsp], al

; 1177 :         if (_Is_default_float) {

  0006d	0f b6 44 24 03	 movzx	 eax, BYTE PTR _Is_default_float$1[rsp]
  00072	85 c0		 test	 eax, eax
  00074	74 09		 je	 SHORT $LN7@Float_put_

; 1178 :             return 1;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	eb 15		 jmp	 SHORT $LN1@Float_put_

; 1179 :         } else {

  0007d	eb 04		 jmp	 SHORT $LN8@Float_put_
$LN7@Float_put_:

; 1180 :             return 0;

  0007f	33 c0		 xor	 eax, eax
  00081	eb 0f		 jmp	 SHORT $LN1@Float_put_
$LN8@Float_put_:

; 1181 :         }
; 1182 :     } else {

  00083	eb 0d		 jmp	 SHORT $LN6@Float_put_
$LN5@Float_put_:

; 1183 :         constexpr int _Default_precision = 6;

  00085	c7 44 24 04 06
	00 00 00	 mov	 DWORD PTR _Default_precision$2[rsp], 6

; 1184 :         return _Default_precision;

  0008d	b8 06 00 00 00	 mov	 eax, 6
$LN6@Float_put_:
$LN4@Float_put_:
$LN1@Float_put_:

; 1185 :     }
; 1186 : }

  00092	48 83 c4 18	 add	 rsp, 24
  00096	c3		 ret	 0
??$_Float_put_desired_precision@N@std@@YAH_JH@Z ENDP	; std::_Float_put_desired_precision<double>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ??$_Float_put_desired_precision@O@std@@YAH_JH@Z
_TEXT	SEGMENT
tv65 = 0
tv71 = 1
_Is_hex$ = 2
_Is_default_float$1 = 3
_Default_precision$2 = 4
_Precision$ = 32
_Float_flags$ = 40
??$_Float_put_desired_precision@O@std@@YAH_JH@Z PROC	; std::_Float_put_desired_precision<long double>, COMDAT

; 1167 : int _Float_put_desired_precision(const streamsize _Precision, const ios_base::fmtflags _Float_flags) {

$LN14:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 1168 :     const bool _Is_hex = _Float_flags == (ios_base::fixed | ios_base::scientific);

  0000d	81 7c 24 28 00
	30 00 00	 cmp	 DWORD PTR _Float_flags$[rsp], 12288 ; 00003000H
  00015	75 06		 jne	 SHORT $LN10@Float_put_
  00017	c6 04 24 01	 mov	 BYTE PTR tv65[rsp], 1
  0001b	eb 04		 jmp	 SHORT $LN11@Float_put_
$LN10@Float_put_:
  0001d	c6 04 24 00	 mov	 BYTE PTR tv65[rsp], 0
$LN11@Float_put_:
  00021	0f b6 04 24	 movzx	 eax, BYTE PTR tv65[rsp]
  00025	88 44 24 02	 mov	 BYTE PTR _Is_hex$[rsp], al

; 1169 :     if (_Is_hex) {

  00029	0f b6 44 24 02	 movzx	 eax, BYTE PTR _Is_hex$[rsp]
  0002e	85 c0		 test	 eax, eax
  00030	74 07		 je	 SHORT $LN2@Float_put_

; 1170 :         return _Hex_float_precision<_Ty>::value;

  00032	b8 0d 00 00 00	 mov	 eax, 13
  00037	eb 59		 jmp	 SHORT $LN1@Float_put_
$LN2@Float_put_:

; 1171 :     }
; 1172 : 
; 1173 :     if (_Precision > 0) {

  00039	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Precision$[rsp], 0
  0003f	7e 08		 jle	 SHORT $LN3@Float_put_

; 1174 :         return static_cast<int>(_Precision);

  00041	8b 44 24 20	 mov	 eax, DWORD PTR _Precision$[rsp]
  00045	eb 4b		 jmp	 SHORT $LN1@Float_put_
  00047	eb 49		 jmp	 SHORT $LN4@Float_put_
$LN3@Float_put_:

; 1175 :     } else if (_Precision == 0) {

  00049	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Precision$[rsp], 0
  0004f	75 34		 jne	 SHORT $LN5@Float_put_

; 1176 :         const bool _Is_default_float = _Float_flags == 0;

  00051	83 7c 24 28 00	 cmp	 DWORD PTR _Float_flags$[rsp], 0
  00056	75 07		 jne	 SHORT $LN12@Float_put_
  00058	c6 44 24 01 01	 mov	 BYTE PTR tv71[rsp], 1
  0005d	eb 05		 jmp	 SHORT $LN13@Float_put_
$LN12@Float_put_:
  0005f	c6 44 24 01 00	 mov	 BYTE PTR tv71[rsp], 0
$LN13@Float_put_:
  00064	0f b6 44 24 01	 movzx	 eax, BYTE PTR tv71[rsp]
  00069	88 44 24 03	 mov	 BYTE PTR _Is_default_float$1[rsp], al

; 1177 :         if (_Is_default_float) {

  0006d	0f b6 44 24 03	 movzx	 eax, BYTE PTR _Is_default_float$1[rsp]
  00072	85 c0		 test	 eax, eax
  00074	74 09		 je	 SHORT $LN7@Float_put_

; 1178 :             return 1;

  00076	b8 01 00 00 00	 mov	 eax, 1
  0007b	eb 15		 jmp	 SHORT $LN1@Float_put_

; 1179 :         } else {

  0007d	eb 04		 jmp	 SHORT $LN8@Float_put_
$LN7@Float_put_:

; 1180 :             return 0;

  0007f	33 c0		 xor	 eax, eax
  00081	eb 0f		 jmp	 SHORT $LN1@Float_put_
$LN8@Float_put_:

; 1181 :         }
; 1182 :     } else {

  00083	eb 0d		 jmp	 SHORT $LN6@Float_put_
$LN5@Float_put_:

; 1183 :         constexpr int _Default_precision = 6;

  00085	c7 44 24 04 06
	00 00 00	 mov	 DWORD PTR _Default_precision$2[rsp], 6

; 1184 :         return _Default_precision;

  0008d	b8 06 00 00 00	 mov	 eax, 6
$LN6@Float_put_:
$LN4@Float_put_:
$LN1@Float_put_:

; 1185 :     }
; 1186 : }

  00092	48 83 c4 18	 add	 rsp, 24
  00096	c3		 ret	 0
??$_Float_put_desired_precision@O@std@@YAH_JH@Z ENDP	; std::_Float_put_desired_precision<long double>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT

; 1390 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>
  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT

; 1395 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Val1$[rsp]
  00017	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >
  0001c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00021	48 8b c8	 mov	 rcx, rax
  00024	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1457 : }

  0000a	c3		 ret	 0
??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iterator
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT

; 547  :     _NODISCARD bool failed() const noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 548  :         return _Failed;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 549  :     }

  0000d	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iterator
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT

; 539  :     ostreambuf_iterator& operator++() noexcept /* strengthened */ {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 540  :         return *this;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 541  :     }

  0000a	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iterator
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT

; 535  :     _NODISCARD ostreambuf_iterator& operator*() noexcept /* strengthened */ {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 536  :         return *this;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 537  :     }

  0000a	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iterator
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
this$ = 64
_Right$ = 72
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT

; 527  :     ostreambuf_iterator& operator=(_Elem _Right) { // store element and increment

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  0000d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00012	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00017	74 36		 je	 SHORT $LN3@operator
  00019	0f b6 54 24 48	 movzx	 edx, BYTE PTR _Right$[rsp]
  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00027	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  0002c	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00030	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00035	89 44 24 24	 mov	 DWORD PTR $T2[rsp], eax
  00039	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  0003e	48 8d 4c 24 24	 lea	 rcx, QWORD PTR $T2[rsp]
  00043	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00048	0f b6 c0	 movzx	 eax, al
  0004b	85 c0		 test	 eax, eax
  0004d	74 08		 je	 SHORT $LN2@operator
$LN3@operator:

; 529  :             _Failed = true;

  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00054	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN2@operator:

; 530  :         }
; 531  : 
; 532  :         return *this;

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]

; 533  :     }

  0005c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00060	c3		 ret	 0
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iterator
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Sb$ = 16
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT

; 523  :     ostreambuf_iterator(streambuf_type* _Sb) noexcept : _Strbuf(_Sb) {}

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 524  : 
; 525  :     ostreambuf_iterator(ostream_type& _Ostr) noexcept : _Strbuf(_Ostr.rdbuf()) {}
; 526  : 
; 527  :     ostreambuf_iterator& operator=(_Elem _Right) { // store element and increment
; 528  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {
; 529  :             _Failed = true;
; 530  :         }
; 531  : 
; 532  :         return *this;
; 533  :     }
; 534  : 
; 535  :     _NODISCARD ostreambuf_iterator& operator*() noexcept /* strengthened */ {
; 536  :         return *this;
; 537  :     }
; 538  : 
; 539  :     ostreambuf_iterator& operator++() noexcept /* strengthened */ {
; 540  :         return *this;
; 541  :     }
; 542  : 
; 543  :     ostreambuf_iterator& operator++(int) noexcept /* strengthened */ {
; 544  :         return *this;
; 545  :     }
; 546  : 
; 547  :     _NODISCARD bool failed() const noexcept {
; 548  :         return _Failed;
; 549  :     }
; 550  : 
; 551  : private:
; 552  :     bool _Failed            = false; // true if any stores have failed

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000f	c6 00 00	 mov	 BYTE PTR [rax], 0

; 523  :     ostreambuf_iterator(streambuf_type* _Sb) noexcept : _Strbuf(_Sb) {}

  00012	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _Sb$[rsp]
  0001c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00020	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00025	c3		 ret	 0
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
_Dest$ = 80
_Ch$ = 88
_Count$ = 96
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1600 :     _OutIt __CLRCALL_OR_CDECL _Rep(_OutIt _Dest, _Elem _Ch, size_t _Count) const { // put _Count * _Ch to _Dest

$LN6:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1601 :         for (; 0 < _Count; --_Count, (void) ++_Dest) {

  0001a	eb 17		 jmp	 SHORT $LN4@Rep
$LN2@Rep:
  0001c	48 8b 44 24 60	 mov	 rax, QWORD PTR _Count$[rsp]
  00021	48 ff c8	 dec	 rax
  00024	48 89 44 24 60	 mov	 QWORD PTR _Count$[rsp], rax
  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0002e	e8 00 00 00 00	 call	 ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
$LN4@Rep:
  00033	48 83 7c 24 60
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00039	76 19		 jbe	 SHORT $LN3@Rep

; 1602 :             *_Dest = _Ch;

  0003b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00040	e8 00 00 00 00	 call	 ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
  00045	0f b6 54 24 58	 movzx	 edx, BYTE PTR _Ch$[rsp]
  0004a	48 8b c8	 mov	 rcx, rax
  0004d	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=

; 1603 :         }

  00052	eb c8		 jmp	 SHORT $LN2@Rep
$LN3@Rep:

; 1604 : 
; 1605 :         return _Dest;

  00054	48 8b 7c 24 48	 mov	 rdi, QWORD PTR __$ReturnUdt$[rsp]
  00059	48 8b 74 24 50	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0005e	b9 10 00 00 00	 mov	 ecx, 16
  00063	f3 a4		 rep movsb
  00065	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1606 :     }

  0006a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006e	5f		 pop	 rdi
  0006f	5e		 pop	 rsi
  00070	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
_Dest$ = 80
_Ptr$ = 88
_Count$ = 96
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1592 :         _OutIt _Dest, const _Elem* _Ptr, size_t _Count) const { // put [_Ptr, _Ptr + _Count) to _Dest

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1593 :         for (; 0 < _Count; --_Count, (void) ++_Dest, ++_Ptr) {

  0001a	eb 24		 jmp	 SHORT $LN4@Put
$LN2@Put:
  0001c	48 8b 44 24 60	 mov	 rax, QWORD PTR _Count$[rsp]
  00021	48 ff c8	 dec	 rax
  00024	48 89 44 24 60	 mov	 QWORD PTR _Count$[rsp], rax
  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0002e	e8 00 00 00 00	 call	 ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
  00033	48 8b 44 24 58	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00038	48 ff c0	 inc	 rax
  0003b	48 89 44 24 58	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN4@Put:
  00040	48 83 7c 24 60
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00046	76 1c		 jbe	 SHORT $LN3@Put

; 1594 :             *_Dest = *_Ptr;

  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0004d	e8 00 00 00 00	 call	 ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
  00052	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00057	0f b6 11	 movzx	 edx, BYTE PTR [rcx]
  0005a	48 8b c8	 mov	 rcx, rax
  0005d	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=

; 1595 :         }

  00062	eb b8		 jmp	 SHORT $LN2@Put
$LN3@Put:

; 1596 : 
; 1597 :         return _Dest;

  00064	48 8b 7c 24 48	 mov	 rdi, QWORD PTR __$ReturnUdt$[rsp]
  00069	48 8b 74 24 50	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0006e	b9 10 00 00 00	 mov	 ecx, 16
  00073	f3 a4		 rep movsb
  00075	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1598 :     }

  0007a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007e	5f		 pop	 rdi
  0007f	5e		 pop	 rsi
  00080	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z
_TEXT	SEGMENT
_Kseparator$1 = 48
_Prefix$ = 56
_Pg$ = 64
_Adjustfield$ = 72
_Fillcount$ = 80
tv69 = 88
_Punct_fac$ = 96
_Ctype_fac$ = 104
tv244 = 112
$T2 = 120
$T3 = 136
$T4 = 160
$T5 = 176
$T6 = 192
$T7 = 208
$T8 = 224
$T9 = 240
$T10 = 256
$T11 = 272
$T12 = 288
$T13 = 304
$T14 = 320
$T15 = 336
$T16 = 352
_Groupstring$ = 368
_Grouping$ = 400
__$ArrayPad$ = 432
this$ = 480
__$ReturnUdt$ = 488
_Dest$ = 496
_Iosbase$ = 504
_Fill$ = 512
_Buf$ = 520
_Count$ = 528
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1538 :         size_t _Count) const { // put formatted integer to _Dest

$LN19:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1539 :         auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

  0002f	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR _Count$[rsp], 0
  00038	76 2b		 jbe	 SHORT $LN17@Iput
  0003a	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR _Buf$[rsp]
  00042	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00045	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00048	74 10		 je	 SHORT $LN16@Iput
  0004a	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR _Buf$[rsp]
  00052	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00055	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00058	75 0b		 jne	 SHORT $LN17@Iput
$LN16@Iput:
  0005a	48 c7 44 24 58
	01 00 00 00	 mov	 QWORD PTR tv69[rsp], 1
  00063	eb 09		 jmp	 SHORT $LN18@Iput
$LN17@Iput:
  00065	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv69[rsp], 0
$LN18@Iput:
  0006e	48 8b 44 24 58	 mov	 rax, QWORD PTR tv69[rsp]
  00073	48 89 44 24 38	 mov	 QWORD PTR _Prefix$[rsp], rax

; 1540 :         if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1541 :             && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X')) {

  00078	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00080	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00085	25 00 0e 00 00	 and	 eax, 3584		; 00000e00H
  0008a	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  0008f	75 74		 jne	 SHORT $LN4@Iput
  00091	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  00096	48 83 c0 02	 add	 rax, 2
  0009a	48 3b 84 24 10
	02 00 00	 cmp	 rax, QWORD PTR _Count$[rsp]
  000a2	77 61		 ja	 SHORT $LN4@Iput
  000a4	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000a9	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  000b1	48 03 c8	 add	 rcx, rax
  000b4	48 8b c1	 mov	 rax, rcx
  000b7	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ba	83 f8 30	 cmp	 eax, 48			; 00000030H
  000bd	75 46		 jne	 SHORT $LN4@Iput
  000bf	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000c4	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  000cc	48 03 c8	 add	 rcx, rax
  000cf	48 8b c1	 mov	 rax, rcx
  000d2	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  000d6	83 f8 78	 cmp	 eax, 120		; 00000078H
  000d9	74 1c		 je	 SHORT $LN5@Iput
  000db	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000e0	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  000e8	48 03 c8	 add	 rcx, rax
  000eb	48 8b c1	 mov	 rax, rcx
  000ee	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  000f2	83 f8 58	 cmp	 eax, 88			; 00000058H
  000f5	75 0e		 jne	 SHORT $LN4@Iput
$LN5@Iput:

; 1542 :             _Prefix += 2;

  000f7	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000fc	48 83 c0 02	 add	 rax, 2
  00100	48 89 44 24 38	 mov	 QWORD PTR _Prefix$[rsp], rax
$LN4@Iput:

; 1543 :         }
; 1544 : 
; 1545 :         const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  00105	48 8d 54 24 78	 lea	 rdx, QWORD PTR $T2[rsp]
  0010a	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00112	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  00117	48 8b c8	 mov	 rcx, rax
  0011a	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0011f	48 89 44 24 68	 mov	 QWORD PTR _Ctype_fac$[rsp], rax
  00124	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T2[rsp]
  00129	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 1546 :         basic_string<_Elem> _Groupstring(_Count, _Elem(0)); // reserve space

  0012e	45 33 c0	 xor	 r8d, r8d
  00131	48 8b 94 24 10
	02 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  00139	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00141	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1547 :         _Ctype_fac.widen(_Buf, _Buf + _Count, &_Groupstring[0]);

  00146	33 d2		 xor	 edx, edx
  00148	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00150	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00155	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  0015d	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR _Buf$[rsp]
  00165	48 03 d1	 add	 rdx, rcx
  00168	48 8b ca	 mov	 rcx, rdx
  0016b	4c 8b c8	 mov	 r9, rax
  0016e	4c 8b c1	 mov	 r8, rcx
  00171	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR _Buf$[rsp]
  00179	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Ctype_fac$[rsp]
  0017e	e8 00 00 00 00	 call	 ?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z ; std::ctype<char>::widen

; 1548 : 
; 1549 :         const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00183	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR $T3[rsp]
  0018b	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00193	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  00198	48 8b c8	 mov	 rcx, rax
  0019b	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  001a0	48 89 44 24 60	 mov	 QWORD PTR _Punct_fac$[rsp], rax
  001a5	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR $T3[rsp]
  001ad	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 1550 :         const string _Grouping = _Punct_fac.grouping();

  001b2	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR _Grouping$[rsp]
  001ba	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Punct_fac$[rsp]
  001bf	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1551 :         const char* _Pg        = &_Grouping[0];

  001c4	33 d2		 xor	 edx, edx
  001c6	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Grouping$[rsp]
  001ce	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001d3	48 89 44 24 40	 mov	 QWORD PTR _Pg$[rsp], rax

; 1552 :         if (*_Pg != CHAR_MAX && '\0' < *_Pg) { // grouping specified, add thousands separators

  001d8	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  001dd	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001e0	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  001e3	0f 84 c8 00 00
	00		 je	 $LN6@Iput
  001e9	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  001ee	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001f1	85 c0		 test	 eax, eax
  001f3	0f 8e b8 00 00
	00		 jle	 $LN6@Iput

; 1553 :             const _Elem _Kseparator = _Punct_fac.thousands_sep();

  001f9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Punct_fac$[rsp]
  001fe	e8 00 00 00 00	 call	 ?thousands_sep@?$numpunct@D@std@@QEBADXZ ; std::numpunct<char>::thousands_sep
  00203	88 44 24 30	 mov	 BYTE PTR _Kseparator$1[rsp], al
$LN2@Iput:

; 1554 :             while (*_Pg != CHAR_MAX && '\0' < *_Pg && static_cast<size_t>(*_Pg) < _Count - _Prefix) {

  00207	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  0020c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0020f	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00212	0f 84 99 00 00
	00		 je	 $LN6@Iput
  00218	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  0021d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00220	85 c0		 test	 eax, eax
  00222	0f 8e 89 00 00
	00		 jle	 $LN6@Iput
  00228	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  0022d	48 0f be 00	 movsx	 rax, BYTE PTR [rax]
  00231	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  00236	48 8b 94 24 10
	02 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  0023e	48 2b d1	 sub	 rdx, rcx
  00241	48 8b ca	 mov	 rcx, rdx
  00244	48 3b c1	 cmp	 rax, rcx
  00247	73 68		 jae	 SHORT $LN6@Iput

; 1555 :                 // insert thousands separator
; 1556 :                 _Count -= *_Pg;

  00249	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  0024e	48 0f be 00	 movsx	 rax, BYTE PTR [rax]
  00252	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  0025a	48 2b c8	 sub	 rcx, rax
  0025d	48 8b c1	 mov	 rax, rcx
  00260	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR _Count$[rsp], rax

; 1557 :                 _Groupstring.insert(_Count, 1, _Kseparator);

  00268	44 0f b6 4c 24
	30		 movzx	 r9d, BYTE PTR _Kseparator$1[rsp]
  0026e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00274	48 8b 94 24 10
	02 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  0027c	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00284	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1558 :                 if ('\0' < _Pg[1]) {

  00289	b8 01 00 00 00	 mov	 eax, 1
  0028e	48 6b c0 01	 imul	 rax, rax, 1
  00292	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Pg$[rsp]
  00297	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0029b	85 c0		 test	 eax, eax
  0029d	7e 0d		 jle	 SHORT $LN7@Iput

; 1559 :                     ++_Pg; // not last group, advance

  0029f	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  002a4	48 ff c0	 inc	 rax
  002a7	48 89 44 24 40	 mov	 QWORD PTR _Pg$[rsp], rax
$LN7@Iput:

; 1560 :                 }
; 1561 :             }

  002ac	e9 56 ff ff ff	 jmp	 $LN2@Iput
$LN6@Iput:

; 1562 :         }
; 1563 : 
; 1564 :         _Count = _Groupstring.size();

  002b1	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  002b9	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  002be	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR _Count$[rsp], rax

; 1565 : 
; 1566 :         size_t _Fillcount;
; 1567 :         if (_Iosbase.width() <= 0 || static_cast<size_t>(_Iosbase.width()) <= _Count) {

  002c6	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  002ce	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  002d3	48 85 c0	 test	 rax, rax
  002d6	7e 17		 jle	 SHORT $LN10@Iput
  002d8	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  002e0	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  002e5	48 3b 84 24 10
	02 00 00	 cmp	 rax, QWORD PTR _Count$[rsp]
  002ed	77 0b		 ja	 SHORT $LN8@Iput
$LN10@Iput:

; 1568 :             _Fillcount = 0;

  002ef	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR _Fillcount$[rsp], 0

; 1569 :         } else {

  002f8	eb 1a		 jmp	 SHORT $LN9@Iput
$LN8@Iput:

; 1570 :             _Fillcount = static_cast<size_t>(_Iosbase.width()) - _Count;

  002fa	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00302	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  00307	48 2b 84 24 10
	02 00 00	 sub	 rax, QWORD PTR _Count$[rsp]
  0030f	48 89 44 24 50	 mov	 QWORD PTR _Fillcount$[rsp], rax
$LN9@Iput:

; 1571 :         }
; 1572 : 
; 1573 :         ios_base::fmtflags _Adjustfield = _Iosbase.flags() & ios_base::adjustfield;

  00314	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0031c	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00321	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00326	89 44 24 48	 mov	 DWORD PTR _Adjustfield$[rsp], eax

; 1574 :         if (_Adjustfield != ios_base::left && _Adjustfield != ios_base::internal) { // put leading fill

  0032a	83 7c 24 48 40	 cmp	 DWORD PTR _Adjustfield$[rsp], 64 ; 00000040H
  0032f	0f 84 dd 00 00
	00		 je	 $LN11@Iput
  00335	81 7c 24 48 00
	01 00 00	 cmp	 DWORD PTR _Adjustfield$[rsp], 256 ; 00000100H
  0033d	0f 84 cf 00 00
	00		 je	 $LN11@Iput

; 1575 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  00343	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  0034b	48 8b f8	 mov	 rdi, rax
  0034e	48 8b b4 24 f0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00356	b9 10 00 00 00	 mov	 ecx, 16
  0035b	f3 a4		 rep movsb
  0035d	48 8b 44 24 50	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  00362	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00367	44 0f b6 8c 24
	00 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  00370	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR $T4[rsp]
  00378	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  00380	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00388	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0038d	48 8b bc 24 f0
	01 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  00395	48 8b f0	 mov	 rsi, rax
  00398	b9 10 00 00 00	 mov	 ecx, 16
  0039d	f3 a4		 rep movsb

; 1576 :             _Fillcount = 0;

  0039f	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR _Fillcount$[rsp], 0

; 1577 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  003a8	33 d2		 xor	 edx, edx
  003aa	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  003b2	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  003b7	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  003bf	48 8b f9	 mov	 rdi, rcx
  003c2	48 8b b4 24 f0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  003ca	b9 10 00 00 00	 mov	 ecx, 16
  003cf	f3 a4		 rep movsb
  003d1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  003d6	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  003db	4c 8b c8	 mov	 r9, rax
  003de	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR $T5[rsp]
  003e6	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T12[rsp]
  003ee	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003f6	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  003fb	48 8b bc 24 f0
	01 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  00403	48 8b f0	 mov	 rsi, rax
  00406	b9 10 00 00 00	 mov	 ecx, 16
  0040b	f3 a4		 rep movsb
  0040d	e9 3f 01 00 00	 jmp	 $LN12@Iput
$LN11@Iput:

; 1578 :         } else if (_Adjustfield == ios_base::internal) { // put internal fill

  00412	81 7c 24 48 00
	01 00 00	 cmp	 DWORD PTR _Adjustfield$[rsp], 256 ; 00000100H
  0041a	0f 85 cc 00 00
	00		 jne	 $LN13@Iput

; 1579 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  00420	33 d2		 xor	 edx, edx
  00422	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  0042a	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0042f	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  00437	48 8b f9	 mov	 rdi, rcx
  0043a	48 8b b4 24 f0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00442	b9 10 00 00 00	 mov	 ecx, 16
  00447	f3 a4		 rep movsb
  00449	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  0044e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00453	4c 8b c8	 mov	 r9, rax
  00456	4c 8d 84 24 c0
	00 00 00	 lea	 r8, QWORD PTR $T6[rsp]
  0045e	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  00466	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0046e	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00473	48 8b bc 24 f0
	01 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  0047b	48 8b f0	 mov	 rsi, rax
  0047e	b9 10 00 00 00	 mov	 ecx, 16
  00483	f3 a4		 rep movsb

; 1580 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  00485	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  0048d	48 8b f8	 mov	 rdi, rax
  00490	48 8b b4 24 f0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00498	b9 10 00 00 00	 mov	 ecx, 16
  0049d	f3 a4		 rep movsb
  0049f	48 8b 44 24 50	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  004a4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a9	44 0f b6 8c 24
	00 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  004b2	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR $T7[rsp]
  004ba	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  004c2	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004ca	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  004cf	48 8b bc 24 f0
	01 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  004d7	48 8b f0	 mov	 rsi, rax
  004da	b9 10 00 00 00	 mov	 ecx, 16
  004df	f3 a4		 rep movsb

; 1581 :             _Fillcount = 0;

  004e1	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR _Fillcount$[rsp], 0

; 1582 :         } else {

  004ea	eb 65		 jmp	 SHORT $LN12@Iput
$LN13@Iput:

; 1583 :             _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  004ec	33 d2		 xor	 edx, edx
  004ee	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  004f6	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  004fb	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T8[rsp]
  00503	48 8b f9	 mov	 rdi, rcx
  00506	48 8b b4 24 f0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0050e	b9 10 00 00 00	 mov	 ecx, 16
  00513	f3 a4		 rep movsb
  00515	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  0051a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0051f	4c 8b c8	 mov	 r9, rax
  00522	4c 8d 84 24 e0
	00 00 00	 lea	 r8, QWORD PTR $T8[rsp]
  0052a	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  00532	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0053a	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  0053f	48 8b bc 24 f0
	01 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  00547	48 8b f0	 mov	 rsi, rax
  0054a	b9 10 00 00 00	 mov	 ecx, 16
  0054f	f3 a4		 rep movsb
$LN12@Iput:

; 1584 :         }
; 1585 : 
; 1586 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  00551	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  00556	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  0055e	48 2b c8	 sub	 rcx, rax
  00561	48 8b c1	 mov	 rax, rcx
  00564	48 89 44 24 70	 mov	 QWORD PTR tv244[rsp], rax
  00569	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Prefix$[rsp]
  0056e	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00576	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0057b	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR $T9[rsp]
  00583	48 8b f9	 mov	 rdi, rcx
  00586	48 8b b4 24 f0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0058e	b9 10 00 00 00	 mov	 ecx, 16
  00593	f3 a4		 rep movsb
  00595	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv244[rsp]
  0059a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0059f	4c 8b c8	 mov	 r9, rax
  005a2	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR $T9[rsp]
  005aa	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  005b2	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005ba	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  005bf	48 8b bc 24 f0
	01 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  005c7	48 8b f0	 mov	 rsi, rax
  005ca	b9 10 00 00 00	 mov	 ecx, 16
  005cf	f3 a4		 rep movsb

; 1587 :         _Iosbase.width(0);

  005d1	33 d2		 xor	 edx, edx
  005d3	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  005db	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEAA_J_J@Z ; std::ios_base::width

; 1588 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  005e0	48 8d 84 24 00
	01 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  005e8	48 8b f8	 mov	 rdi, rax
  005eb	48 8b b4 24 f0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  005f3	b9 10 00 00 00	 mov	 ecx, 16
  005f8	f3 a4		 rep movsb
  005fa	48 8b 44 24 50	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  005ff	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00604	44 0f b6 8c 24
	00 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  0060d	4c 8d 84 24 00
	01 00 00	 lea	 r8, QWORD PTR $T10[rsp]
  00615	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0061d	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00625	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0062a	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Grouping$[rsp]
  00632	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00637	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  0063f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00644	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1589 :     }

  0064c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00654	48 33 cc	 xor	 rcx, rsp
  00657	e8 00 00 00 00	 call	 __security_check_cookie
  0065c	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  00663	5f		 pop	 rdi
  00664	5e		 pop	 rsi
  00665	c3		 ret	 0
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z
_TEXT	SEGMENT
tv89 = 0
tv90 = 1
tv91 = 2
_Basefield$ = 4
_Ptr$ = 8
this$ = 32
_Fmt$ = 40
_Spec$ = 48
_Flags$ = 56
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1508 :         char* _Fmt, const char* _Spec, ios_base::fmtflags _Flags) const { // generate sprintf format for integer

$LN13:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 18	 sub	 rsp, 24

; 1509 :         char* _Ptr = _Fmt;

  00018	48 8b 44 24 28	 mov	 rax, QWORD PTR _Fmt$[rsp]
  0001d	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1510 :         *_Ptr++    = '%';

  00022	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00027	c6 00 25	 mov	 BYTE PTR [rax], 37	; 00000025H
  0002a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0002f	48 ff c0	 inc	 rax
  00032	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1511 : 
; 1512 :         if (_Flags & ios_base::showpos) {

  00037	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  0003b	83 e0 20	 and	 eax, 32			; 00000020H
  0003e	85 c0		 test	 eax, eax
  00040	74 15		 je	 SHORT $LN2@Ifmt

; 1513 :             *_Ptr++ = '+';

  00042	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00047	c6 00 2b	 mov	 BYTE PTR [rax], 43	; 0000002bH
  0004a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0004f	48 ff c0	 inc	 rax
  00052	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN2@Ifmt:

; 1514 :         }
; 1515 : 
; 1516 :         if (_Flags & ios_base::showbase) {

  00057	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  0005b	83 e0 08	 and	 eax, 8
  0005e	85 c0		 test	 eax, eax
  00060	74 15		 je	 SHORT $LN3@Ifmt

; 1517 :             *_Ptr++ = '#';

  00062	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00067	c6 00 23	 mov	 BYTE PTR [rax], 35	; 00000023H
  0006a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0006f	48 ff c0	 inc	 rax
  00072	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN3@Ifmt:

; 1518 :         }
; 1519 : 
; 1520 :         if (_Spec[0] != 'L') {

  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	48 6b c0 00	 imul	 rax, rax, 0
  00080	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Spec$[rsp]
  00085	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00089	83 f8 4c	 cmp	 eax, 76			; 0000004cH
  0008c	74 28		 je	 SHORT $LN4@Ifmt

; 1521 :             *_Ptr++ = _Spec[0]; // qualifier

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	48 6b c0 00	 imul	 rax, rax, 0
  00097	48 8b 4c 24 08	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0009c	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Spec$[rsp]
  000a1	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  000a5	88 01		 mov	 BYTE PTR [rcx], al
  000a7	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000ac	48 ff c0	 inc	 rax
  000af	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1522 :         } else { // change L to I64

  000b4	eb 3f		 jmp	 SHORT $LN5@Ifmt
$LN4@Ifmt:

; 1523 :             *_Ptr++ = 'I';

  000b6	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000bb	c6 00 49	 mov	 BYTE PTR [rax], 73	; 00000049H
  000be	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000c3	48 ff c0	 inc	 rax
  000c6	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1524 :             *_Ptr++ = '6';

  000cb	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000d0	c6 00 36	 mov	 BYTE PTR [rax], 54	; 00000036H
  000d3	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000d8	48 ff c0	 inc	 rax
  000db	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1525 :             *_Ptr++ = '4';

  000e0	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000e5	c6 00 34	 mov	 BYTE PTR [rax], 52	; 00000034H
  000e8	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000ed	48 ff c0	 inc	 rax
  000f0	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN5@Ifmt:

; 1526 :         }
; 1527 : 
; 1528 :         ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  000f5	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  000f9	25 00 0e 00 00	 and	 eax, 3584		; 00000e00H
  000fe	89 44 24 04	 mov	 DWORD PTR _Basefield$[rsp], eax

; 1529 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00102	81 7c 24 04 00
	04 00 00	 cmp	 DWORD PTR _Basefield$[rsp], 1024 ; 00000400H
  0010a	75 07		 jne	 SHORT $LN11@Ifmt
  0010c	c6 44 24 02 6f	 mov	 BYTE PTR tv91[rsp], 111	; 0000006fH
  00111	eb 48		 jmp	 SHORT $LN12@Ifmt
$LN11@Ifmt:
  00113	81 7c 24 04 00
	08 00 00	 cmp	 DWORD PTR _Basefield$[rsp], 2048 ; 00000800H
  0011b	74 18		 je	 SHORT $LN9@Ifmt
  0011d	b8 01 00 00 00	 mov	 eax, 1
  00122	48 6b c0 01	 imul	 rax, rax, 1
  00126	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Spec$[rsp]
  0012b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0012f	88 44 24 01	 mov	 BYTE PTR tv90[rsp], al
  00133	eb 1d		 jmp	 SHORT $LN10@Ifmt
$LN9@Ifmt:
  00135	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  00139	83 e0 04	 and	 eax, 4
  0013c	85 c0		 test	 eax, eax
  0013e	74 06		 je	 SHORT $LN7@Ifmt
  00140	c6 04 24 58	 mov	 BYTE PTR tv89[rsp], 88	; 00000058H
  00144	eb 04		 jmp	 SHORT $LN8@Ifmt
$LN7@Ifmt:
  00146	c6 04 24 78	 mov	 BYTE PTR tv89[rsp], 120	; 00000078H
$LN8@Ifmt:
  0014a	0f b6 04 24	 movzx	 eax, BYTE PTR tv89[rsp]
  0014e	88 44 24 01	 mov	 BYTE PTR tv90[rsp], al
$LN10@Ifmt:
  00152	0f b6 44 24 01	 movzx	 eax, BYTE PTR tv90[rsp]
  00157	88 44 24 02	 mov	 BYTE PTR tv91[rsp], al
$LN12@Ifmt:
  0015b	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00160	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR tv91[rsp]
  00165	88 08		 mov	 BYTE PTR [rax], cl
  00167	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0016c	48 ff c0	 inc	 rax
  0016f	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1530 :                                       : _Basefield != ios_base::hex  ? _Spec[1] // 'd' or 'u'
; 1531 :                                       : _Flags & ios_base::uppercase ? 'X'
; 1532 :                                                                      : 'x';
; 1533 :         *_Ptr                         = '\0';

  00174	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00179	c6 00 00	 mov	 BYTE PTR [rax], 0

; 1534 :         return _Fmt;

  0017c	48 8b 44 24 28	 mov	 rax, QWORD PTR _Fmt$[rsp]

; 1535 :     }

  00181	48 83 c4 18	 add	 rsp, 24
  00185	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z
_TEXT	SEGMENT
tv242 = 48
_Kseparator$ = 49
_Prefix$ = 56
_Dp$ = 64
_Adjustfield$ = 68
_Pg$ = 72
_Fillcount$ = 80
_Poff$ = 88
_Off$ = 96
_Punct_fac$ = 104
tv69 = 112
_Exps$ = 120
tv188 = 128
_Ctype_fac$ = 136
_Eoff$ = 144
tv273 = 152
$T1 = 160
$T2 = 176
$T3 = 192
$T4 = 208
$T5 = 224
$T6 = 240
$T7 = 256
$T8 = 272
$T9 = 288
$T10 = 304
$T11 = 320
$T12 = 336
$T13 = 352
$T14 = 368
$T15 = 384
_Groupstring$ = 400
_Grouping$ = 432
__$ArrayPad$ = 464
this$ = 512
__$ReturnUdt$ = 520
_Dest$ = 528
_Iosbase$ = 536
_Fill$ = 544
_Buf$ = 552
_Count$ = 560
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1441 :         size_t _Count) const { // put formatted floating-point to _Dest

$LN23:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1442 :         auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

  0002f	48 83 bc 24 30
	02 00 00 00	 cmp	 QWORD PTR _Count$[rsp], 0
  00038	76 2b		 jbe	 SHORT $LN19@Fput
  0003a	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR _Buf$[rsp]
  00042	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00045	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00048	74 10		 je	 SHORT $LN18@Fput
  0004a	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR _Buf$[rsp]
  00052	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00055	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00058	75 0b		 jne	 SHORT $LN19@Fput
$LN18@Fput:
  0005a	48 c7 44 24 70
	01 00 00 00	 mov	 QWORD PTR tv69[rsp], 1
  00063	eb 09		 jmp	 SHORT $LN20@Fput
$LN19@Fput:
  00065	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv69[rsp], 0
$LN20@Fput:
  0006e	48 8b 44 24 70	 mov	 rax, QWORD PTR tv69[rsp]
  00073	48 89 44 24 38	 mov	 QWORD PTR _Prefix$[rsp], rax

; 1443 :         const char* _Exps;
; 1444 :         if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat) {

  00078	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00080	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00085	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0008a	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  0008f	74 11		 je	 SHORT $LN4@Fput

; 1445 :             _Exps = "eE";

  00091	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02MDKMJEGG@eE@
  00098	48 89 44 24 78	 mov	 QWORD PTR _Exps$[rsp], rax

; 1446 :         } else { // correct for hexadecimal floating-point

  0009d	e9 80 00 00 00	 jmp	 $LN5@Fput
$LN4@Fput:

; 1447 :             _Exps = "pP";

  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02OOPEBDOJ@pP@
  000a9	48 89 44 24 78	 mov	 QWORD PTR _Exps$[rsp], rax

; 1448 :             if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1449 :                 && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X')) {

  000ae	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000b3	48 83 c0 02	 add	 rax, 2
  000b7	48 3b 84 24 30
	02 00 00	 cmp	 rax, QWORD PTR _Count$[rsp]
  000bf	77 61		 ja	 SHORT $LN5@Fput
  000c1	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000c6	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  000ce	48 03 c8	 add	 rcx, rax
  000d1	48 8b c1	 mov	 rax, rcx
  000d4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d7	83 f8 30	 cmp	 eax, 48			; 00000030H
  000da	75 46		 jne	 SHORT $LN5@Fput
  000dc	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000e1	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  000e9	48 03 c8	 add	 rcx, rax
  000ec	48 8b c1	 mov	 rax, rcx
  000ef	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  000f3	83 f8 78	 cmp	 eax, 120		; 00000078H
  000f6	74 1c		 je	 SHORT $LN7@Fput
  000f8	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000fd	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  00105	48 03 c8	 add	 rcx, rax
  00108	48 8b c1	 mov	 rax, rcx
  0010b	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  0010f	83 f8 58	 cmp	 eax, 88			; 00000058H
  00112	75 0e		 jne	 SHORT $LN5@Fput
$LN7@Fput:

; 1450 :                 _Prefix += 2;

  00114	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  00119	48 83 c0 02	 add	 rax, 2
  0011d	48 89 44 24 38	 mov	 QWORD PTR _Prefix$[rsp], rax
$LN5@Fput:

; 1451 :             }
; 1452 :         }
; 1453 :         const size_t _Eoff = _CSTD strcspn(&_Buf[0], _Exps); // find exponent

  00122	b8 01 00 00 00	 mov	 eax, 1
  00127	48 6b c0 00	 imul	 rax, rax, 0
  0012b	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  00133	48 03 c8	 add	 rcx, rax
  00136	48 8b c1	 mov	 rax, rcx
  00139	48 8b 54 24 78	 mov	 rdx, QWORD PTR _Exps$[rsp]
  0013e	48 8b c8	 mov	 rcx, rax
  00141	e8 00 00 00 00	 call	 strcspn
  00146	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR _Eoff$[rsp], rax

; 1454 :         char _Dp[2]        = {"."};

  0014e	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_01LFCBOECM@?4@
  00155	66 89 44 24 40	 mov	 WORD PTR _Dp$[rsp], ax

; 1455 :         _Dp[0]             = _CSTD localeconv()->decimal_point[0];

  0015a	e8 00 00 00 00	 call	 localeconv
  0015f	b9 01 00 00 00	 mov	 ecx, 1
  00164	48 6b c9 00	 imul	 rcx, rcx, 0
  00168	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016b	ba 01 00 00 00	 mov	 edx, 1
  00170	48 6b d2 00	 imul	 rdx, rdx, 0
  00174	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00178	88 44 14 40	 mov	 BYTE PTR _Dp$[rsp+rdx], al

; 1456 :         const size_t _Poff = _CSTD strcspn(&_Buf[0], &_Dp[0]); // find decimal point

  0017c	b8 01 00 00 00	 mov	 eax, 1
  00181	48 6b c0 00	 imul	 rax, rax, 0
  00185	48 8d 44 04 40	 lea	 rax, QWORD PTR _Dp$[rsp+rax]
  0018a	b9 01 00 00 00	 mov	 ecx, 1
  0018f	48 6b c9 00	 imul	 rcx, rcx, 0
  00193	48 8b 94 24 28
	02 00 00	 mov	 rdx, QWORD PTR _Buf$[rsp]
  0019b	48 03 d1	 add	 rdx, rcx
  0019e	48 8b ca	 mov	 rcx, rdx
  001a1	48 8b d0	 mov	 rdx, rax
  001a4	e8 00 00 00 00	 call	 strcspn
  001a9	48 89 44 24 58	 mov	 QWORD PTR _Poff$[rsp], rax

; 1457 : 
; 1458 :         const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  001ae	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T1[rsp]
  001b6	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  001be	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  001c3	48 8b c8	 mov	 rcx, rax
  001c6	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  001cb	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _Ctype_fac$[rsp], rax
  001d3	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T1[rsp]
  001db	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 1459 :         basic_string<_Elem> _Groupstring(_Count, _Elem(0)); // reserve space

  001e0	45 33 c0	 xor	 r8d, r8d
  001e3	48 8b 94 24 30
	02 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  001eb	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  001f3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1460 :         _Ctype_fac.widen(_Buf, _Buf + _Count, &_Groupstring[0]);

  001f8	33 d2		 xor	 edx, edx
  001fa	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00202	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00207	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  0020f	48 8b 94 24 28
	02 00 00	 mov	 rdx, QWORD PTR _Buf$[rsp]
  00217	48 03 d1	 add	 rdx, rcx
  0021a	48 8b ca	 mov	 rcx, rdx
  0021d	4c 8b c8	 mov	 r9, rax
  00220	4c 8b c1	 mov	 r8, rcx
  00223	48 8b 94 24 28
	02 00 00	 mov	 rdx, QWORD PTR _Buf$[rsp]
  0022b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Ctype_fac$[rsp]
  00233	e8 00 00 00 00	 call	 ?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z ; std::ctype<char>::widen

; 1461 : 
; 1462 :         const auto& _Punct_fac  = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00238	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR $T2[rsp]
  00240	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00248	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  0024d	48 8b c8	 mov	 rcx, rax
  00250	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00255	48 89 44 24 68	 mov	 QWORD PTR _Punct_fac$[rsp], rax
  0025a	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T2[rsp]
  00262	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 1463 :         const string _Grouping  = _Punct_fac.grouping();

  00267	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR _Grouping$[rsp]
  0026f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Punct_fac$[rsp]
  00274	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping

; 1464 :         const _Elem _Kseparator = _Punct_fac.thousands_sep();

  00279	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Punct_fac$[rsp]
  0027e	e8 00 00 00 00	 call	 ?thousands_sep@?$numpunct@D@std@@QEBADXZ ; std::numpunct<char>::thousands_sep
  00283	88 44 24 31	 mov	 BYTE PTR _Kseparator$[rsp], al

; 1465 : 
; 1466 :         if (_Poff != _Count) {

  00287	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR _Count$[rsp]
  0028f	48 39 44 24 58	 cmp	 QWORD PTR _Poff$[rsp], rax
  00294	74 27		 je	 SHORT $LN8@Fput

; 1467 :             _Groupstring[_Poff] = _Punct_fac.decimal_point();

  00296	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Punct_fac$[rsp]
  0029b	e8 00 00 00 00	 call	 ?decimal_point@?$numpunct@D@std@@QEBADXZ ; std::numpunct<char>::decimal_point
  002a0	88 44 24 30	 mov	 BYTE PTR tv242[rsp], al
  002a4	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Poff$[rsp]
  002a9	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  002b1	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  002b6	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR tv242[rsp]
  002bb	88 08		 mov	 BYTE PTR [rax], cl
$LN8@Fput:

; 1468 :         }
; 1469 : 
; 1470 :         size_t _Off     = _Poff == _Count ? _Eoff : _Poff;

  002bd	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR _Count$[rsp]
  002c5	48 39 44 24 58	 cmp	 QWORD PTR _Poff$[rsp], rax
  002ca	75 12		 jne	 SHORT $LN21@Fput
  002cc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _Eoff$[rsp]
  002d4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv188[rsp], rax
  002dc	eb 0d		 jmp	 SHORT $LN22@Fput
$LN21@Fput:
  002de	48 8b 44 24 58	 mov	 rax, QWORD PTR _Poff$[rsp]
  002e3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv188[rsp], rax
$LN22@Fput:
  002eb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv188[rsp]
  002f3	48 89 44 24 60	 mov	 QWORD PTR _Off$[rsp], rax

; 1471 :         const char* _Pg = &_Grouping[0];

  002f8	33 d2		 xor	 edx, edx
  002fa	48 8d 8c 24 b0
	01 00 00	 lea	 rcx, QWORD PTR _Grouping$[rsp]
  00302	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00307	48 89 44 24 48	 mov	 QWORD PTR _Pg$[rsp], rax
$LN2@Fput:

; 1472 :         while (*_Pg != CHAR_MAX && '\0' < *_Pg && static_cast<size_t>(*_Pg) < _Off - _Prefix) {

  0030c	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pg$[rsp]
  00311	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00314	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00317	0f 84 89 00 00
	00		 je	 $LN3@Fput
  0031d	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pg$[rsp]
  00322	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00325	85 c0		 test	 eax, eax
  00327	7e 7d		 jle	 SHORT $LN3@Fput
  00329	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pg$[rsp]
  0032e	48 0f be 00	 movsx	 rax, BYTE PTR [rax]
  00332	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  00337	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Off$[rsp]
  0033c	48 2b d1	 sub	 rdx, rcx
  0033f	48 8b ca	 mov	 rcx, rdx
  00342	48 3b c1	 cmp	 rax, rcx
  00345	73 5f		 jae	 SHORT $LN3@Fput

; 1473 :             // add thousands separator
; 1474 :             _Groupstring.insert(_Off -= *_Pg, 1, _Kseparator);

  00347	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pg$[rsp]
  0034c	48 0f be 00	 movsx	 rax, BYTE PTR [rax]
  00350	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Off$[rsp]
  00355	48 2b c8	 sub	 rcx, rax
  00358	48 8b c1	 mov	 rax, rcx
  0035b	48 89 44 24 60	 mov	 QWORD PTR _Off$[rsp], rax
  00360	44 0f b6 4c 24
	31		 movzx	 r9d, BYTE PTR _Kseparator$[rsp]
  00366	41 b8 01 00 00
	00		 mov	 r8d, 1
  0036c	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Off$[rsp]
  00371	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00379	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1475 :             if ('\0' < _Pg[1]) {

  0037e	b8 01 00 00 00	 mov	 eax, 1
  00383	48 6b c0 01	 imul	 rax, rax, 1
  00387	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Pg$[rsp]
  0038c	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00390	85 c0		 test	 eax, eax
  00392	7e 0d		 jle	 SHORT $LN9@Fput

; 1476 :                 ++_Pg; // not last group, advance

  00394	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pg$[rsp]
  00399	48 ff c0	 inc	 rax
  0039c	48 89 44 24 48	 mov	 QWORD PTR _Pg$[rsp], rax
$LN9@Fput:

; 1477 :             }
; 1478 :         }

  003a1	e9 66 ff ff ff	 jmp	 $LN2@Fput
$LN3@Fput:

; 1479 : 
; 1480 :         _Count = _Groupstring.size();

  003a6	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  003ae	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  003b3	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR _Count$[rsp], rax

; 1481 : 
; 1482 :         size_t _Fillcount;
; 1483 :         if (_Iosbase.width() <= 0 || static_cast<size_t>(_Iosbase.width()) <= _Count) {

  003bb	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  003c3	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  003c8	48 85 c0	 test	 rax, rax
  003cb	7e 17		 jle	 SHORT $LN12@Fput
  003cd	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  003d5	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  003da	48 3b 84 24 30
	02 00 00	 cmp	 rax, QWORD PTR _Count$[rsp]
  003e2	77 0b		 ja	 SHORT $LN10@Fput
$LN12@Fput:

; 1484 :             _Fillcount = 0;

  003e4	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR _Fillcount$[rsp], 0

; 1485 :         } else {

  003ed	eb 1a		 jmp	 SHORT $LN11@Fput
$LN10@Fput:

; 1486 :             _Fillcount = static_cast<size_t>(_Iosbase.width()) - _Count;

  003ef	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  003f7	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  003fc	48 2b 84 24 30
	02 00 00	 sub	 rax, QWORD PTR _Count$[rsp]
  00404	48 89 44 24 50	 mov	 QWORD PTR _Fillcount$[rsp], rax
$LN11@Fput:

; 1487 :         }
; 1488 : 
; 1489 :         ios_base::fmtflags _Adjustfield = _Iosbase.flags() & ios_base::adjustfield;

  00409	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00411	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00416	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0041b	89 44 24 44	 mov	 DWORD PTR _Adjustfield$[rsp], eax

; 1490 :         if (_Adjustfield != ios_base::left && _Adjustfield != ios_base::internal) { // put leading fill

  0041f	83 7c 24 44 40	 cmp	 DWORD PTR _Adjustfield$[rsp], 64 ; 00000040H
  00424	0f 84 dd 00 00
	00		 je	 $LN13@Fput
  0042a	81 7c 24 44 00
	01 00 00	 cmp	 DWORD PTR _Adjustfield$[rsp], 256 ; 00000100H
  00432	0f 84 cf 00 00
	00		 je	 $LN13@Fput

; 1491 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  00438	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T3[rsp]
  00440	48 8b f8	 mov	 rdi, rax
  00443	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0044b	b9 10 00 00 00	 mov	 ecx, 16
  00450	f3 a4		 rep movsb
  00452	48 8b 44 24 50	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  00457	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0045c	44 0f b6 8c 24
	20 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  00465	4c 8d 84 24 c0
	00 00 00	 lea	 r8, QWORD PTR $T3[rsp]
  0046d	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T10[rsp]
  00475	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0047d	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00482	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  0048a	48 8b f0	 mov	 rsi, rax
  0048d	b9 10 00 00 00	 mov	 ecx, 16
  00492	f3 a4		 rep movsb

; 1492 :             _Fillcount = 0;

  00494	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR _Fillcount$[rsp], 0

; 1493 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  0049d	33 d2		 xor	 edx, edx
  0049f	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  004a7	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  004ac	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T4[rsp]
  004b4	48 8b f9	 mov	 rdi, rcx
  004b7	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  004bf	b9 10 00 00 00	 mov	 ecx, 16
  004c4	f3 a4		 rep movsb
  004c6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  004cb	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  004d0	4c 8b c8	 mov	 r9, rax
  004d3	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR $T4[rsp]
  004db	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  004e3	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004eb	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  004f0	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  004f8	48 8b f0	 mov	 rsi, rax
  004fb	b9 10 00 00 00	 mov	 ecx, 16
  00500	f3 a4		 rep movsb
  00502	e9 3f 01 00 00	 jmp	 $LN14@Fput
$LN13@Fput:

; 1494 :         } else if (_Adjustfield == ios_base::internal) { // put internal fill

  00507	81 7c 24 44 00
	01 00 00	 cmp	 DWORD PTR _Adjustfield$[rsp], 256 ; 00000100H
  0050f	0f 85 cc 00 00
	00		 jne	 $LN15@Fput

; 1495 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  00515	33 d2		 xor	 edx, edx
  00517	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  0051f	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00524	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  0052c	48 8b f9	 mov	 rdi, rcx
  0052f	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00537	b9 10 00 00 00	 mov	 ecx, 16
  0053c	f3 a4		 rep movsb
  0053e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  00543	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00548	4c 8b c8	 mov	 r9, rax
  0054b	4c 8d 84 24 e0
	00 00 00	 lea	 r8, QWORD PTR $T5[rsp]
  00553	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR $T12[rsp]
  0055b	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00563	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00568	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  00570	48 8b f0	 mov	 rsi, rax
  00573	b9 10 00 00 00	 mov	 ecx, 16
  00578	f3 a4		 rep movsb

; 1496 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  0057a	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  00582	48 8b f8	 mov	 rdi, rax
  00585	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0058d	b9 10 00 00 00	 mov	 ecx, 16
  00592	f3 a4		 rep movsb
  00594	48 8b 44 24 50	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  00599	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0059e	44 0f b6 8c 24
	20 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  005a7	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR $T6[rsp]
  005af	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  005b7	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005bf	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  005c4	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  005cc	48 8b f0	 mov	 rsi, rax
  005cf	b9 10 00 00 00	 mov	 ecx, 16
  005d4	f3 a4		 rep movsb

; 1497 :             _Fillcount = 0;

  005d6	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR _Fillcount$[rsp], 0

; 1498 :         } else {

  005df	eb 65		 jmp	 SHORT $LN14@Fput
$LN15@Fput:

; 1499 :             _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  005e1	33 d2		 xor	 edx, edx
  005e3	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  005eb	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  005f0	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR $T7[rsp]
  005f8	48 8b f9	 mov	 rdi, rcx
  005fb	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00603	b9 10 00 00 00	 mov	 ecx, 16
  00608	f3 a4		 rep movsb
  0060a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  0060f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00614	4c 8b c8	 mov	 r9, rax
  00617	4c 8d 84 24 00
	01 00 00	 lea	 r8, QWORD PTR $T7[rsp]
  0061f	48 8d 94 24 70
	01 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  00627	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0062f	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00634	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  0063c	48 8b f0	 mov	 rsi, rax
  0063f	b9 10 00 00 00	 mov	 ecx, 16
  00644	f3 a4		 rep movsb
$LN14@Fput:

; 1500 :         }
; 1501 : 
; 1502 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  00646	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  0064b	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  00653	48 2b c8	 sub	 rcx, rax
  00656	48 8b c1	 mov	 rax, rcx
  00659	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv273[rsp], rax
  00661	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Prefix$[rsp]
  00666	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  0066e	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00673	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR $T8[rsp]
  0067b	48 8b f9	 mov	 rdi, rcx
  0067e	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00686	b9 10 00 00 00	 mov	 ecx, 16
  0068b	f3 a4		 rep movsb
  0068d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv273[rsp]
  00695	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0069a	4c 8b c8	 mov	 r9, rax
  0069d	4c 8d 84 24 10
	01 00 00	 lea	 r8, QWORD PTR $T8[rsp]
  006a5	48 8d 94 24 80
	01 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  006ad	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  006b5	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  006ba	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  006c2	48 8b f0	 mov	 rsi, rax
  006c5	b9 10 00 00 00	 mov	 ecx, 16
  006ca	f3 a4		 rep movsb

; 1503 :         _Iosbase.width(0);

  006cc	33 d2		 xor	 edx, edx
  006ce	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  006d6	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEAA_J_J@Z ; std::ios_base::width

; 1504 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  006db	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  006e3	48 8b f8	 mov	 rdi, rax
  006e6	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  006ee	b9 10 00 00 00	 mov	 ecx, 16
  006f3	f3 a4		 rep movsb
  006f5	48 8b 44 24 50	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  006fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006ff	44 0f b6 8c 24
	20 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  00708	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR $T9[rsp]
  00710	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00718	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00720	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00725	48 8d 8c 24 b0
	01 00 00	 lea	 rcx, QWORD PTR _Grouping$[rsp]
  0072d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00732	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  0073a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0073f	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1505 :     }

  00747	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0074f	48 33 cc	 xor	 rcx, rsp
  00752	e8 00 00 00 00	 call	 __security_check_cookie
  00757	48 81 c4 e8 01
	00 00		 add	 rsp, 488		; 000001e8H
  0075e	5f		 pop	 rdi
  0075f	5e		 pop	 rsi
  00760	c3		 ret	 0
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z
_TEXT	SEGMENT
_Ch$ = 0
_Ffl$ = 4
_Ptr$ = 8
this$ = 32
_Fmt$ = 40
_Spec$ = 48
_Flags$ = 56
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1393 :         char* _Fmt, char _Spec, ios_base::fmtflags _Flags) const { // generate sprintf format for floating-point

$LN20:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 18	 sub	 rsp, 24

; 1394 :         char* _Ptr = _Fmt;

  00018	48 8b 44 24 28	 mov	 rax, QWORD PTR _Fmt$[rsp]
  0001d	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1395 :         *_Ptr++    = '%';

  00022	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00027	c6 00 25	 mov	 BYTE PTR [rax], 37	; 00000025H
  0002a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0002f	48 ff c0	 inc	 rax
  00032	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1396 : 
; 1397 :         if (_Flags & ios_base::showpos) {

  00037	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  0003b	83 e0 20	 and	 eax, 32			; 00000020H
  0003e	85 c0		 test	 eax, eax
  00040	74 15		 je	 SHORT $LN2@Ffmt

; 1398 :             *_Ptr++ = '+';

  00042	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00047	c6 00 2b	 mov	 BYTE PTR [rax], 43	; 0000002bH
  0004a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0004f	48 ff c0	 inc	 rax
  00052	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN2@Ffmt:

; 1399 :         }
; 1400 : 
; 1401 :         if (_Flags & ios_base::showpoint) {

  00057	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  0005b	83 e0 10	 and	 eax, 16
  0005e	85 c0		 test	 eax, eax
  00060	74 15		 je	 SHORT $LN3@Ffmt

; 1402 :             *_Ptr++ = '#';

  00062	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00067	c6 00 23	 mov	 BYTE PTR [rax], 35	; 00000023H
  0006a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0006f	48 ff c0	 inc	 rax
  00072	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN3@Ffmt:

; 1403 :         }
; 1404 : 
; 1405 :         *_Ptr++ = '.';

  00077	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0007c	c6 00 2e	 mov	 BYTE PTR [rax], 46	; 0000002eH
  0007f	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00084	48 ff c0	 inc	 rax
  00087	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1406 :         *_Ptr++ = '*'; // for precision argument

  0008c	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00091	c6 00 2a	 mov	 BYTE PTR [rax], 42	; 0000002aH
  00094	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00099	48 ff c0	 inc	 rax
  0009c	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1407 :         if (_Spec != '\0') {

  000a1	0f be 44 24 30	 movsx	 eax, BYTE PTR _Spec$[rsp]
  000a6	85 c0		 test	 eax, eax
  000a8	74 19		 je	 SHORT $LN4@Ffmt

; 1408 :             *_Ptr++ = _Spec; // 'L' qualifier for long double only

  000aa	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000af	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR _Spec$[rsp]
  000b4	88 08		 mov	 BYTE PTR [rax], cl
  000b6	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000bb	48 ff c0	 inc	 rax
  000be	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN4@Ffmt:

; 1409 :         }
; 1410 : 
; 1411 :         char _Ch; // specifier
; 1412 :         ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  000c3	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  000c7	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  000cc	89 44 24 04	 mov	 DWORD PTR _Ffl$[rsp], eax

; 1413 :         if (_Flags & ios_base::uppercase) {

  000d0	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  000d4	83 e0 04	 and	 eax, 4
  000d7	85 c0		 test	 eax, eax
  000d9	74 36		 je	 SHORT $LN5@Ffmt

; 1414 :             if (_Ffl == ios_base::fixed) {

  000db	81 7c 24 04 00
	20 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 8192 ; 00002000H
  000e3	75 06		 jne	 SHORT $LN7@Ffmt

; 1415 :                 _Ch = 'f';

  000e5	c6 04 24 66	 mov	 BYTE PTR _Ch$[rsp], 102	; 00000066H
  000e9	eb 24		 jmp	 SHORT $LN8@Ffmt
$LN7@Ffmt:

; 1416 :             } else if (_Ffl == ios_base::hexfloat) {

  000eb	81 7c 24 04 00
	30 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 12288 ; 00003000H
  000f3	75 06		 jne	 SHORT $LN9@Ffmt

; 1417 :                 _Ch = 'A'; // added with TR1

  000f5	c6 04 24 41	 mov	 BYTE PTR _Ch$[rsp], 65	; 00000041H
  000f9	eb 14		 jmp	 SHORT $LN10@Ffmt
$LN9@Ffmt:

; 1418 :             } else if (_Ffl == ios_base::scientific) {

  000fb	81 7c 24 04 00
	10 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 4096 ; 00001000H
  00103	75 06		 jne	 SHORT $LN11@Ffmt

; 1419 :                 _Ch = 'E';

  00105	c6 04 24 45	 mov	 BYTE PTR _Ch$[rsp], 69	; 00000045H

; 1420 :             } else {

  00109	eb 04		 jmp	 SHORT $LN12@Ffmt
$LN11@Ffmt:

; 1421 :                 _Ch = 'G';

  0010b	c6 04 24 47	 mov	 BYTE PTR _Ch$[rsp], 71	; 00000047H
$LN12@Ffmt:
$LN10@Ffmt:
$LN8@Ffmt:

; 1422 :             }
; 1423 :         } else {

  0010f	eb 34		 jmp	 SHORT $LN6@Ffmt
$LN5@Ffmt:

; 1424 :             if (_Ffl == ios_base::fixed) {

  00111	81 7c 24 04 00
	20 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 8192 ; 00002000H
  00119	75 06		 jne	 SHORT $LN13@Ffmt

; 1425 :                 _Ch = 'f';

  0011b	c6 04 24 66	 mov	 BYTE PTR _Ch$[rsp], 102	; 00000066H
  0011f	eb 24		 jmp	 SHORT $LN14@Ffmt
$LN13@Ffmt:

; 1426 :             } else if (_Ffl == ios_base::hexfloat) {

  00121	81 7c 24 04 00
	30 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 12288 ; 00003000H
  00129	75 06		 jne	 SHORT $LN15@Ffmt

; 1427 :                 _Ch = 'a'; // added with TR1

  0012b	c6 04 24 61	 mov	 BYTE PTR _Ch$[rsp], 97	; 00000061H
  0012f	eb 14		 jmp	 SHORT $LN16@Ffmt
$LN15@Ffmt:

; 1428 :             } else if (_Ffl == ios_base::scientific) {

  00131	81 7c 24 04 00
	10 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 4096 ; 00001000H
  00139	75 06		 jne	 SHORT $LN17@Ffmt

; 1429 :                 _Ch = 'e';

  0013b	c6 04 24 65	 mov	 BYTE PTR _Ch$[rsp], 101	; 00000065H

; 1430 :             } else {

  0013f	eb 04		 jmp	 SHORT $LN18@Ffmt
$LN17@Ffmt:

; 1431 :                 _Ch = 'g';

  00141	c6 04 24 67	 mov	 BYTE PTR _Ch$[rsp], 103	; 00000067H
$LN18@Ffmt:
$LN16@Ffmt:
$LN14@Ffmt:
$LN6@Ffmt:

; 1432 :             }
; 1433 :         }
; 1434 :         *_Ptr++ = _Ch;

  00145	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0014a	0f b6 0c 24	 movzx	 ecx, BYTE PTR _Ch$[rsp]
  0014e	88 08		 mov	 BYTE PTR [rax], cl
  00150	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00155	48 ff c0	 inc	 rax
  00158	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1435 : 
; 1436 :         *_Ptr = '\0';

  0015d	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00162	c6 00 00	 mov	 BYTE PTR [rax], 0

; 1437 :         return _Fmt;

  00165	48 8b 44 24 28	 mov	 rax, QWORD PTR _Fmt$[rsp]

; 1438 :     }

  0016a	48 83 c4 18	 add	 rsp, 24
  0016e	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z
_TEXT	SEGMENT
$T1 = 64
_Buf$ = 80
__$ArrayPad$ = 144
this$ = 192
__$ReturnUdt$ = 200
_Dest$ = 208
_Iosbase$ = 216
_Fill$ = 224
_Val$ = 232
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1384 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, const void* _Val) const { // put formatted void pointer to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1385 :         char _Buf[2 * _MAX_INT_DIG];
; 1386 : 
; 1387 :         return _Iput(

  0002f	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR _Val$[rsp]
  00037	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02BBAHNLBA@?$CFp@
  0003e	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00043	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00048	e8 00 00 00 00	 call	 sprintf_s
  0004d	48 98		 cdqe
  0004f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  00054	48 8b f9	 mov	 rdi, rcx
  00057	48 8b b4 24 d0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0005f	b9 10 00 00 00	 mov	 ecx, 16
  00064	f3 a4		 rep movsb
  00066	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0006b	48 8d 44 24 50	 lea	 rax, QWORD PTR _Buf$[rsp]
  00070	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00075	0f b6 84 24 e0
	00 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  0007d	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00081	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  00089	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T1[rsp]
  0008e	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00096	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009e	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
  000a3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1388 :             _Dest, _Iosbase, _Fill, _Buf, static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), "%p", _Val)));
; 1389 :     }

  000ab	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000b3	48 33 cc	 xor	 rcx, rsp
  000b6	e8 00 00 00 00	 call	 __security_check_cookie
  000bb	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000c2	5f		 pop	 rdi
  000c3	5e		 pop	 rsi
  000c4	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
_TEXT	SEGMENT
tv71 = 64
tv73 = 65
_Is_hex$ = 66
_Is_fixed$ = 67
_Float_flags$ = 68
_Desired_precision$ = 72
_Ptwo$1 = 76
_Bufsize$ = 80
tv78 = 88
_Precision$ = 96
tv136 = 104
tv144 = 112
_Ngen$ = 120
$T2 = 128
_Buf$ = 144
_Fmt$ = 176
__$ArrayPad$ = 184
this$ = 224
__$ReturnUdt$ = 232
_Dest$ = 240
_Iosbase$ = 248
_Fill$ = 256
_Val$ = 264
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1359 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long double _Val) const { // put formatted long double to _Dest

$LN10:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1360 :         string _Buf;

  0002f	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00037	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1361 :         char _Fmt[8];
; 1362 :         const auto _Float_flags     = _Iosbase.flags() & ios_base::floatfield;

  0003c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00044	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00049	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0004e	89 44 24 44	 mov	 DWORD PTR _Float_flags$[rsp], eax

; 1363 :         const bool _Is_fixed        = _Float_flags == ios_base::fixed;

  00052	81 7c 24 44 00
	20 00 00	 cmp	 DWORD PTR _Float_flags$[rsp], 8192 ; 00002000H
  0005a	75 07		 jne	 SHORT $LN4@do_put
  0005c	c6 44 24 40 01	 mov	 BYTE PTR tv71[rsp], 1
  00061	eb 05		 jmp	 SHORT $LN5@do_put
$LN4@do_put:
  00063	c6 44 24 40 00	 mov	 BYTE PTR tv71[rsp], 0
$LN5@do_put:
  00068	0f b6 44 24 40	 movzx	 eax, BYTE PTR tv71[rsp]
  0006d	88 44 24 43	 mov	 BYTE PTR _Is_fixed$[rsp], al

; 1364 :         const bool _Is_hex          = _Float_flags == (ios_base::fixed | ios_base::scientific);

  00071	81 7c 24 44 00
	30 00 00	 cmp	 DWORD PTR _Float_flags$[rsp], 12288 ; 00003000H
  00079	75 07		 jne	 SHORT $LN6@do_put
  0007b	c6 44 24 41 01	 mov	 BYTE PTR tv73[rsp], 1
  00080	eb 05		 jmp	 SHORT $LN7@do_put
$LN6@do_put:
  00082	c6 44 24 41 00	 mov	 BYTE PTR tv73[rsp], 0
$LN7@do_put:
  00087	0f b6 44 24 41	 movzx	 eax, BYTE PTR tv73[rsp]
  0008c	88 44 24 42	 mov	 BYTE PTR _Is_hex$[rsp], al

; 1365 :         const streamsize _Precision = _Is_hex ? -1 : _Iosbase.precision(); // precision setting

  00090	0f b6 44 24 42	 movzx	 eax, BYTE PTR _Is_hex$[rsp]
  00095	85 c0		 test	 eax, eax
  00097	74 0b		 je	 SHORT $LN8@do_put
  00099	48 c7 44 24 58
	ff ff ff ff	 mov	 QWORD PTR tv78[rsp], -1
  000a2	eb 12		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  000a4	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  000ac	e8 00 00 00 00	 call	 ?precision@ios_base@std@@QEBA_JXZ ; std::ios_base::precision
  000b1	48 89 44 24 58	 mov	 QWORD PTR tv78[rsp], rax
$LN9@do_put:
  000b6	48 8b 44 24 58	 mov	 rax, QWORD PTR tv78[rsp]
  000bb	48 89 44 24 60	 mov	 QWORD PTR _Precision$[rsp], rax

; 1366 :         const int _Desired_precision =

  000c0	8b 54 24 44	 mov	 edx, DWORD PTR _Float_flags$[rsp]
  000c4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Precision$[rsp]
  000c9	e8 00 00 00 00	 call	 ??$_Float_put_desired_precision@O@std@@YAH_JH@Z ; std::_Float_put_desired_precision<long double>
  000ce	89 44 24 48	 mov	 DWORD PTR _Desired_precision$[rsp], eax

; 1367 :             _Float_put_desired_precision<long double>(_Precision, _Float_flags); // desired precision
; 1368 :         size_t _Bufsize = static_cast<size_t>(_Desired_precision);

  000d2	48 63 44 24 48	 movsxd	 rax, DWORD PTR _Desired_precision$[rsp]
  000d7	48 89 44 24 50	 mov	 QWORD PTR _Bufsize$[rsp], rax

; 1369 :         if (_Is_fixed && 1e10 < _CSTD fabsl(_Val)) { // f or F format

  000dc	0f b6 44 24 43	 movzx	 eax, BYTE PTR _Is_fixed$[rsp]
  000e1	85 c0		 test	 eax, eax
  000e3	74 54		 je	 SHORT $LN2@do_put
  000e5	f2 0f 10 84 24
	08 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  000ee	e8 00 00 00 00	 call	 fabsl
  000f3	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  000fb	76 3c		 jbe	 SHORT $LN2@do_put

; 1370 :             int _Ptwo;
; 1371 :             (void) _CSTD frexpl(_Val, &_Ptwo);

  000fd	48 8d 54 24 4c	 lea	 rdx, QWORD PTR _Ptwo$1[rsp]
  00102	f2 0f 10 84 24
	08 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  0010b	e8 00 00 00 00	 call	 frexpl

; 1372 :             _Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  00110	8b 4c 24 4c	 mov	 ecx, DWORD PTR _Ptwo$1[rsp]
  00114	e8 00 00 00 00	 call	 abs
  00119	69 c0 97 75 00
	00		 imul	 eax, eax, 30103		; 00007597H
  0011f	99		 cdq
  00120	b9 a0 86 01 00	 mov	 ecx, 100000		; 000186a0H
  00125	f7 f9		 idiv	 ecx
  00127	48 98		 cdqe
  00129	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Bufsize$[rsp]
  0012e	48 03 c8	 add	 rcx, rax
  00131	48 8b c1	 mov	 rax, rcx
  00134	48 89 44 24 50	 mov	 QWORD PTR _Bufsize$[rsp], rax
$LN2@do_put:

; 1373 :         }
; 1374 : 
; 1375 :         _Buf.resize(_Bufsize + 50); // add fudge factor

  00139	48 8b 44 24 50	 mov	 rax, QWORD PTR _Bufsize$[rsp]
  0013e	48 83 c0 32	 add	 rax, 50			; 00000032H
  00142	45 33 c0	 xor	 r8d, r8d
  00145	48 8b d0	 mov	 rdx, rax
  00148	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00150	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1376 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  00155	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0015d	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00162	44 8b c8	 mov	 r9d, eax
  00165	41 b0 4c	 mov	 r8b, 76			; 0000004cH
  00168	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  00170	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00178	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  0017d	48 89 44 24 68	 mov	 QWORD PTR tv136[rsp], rax
  00182	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0018a	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0018f	48 89 44 24 70	 mov	 QWORD PTR tv144[rsp], rax
  00194	33 d2		 xor	 edx, edx
  00196	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0019e	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001a3	f2 0f 10 84 24
	08 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  001ac	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  001b2	44 8b 4c 24 60	 mov	 r9d, DWORD PTR _Precision$[rsp]
  001b7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv136[rsp]
  001bc	4c 8b c1	 mov	 r8, rcx
  001bf	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv144[rsp]
  001c4	48 8b d1	 mov	 rdx, rcx
  001c7	48 8b c8	 mov	 rcx, rax
  001ca	e8 00 00 00 00	 call	 sprintf_s
  001cf	48 98		 cdqe
  001d1	48 89 44 24 78	 mov	 QWORD PTR _Ngen$[rsp], rax

; 1377 :             &_Buf[0], _Buf.size(), _Ffmt(_Fmt, 'L', _Iosbase.flags()), static_cast<int>(_Precision), _Val));
; 1378 : 
; 1379 :         return _Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen);

  001d6	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  001de	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  001e3	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T2[rsp]
  001eb	48 8b f9	 mov	 rdi, rcx
  001ee	48 8b b4 24 f0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  001f6	b9 10 00 00 00	 mov	 ecx, 16
  001fb	f3 a4		 rep movsb
  001fd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Ngen$[rsp]
  00202	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00207	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0020c	0f b6 84 24 00
	01 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  00214	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00218	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  00220	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR $T2[rsp]
  00228	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00230	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00238	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
  0023d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00245	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0024a	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1380 :     }

  00252	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0025a	48 33 cc	 xor	 rcx, rsp
  0025d	e8 00 00 00 00	 call	 __security_check_cookie
  00262	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00269	5f		 pop	 rdi
  0026a	5e		 pop	 rsi
  0026b	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
_TEXT	SEGMENT
tv71 = 64
tv73 = 65
_Is_hex$ = 66
_Is_fixed$ = 67
_Float_flags$ = 68
_Desired_precision$ = 72
_Ptwo$1 = 76
_Bufsize$ = 80
tv78 = 88
_Precision$ = 96
tv136 = 104
tv144 = 112
_Ngen$ = 120
$T2 = 128
_Buf$ = 144
_Fmt$ = 176
__$ArrayPad$ = 184
this$ = 224
__$ReturnUdt$ = 232
_Dest$ = 240
_Iosbase$ = 248
_Fill$ = 256
_Val$ = 264
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1335 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, double _Val) const { // put formatted double to _Dest

$LN10:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1336 :         string _Buf;

  0002f	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00037	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1337 :         char _Fmt[8];
; 1338 :         const auto _Float_flags     = _Iosbase.flags() & ios_base::floatfield;

  0003c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00044	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00049	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0004e	89 44 24 44	 mov	 DWORD PTR _Float_flags$[rsp], eax

; 1339 :         const bool _Is_fixed        = _Float_flags == ios_base::fixed;

  00052	81 7c 24 44 00
	20 00 00	 cmp	 DWORD PTR _Float_flags$[rsp], 8192 ; 00002000H
  0005a	75 07		 jne	 SHORT $LN4@do_put
  0005c	c6 44 24 40 01	 mov	 BYTE PTR tv71[rsp], 1
  00061	eb 05		 jmp	 SHORT $LN5@do_put
$LN4@do_put:
  00063	c6 44 24 40 00	 mov	 BYTE PTR tv71[rsp], 0
$LN5@do_put:
  00068	0f b6 44 24 40	 movzx	 eax, BYTE PTR tv71[rsp]
  0006d	88 44 24 43	 mov	 BYTE PTR _Is_fixed$[rsp], al

; 1340 :         const bool _Is_hex          = _Float_flags == (ios_base::fixed | ios_base::scientific);

  00071	81 7c 24 44 00
	30 00 00	 cmp	 DWORD PTR _Float_flags$[rsp], 12288 ; 00003000H
  00079	75 07		 jne	 SHORT $LN6@do_put
  0007b	c6 44 24 41 01	 mov	 BYTE PTR tv73[rsp], 1
  00080	eb 05		 jmp	 SHORT $LN7@do_put
$LN6@do_put:
  00082	c6 44 24 41 00	 mov	 BYTE PTR tv73[rsp], 0
$LN7@do_put:
  00087	0f b6 44 24 41	 movzx	 eax, BYTE PTR tv73[rsp]
  0008c	88 44 24 42	 mov	 BYTE PTR _Is_hex$[rsp], al

; 1341 :         const streamsize _Precision = _Is_hex ? -1 : _Iosbase.precision(); // precision setting

  00090	0f b6 44 24 42	 movzx	 eax, BYTE PTR _Is_hex$[rsp]
  00095	85 c0		 test	 eax, eax
  00097	74 0b		 je	 SHORT $LN8@do_put
  00099	48 c7 44 24 58
	ff ff ff ff	 mov	 QWORD PTR tv78[rsp], -1
  000a2	eb 12		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  000a4	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  000ac	e8 00 00 00 00	 call	 ?precision@ios_base@std@@QEBA_JXZ ; std::ios_base::precision
  000b1	48 89 44 24 58	 mov	 QWORD PTR tv78[rsp], rax
$LN9@do_put:
  000b6	48 8b 44 24 58	 mov	 rax, QWORD PTR tv78[rsp]
  000bb	48 89 44 24 60	 mov	 QWORD PTR _Precision$[rsp], rax

; 1342 :         const int _Desired_precision =

  000c0	8b 54 24 44	 mov	 edx, DWORD PTR _Float_flags$[rsp]
  000c4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Precision$[rsp]
  000c9	e8 00 00 00 00	 call	 ??$_Float_put_desired_precision@N@std@@YAH_JH@Z ; std::_Float_put_desired_precision<double>
  000ce	89 44 24 48	 mov	 DWORD PTR _Desired_precision$[rsp], eax

; 1343 :             _Float_put_desired_precision<double>(_Precision, _Float_flags); // desired precision
; 1344 :         size_t _Bufsize = static_cast<size_t>(_Desired_precision);

  000d2	48 63 44 24 48	 movsxd	 rax, DWORD PTR _Desired_precision$[rsp]
  000d7	48 89 44 24 50	 mov	 QWORD PTR _Bufsize$[rsp], rax

; 1345 :         if (_Is_fixed && 1e10 < _CSTD fabs(_Val)) { // f or F format

  000dc	0f b6 44 24 43	 movzx	 eax, BYTE PTR _Is_fixed$[rsp]
  000e1	85 c0		 test	 eax, eax
  000e3	74 54		 je	 SHORT $LN2@do_put
  000e5	f2 0f 10 84 24
	08 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  000ee	e8 00 00 00 00	 call	 fabs
  000f3	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  000fb	76 3c		 jbe	 SHORT $LN2@do_put

; 1346 :             int _Ptwo;
; 1347 :             (void) _CSTD frexp(_Val, &_Ptwo);

  000fd	48 8d 54 24 4c	 lea	 rdx, QWORD PTR _Ptwo$1[rsp]
  00102	f2 0f 10 84 24
	08 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  0010b	e8 00 00 00 00	 call	 frexp

; 1348 :             _Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  00110	8b 4c 24 4c	 mov	 ecx, DWORD PTR _Ptwo$1[rsp]
  00114	e8 00 00 00 00	 call	 abs
  00119	69 c0 97 75 00
	00		 imul	 eax, eax, 30103		; 00007597H
  0011f	99		 cdq
  00120	b9 a0 86 01 00	 mov	 ecx, 100000		; 000186a0H
  00125	f7 f9		 idiv	 ecx
  00127	48 98		 cdqe
  00129	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Bufsize$[rsp]
  0012e	48 03 c8	 add	 rcx, rax
  00131	48 8b c1	 mov	 rax, rcx
  00134	48 89 44 24 50	 mov	 QWORD PTR _Bufsize$[rsp], rax
$LN2@do_put:

; 1349 :         }
; 1350 : 
; 1351 :         _Buf.resize(_Bufsize + 50); // add fudge factor

  00139	48 8b 44 24 50	 mov	 rax, QWORD PTR _Bufsize$[rsp]
  0013e	48 83 c0 32	 add	 rax, 50			; 00000032H
  00142	45 33 c0	 xor	 r8d, r8d
  00145	48 8b d0	 mov	 rdx, rax
  00148	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00150	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1352 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  00155	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0015d	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00162	44 8b c8	 mov	 r9d, eax
  00165	45 33 c0	 xor	 r8d, r8d
  00168	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  00170	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00178	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  0017d	48 89 44 24 68	 mov	 QWORD PTR tv136[rsp], rax
  00182	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0018a	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0018f	48 89 44 24 70	 mov	 QWORD PTR tv144[rsp], rax
  00194	33 d2		 xor	 edx, edx
  00196	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0019e	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  001a3	f2 0f 10 84 24
	08 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  001ac	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  001b2	44 8b 4c 24 60	 mov	 r9d, DWORD PTR _Precision$[rsp]
  001b7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv136[rsp]
  001bc	4c 8b c1	 mov	 r8, rcx
  001bf	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv144[rsp]
  001c4	48 8b d1	 mov	 rdx, rcx
  001c7	48 8b c8	 mov	 rcx, rax
  001ca	e8 00 00 00 00	 call	 sprintf_s
  001cf	48 98		 cdqe
  001d1	48 89 44 24 78	 mov	 QWORD PTR _Ngen$[rsp], rax

; 1353 :             &_Buf[0], _Buf.size(), _Ffmt(_Fmt, 0, _Iosbase.flags()), static_cast<int>(_Precision), _Val));
; 1354 : 
; 1355 :         return _Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen);

  001d6	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  001de	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  001e3	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T2[rsp]
  001eb	48 8b f9	 mov	 rdi, rcx
  001ee	48 8b b4 24 f0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  001f6	b9 10 00 00 00	 mov	 ecx, 16
  001fb	f3 a4		 rep movsb
  001fd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Ngen$[rsp]
  00202	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00207	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0020c	0f b6 84 24 00
	01 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  00214	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00218	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  00220	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR $T2[rsp]
  00228	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00230	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00238	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
  0023d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00245	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0024a	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1356 :     }

  00252	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0025a	48 33 cc	 xor	 rcx, rsp
  0025d	e8 00 00 00 00	 call	 __security_check_cookie
  00262	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00269	5f		 pop	 rdi
  0026a	5e		 pop	 rsi
  0026b	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z
_TEXT	SEGMENT
$T1 = 64
_Fmt$ = 80
_Buf$ = 96
__$ArrayPad$ = 160
this$ = 208
__$ReturnUdt$ = 216
_Dest$ = 224
_Iosbase$ = 232
_Fill$ = 240
_Val$ = 248
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1326 :         unsigned long long _Val) const { // put formatted unsigned long long to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1327 :         char _Buf[2 * _MAX_INT_DIG];
; 1328 :         char _Fmt[8];
; 1329 : 
; 1330 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0002f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00037	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0003c	44 8b c8	 mov	 r9d, eax
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02CLHGNPPK@Lu@
  00046	48 8d 54 24 50	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  0004b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00058	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR _Val$[rsp]
  00060	4c 8b c0	 mov	 r8, rax
  00063	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00068	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0006d	e8 00 00 00 00	 call	 sprintf_s
  00072	48 98		 cdqe
  00074	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  00079	48 8b f9	 mov	 rdi, rcx
  0007c	48 8b b4 24 e0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00084	b9 10 00 00 00	 mov	 ecx, 16
  00089	f3 a4		 rep movsb
  0008b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00090	48 8d 44 24 60	 lea	 rax, QWORD PTR _Buf$[rsp]
  00095	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009a	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  000a2	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000a6	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  000ae	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T1[rsp]
  000b3	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  000bb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
  000c8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1331 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "Lu", _Iosbase.flags()), _Val)));
; 1332 :     }

  000d0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d8	48 33 cc	 xor	 rcx, rsp
  000db	e8 00 00 00 00	 call	 __security_check_cookie
  000e0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e7	5f		 pop	 rdi
  000e8	5e		 pop	 rsi
  000e9	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z
_TEXT	SEGMENT
$T1 = 64
_Fmt$ = 80
_Buf$ = 96
__$ArrayPad$ = 160
this$ = 208
__$ReturnUdt$ = 216
_Dest$ = 224
_Iosbase$ = 232
_Fill$ = 240
_Val$ = 248
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1317 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long long _Val) const { // put formatted long long to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1318 :         char _Buf[2 * _MAX_INT_DIG];
; 1319 :         char _Fmt[8];
; 1320 : 
; 1321 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0002f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00037	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0003c	44 8b c8	 mov	 r9d, eax
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HIKPPMOK@Ld@
  00046	48 8d 54 24 50	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  0004b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00058	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR _Val$[rsp]
  00060	4c 8b c0	 mov	 r8, rax
  00063	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00068	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0006d	e8 00 00 00 00	 call	 sprintf_s
  00072	48 98		 cdqe
  00074	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  00079	48 8b f9	 mov	 rdi, rcx
  0007c	48 8b b4 24 e0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00084	b9 10 00 00 00	 mov	 ecx, 16
  00089	f3 a4		 rep movsb
  0008b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00090	48 8d 44 24 60	 lea	 rax, QWORD PTR _Buf$[rsp]
  00095	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009a	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  000a2	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000a6	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  000ae	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T1[rsp]
  000b3	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  000bb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
  000c8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1322 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "Ld", _Iosbase.flags()), _Val)));
; 1323 :     }

  000d0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d8	48 33 cc	 xor	 rcx, rsp
  000db	e8 00 00 00 00	 call	 __security_check_cookie
  000e0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e7	5f		 pop	 rdi
  000e8	5e		 pop	 rsi
  000e9	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z
_TEXT	SEGMENT
$T1 = 64
_Fmt$ = 80
_Buf$ = 96
__$ArrayPad$ = 160
this$ = 208
__$ReturnUdt$ = 216
_Dest$ = 224
_Iosbase$ = 232
_Fill$ = 240
_Val$ = 248
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1308 :         unsigned long _Val) const { // put formatted unsigned long to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1309 :         char _Buf[2 * _MAX_INT_DIG];
; 1310 :         char _Fmt[6];
; 1311 : 
; 1312 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0002f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00037	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0003c	44 8b c8	 mov	 r9d, eax
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02BDDLJJBK@lu@
  00046	48 8d 54 24 50	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  0004b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00058	44 8b 8c 24 f8
	00 00 00	 mov	 r9d, DWORD PTR _Val$[rsp]
  00060	4c 8b c0	 mov	 r8, rax
  00063	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00068	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0006d	e8 00 00 00 00	 call	 sprintf_s
  00072	48 98		 cdqe
  00074	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  00079	48 8b f9	 mov	 rdi, rcx
  0007c	48 8b b4 24 e0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00084	b9 10 00 00 00	 mov	 ecx, 16
  00089	f3 a4		 rep movsb
  0008b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00090	48 8d 44 24 60	 lea	 rax, QWORD PTR _Buf$[rsp]
  00095	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009a	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  000a2	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000a6	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  000ae	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T1[rsp]
  000b3	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  000bb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
  000c8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1313 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "lu", _Iosbase.flags()), _Val)));
; 1314 :     }

  000d0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d8	48 33 cc	 xor	 rcx, rsp
  000db	e8 00 00 00 00	 call	 __security_check_cookie
  000e0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e7	5f		 pop	 rdi
  000e8	5e		 pop	 rsi
  000e9	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z
_TEXT	SEGMENT
$T1 = 64
_Fmt$ = 80
_Buf$ = 96
__$ArrayPad$ = 160
this$ = 208
__$ReturnUdt$ = 216
_Dest$ = 224
_Iosbase$ = 232
_Fill$ = 240
_Val$ = 248
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1299 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long _Val) const { // put formatted long to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1300 :         char _Buf[2 * _MAX_INT_DIG];
; 1301 :         char _Fmt[6];
; 1302 : 
; 1303 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0002f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00037	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0003c	44 8b c8	 mov	 r9d, eax
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02EAOCLKAK@ld@
  00046	48 8d 54 24 50	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  0004b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00058	44 8b 8c 24 f8
	00 00 00	 mov	 r9d, DWORD PTR _Val$[rsp]
  00060	4c 8b c0	 mov	 r8, rax
  00063	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00068	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0006d	e8 00 00 00 00	 call	 sprintf_s
  00072	48 98		 cdqe
  00074	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  00079	48 8b f9	 mov	 rdi, rcx
  0007c	48 8b b4 24 e0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00084	b9 10 00 00 00	 mov	 ecx, 16
  00089	f3 a4		 rep movsb
  0008b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00090	48 8d 44 24 60	 lea	 rax, QWORD PTR _Buf$[rsp]
  00095	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009a	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  000a2	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000a6	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  000ae	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T1[rsp]
  000b3	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  000bb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
  000c8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1304 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "ld", _Iosbase.flags()), _Val)));
; 1305 :     }

  000d0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d8	48 33 cc	 xor	 rcx, rsp
  000db	e8 00 00 00 00	 call	 __security_check_cookie
  000e0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e7	5f		 pop	 rdi
  000e8	5e		 pop	 rsi
  000e9	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
_TEXT	SEGMENT
_Fillcount$1 = 48
_Punct_fac$2 = 56
tv173 = 64
tv139 = 72
tv144 = 80
tv162 = 88
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
_Str$10 = 208
$T11 = 240
$T12 = 272
__$ArrayPad$ = 304
this$ = 352
__$ReturnUdt$ = 360
_Dest$ = 368
_Iosbase$ = 376
_Fill$ = 384
_Val$ = 392
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1267 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, bool _Val) const { // put formatted bool to _Dest

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1268 :         if (!(_Iosbase.flags() & ios_base::boolalpha)) {

  0002f	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00037	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0003c	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00041	85 c0		 test	 eax, eax
  00043	75 76		 jne	 SHORT $LN2@do_put

; 1269 :             return do_put(_Dest, _Iosbase, _Fill, static_cast<long>(_Val));

  00045	0f b6 84 24 88
	01 00 00	 movzx	 eax, BYTE PTR _Val$[rsp]
  0004d	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T3[rsp]
  00052	48 8b f9	 mov	 rdi, rcx
  00055	48 8b b4 24 70
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0005d	b9 10 00 00 00	 mov	 ecx, 16
  00062	f3 a4		 rep movsb
  00064	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0006c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0006f	48 89 4c 24 40	 mov	 QWORD PTR tv173[rsp], rcx
  00074	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00078	0f b6 84 24 80
	01 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  00080	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00084	4c 8b 8c 24 78
	01 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  0008c	4c 8d 44 24 60	 lea	 r8, QWORD PTR $T3[rsp]
  00091	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00099	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000a1	48 8b 44 24 40	 mov	 rax, QWORD PTR tv173[rsp]
  000a6	ff 50 48	 call	 QWORD PTR [rax+72]
  000a9	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  000b1	e9 7b 02 00 00	 jmp	 $LN1@do_put

; 1270 :         } else { // put "false" or "true"

  000b6	e9 76 02 00 00	 jmp	 $LN1@do_put
$LN2@do_put:

; 1271 :             const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  000bb	48 8d 54 24 70	 lea	 rdx, QWORD PTR $T4[rsp]
  000c0	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  000c8	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  000cd	48 8b c8	 mov	 rcx, rax
  000d0	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  000d5	48 89 44 24 38	 mov	 QWORD PTR _Punct_fac$2[rsp], rax
  000da	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T4[rsp]
  000df	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 1272 :             basic_string<_Elem> _Str;

  000e4	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR _Str$10[rsp]
  000ec	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1273 :             if (_Val) {

  000f1	0f b6 84 24 88
	01 00 00	 movzx	 eax, BYTE PTR _Val$[rsp]
  000f9	85 c0		 test	 eax, eax
  000fb	74 31		 je	 SHORT $LN4@do_put

; 1274 :                 _Str.assign(_Punct_fac.truename());

  000fd	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  00105	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Punct_fac$2[rsp]
  0010a	e8 00 00 00 00	 call	 ?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
  0010f	48 8b d0	 mov	 rdx, rax
  00112	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR _Str$10[rsp]
  0011a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0011f	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR $T11[rsp]
  00127	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1275 :             } else {

  0012c	eb 2f		 jmp	 SHORT $LN5@do_put
$LN4@do_put:

; 1276 :                 _Str.assign(_Punct_fac.falsename());

  0012e	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR $T12[rsp]
  00136	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Punct_fac$2[rsp]
  0013b	e8 00 00 00 00	 call	 ?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
  00140	48 8b d0	 mov	 rdx, rax
  00143	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR _Str$10[rsp]
  0014b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00150	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR $T12[rsp]
  00158	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@do_put:

; 1277 :             }
; 1278 : 
; 1279 :             size_t _Fillcount;
; 1280 :             if (_Iosbase.width() <= 0 || static_cast<size_t>(_Iosbase.width()) <= _Str.size()) {

  0015d	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00165	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  0016a	48 85 c0	 test	 rax, rax
  0016d	7e 29		 jle	 SHORT $LN8@do_put
  0016f	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00177	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  0017c	48 89 44 24 48	 mov	 QWORD PTR tv139[rsp], rax
  00181	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR _Str$10[rsp]
  00189	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0018e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv139[rsp]
  00193	48 3b c8	 cmp	 rcx, rax
  00196	77 0b		 ja	 SHORT $LN6@do_put
$LN8@do_put:

; 1281 :                 _Fillcount = 0;

  00198	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR _Fillcount$1[rsp], 0

; 1282 :             } else {

  001a1	eb 2f		 jmp	 SHORT $LN7@do_put
$LN6@do_put:

; 1283 :                 _Fillcount = static_cast<size_t>(_Iosbase.width()) - _Str.size();

  001a3	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  001ab	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  001b0	48 89 44 24 50	 mov	 QWORD PTR tv144[rsp], rax
  001b5	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR _Str$10[rsp]
  001bd	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001c2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv144[rsp]
  001c7	48 2b c8	 sub	 rcx, rax
  001ca	48 8b c1	 mov	 rax, rcx
  001cd	48 89 44 24 30	 mov	 QWORD PTR _Fillcount$1[rsp], rax
$LN7@do_put:

; 1284 :             }
; 1285 : 
; 1286 :             if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left) { // put leading fill

  001d2	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  001da	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  001df	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  001e4	83 f8 40	 cmp	 eax, 64			; 00000040H
  001e7	74 65		 je	 SHORT $LN9@do_put

; 1287 :                 _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  001e9	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  001f1	48 8b f8	 mov	 rdi, rax
  001f4	48 8b b4 24 70
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  001fc	b9 10 00 00 00	 mov	 ecx, 16
  00201	f3 a4		 rep movsb
  00203	48 8b 44 24 30	 mov	 rax, QWORD PTR _Fillcount$1[rsp]
  00208	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0020d	44 0f b6 8c 24
	80 01 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  00216	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR $T5[rsp]
  0021e	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR $T8[rsp]
  00226	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0022e	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00233	48 8b bc 24 70
	01 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  0023b	48 8b f0	 mov	 rsi, rax
  0023e	b9 10 00 00 00	 mov	 ecx, 16
  00243	f3 a4		 rep movsb

; 1288 :                 _Fillcount = 0;

  00245	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR _Fillcount$1[rsp], 0
$LN9@do_put:

; 1289 :             }
; 1290 :             _Dest = _Put(_Dest, _Str.c_str(), _Str.size()); // put field

  0024e	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR _Str$10[rsp]
  00256	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0025b	48 89 44 24 58	 mov	 QWORD PTR tv162[rsp], rax
  00260	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR _Str$10[rsp]
  00268	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0026d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  00275	48 8b f9	 mov	 rdi, rcx
  00278	48 8b b4 24 70
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00280	b9 10 00 00 00	 mov	 ecx, 16
  00285	f3 a4		 rep movsb
  00287	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv162[rsp]
  0028c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00291	4c 8b c8	 mov	 r9, rax
  00294	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR $T6[rsp]
  0029c	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR $T9[rsp]
  002a4	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002ac	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  002b1	48 8b bc 24 70
	01 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  002b9	48 8b f0	 mov	 rsi, rax
  002bc	b9 10 00 00 00	 mov	 ecx, 16
  002c1	f3 a4		 rep movsb

; 1291 :             _Iosbase.width(0);

  002c3	33 d2		 xor	 edx, edx
  002c5	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  002cd	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEAA_J_J@Z ; std::ios_base::width

; 1292 :             return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  002d2	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  002da	48 8b f8	 mov	 rdi, rax
  002dd	48 8b b4 24 70
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  002e5	b9 10 00 00 00	 mov	 ecx, 16
  002ea	f3 a4		 rep movsb
  002ec	48 8b 44 24 30	 mov	 rax, QWORD PTR _Fillcount$1[rsp]
  002f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002f6	44 0f b6 8c 24
	80 01 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  002ff	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR $T7[rsp]
  00307	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0030f	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00317	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0031c	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR _Str$10[rsp]
  00324	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00329	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@do_put:

; 1293 :         }
; 1294 :     }

  00331	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00339	48 33 cc	 xor	 rcx, rsp
  0033c	e8 00 00 00 00	 call	 __security_check_cookie
  00341	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  00348	5f		 pop	 rdi
  00349	5e		 pop	 rsi
  0034a	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 96
__$ReturnUdt$ = 104
_Dest$ = 112
_Iosbase$ = 120
_Fill$ = 128
_Val$ = 136
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT

; 1251 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, double _Val) const { // put formatted double to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1252 :         return do_put(_Dest, _Iosbase, _Fill, _Val);

  0001a	48 8d 44 24 30	 lea	 rax, QWORD PTR $T1[rsp]
  0001f	48 8b f8	 mov	 rdi, rax
  00022	48 8b 74 24 70	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00027	b9 10 00 00 00	 mov	 ecx, 16
  0002c	f3 a4		 rep movsb
  0002e	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	f2 0f 10 84 24
	88 00 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  0003f	f2 0f 11 44 24
	28		 movsd	 QWORD PTR [rsp+40], xmm0
  00045	0f b6 8c 24 80
	00 00 00	 movzx	 ecx, BYTE PTR _Fill$[rsp]
  0004d	88 4c 24 20	 mov	 BYTE PTR [rsp+32], cl
  00051	4c 8b 4c 24 78	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  00056	4c 8d 44 24 30	 lea	 r8, QWORD PTR $T1[rsp]
  0005b	48 8b 54 24 68	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00060	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00065	ff 50 28	 call	 QWORD PTR [rax+40]
  00068	48 8b 44 24 68	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1253 :     }

  0006d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00071	5f		 pop	 rdi
  00072	5e		 pop	 rsi
  00073	c3		 ret	 0
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
_TEXT	SEGMENT
this$ = 48
_Lobj$ = 56
_Refs$ = 64
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT

; 1218 :     __CLR_OR_THIS_CALL num_put(const _Locinfo& _Lobj, size_t _Refs = 0) : locale::facet(_Refs) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Refs$[rsp]
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ??0facet@locale@std@@IEAA@_K@Z ; std::locale::facet::facet
  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  0002e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1219 :         _Init(_Lobj);

  00031	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Lobj$[rsp]
  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init

; 1220 :     }

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00049	c3		 ret	 0
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT

; 1209 :     void __CLR_OR_THIS_CALL _Init(const _Locinfo&) {} // initialize from _Locinfo object

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	c3		 ret	 0
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT

; 1207 :     virtual __CLR_OR_THIS_CALL ~num_put() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv86 = 48
$T3 = 56
_Ppf$ = 176
_Ploc$ = 184
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1195 :     static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00011	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 1196 :         // return locale category mask and construct standard facet
; 1197 :         if (_Ppf && !*_Ppf) {

  00019	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR _Ppf$[rsp], 0
  00022	0f 84 92 00 00
	00		 je	 $LN2@Getcat
  00028	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  00030	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00034	0f 85 80 00 00
	00		 jne	 $LN2@Getcat

; 1198 :             *_Ppf = new num_put<_Elem, _OutIt>(_Locinfo(_Ploc->c_str()));

  0003a	b9 10 00 00 00	 mov	 ecx, 16
  0003f	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00044	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00049	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T2[rsp], 0
  0004f	74 36		 je	 SHORT $LN4@Getcat
  00051	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _Ploc$[rsp]
  00059	e8 00 00 00 00	 call	 ?c_str@locale@std@@QEBAPEBDXZ ; std::locale::c_str
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T3[rsp]
  00066	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QEAA@PEBD@Z ; std::_Locinfo::_Locinfo
  0006b	83 4c 24 20 01	 or	 DWORD PTR $T1[rsp], 1
  00070	45 33 c0	 xor	 r8d, r8d
  00073	48 8b d0	 mov	 rdx, rax
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T2[rsp]
  0007b	e8 00 00 00 00	 call	 ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
  00080	48 89 44 24 30	 mov	 QWORD PTR tv86[rsp], rax
  00085	eb 09		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00087	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv86[rsp], 0
$LN5@Getcat:
  00090	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  00098	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv86[rsp]
  0009d	48 89 08	 mov	 QWORD PTR [rax], rcx
  000a0	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  000a4	83 e0 01	 and	 eax, 1
  000a7	85 c0		 test	 eax, eax
  000a9	74 0f		 je	 SHORT $LN2@Getcat
  000ab	83 64 24 20 fe	 and	 DWORD PTR $T1[rsp], -2
  000b0	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T3[rsp]
  000b5	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 1199 :         }
; 1200 : 
; 1201 :         return _X_NUMERIC;

  000ba	b8 04 00 00 00	 mov	 eax, 4

; 1202 :     }

  000bf	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000c6	c3		 ret	 0
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Lock$1 = 32
_Psave$2 = 40
_Pfmod$3 = 48
_Pf$4 = 56
_Psave_guard$5 = 64
_Id$6 = 72
$T7 = 80
_Loc$ = 112
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 428  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 429  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00009	33 d2		 xor	 edx, edx
  0000b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00010	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 430  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  0001c	48 89 44 24 28	 mov	 QWORD PTR _Psave$2[rsp], rax

; 431  : 
; 432  :     const size_t _Id         = _Facet::id;

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00028	e8 00 00 00 00	 call	 ??Bid@locale@std@@QEAA_KXZ ; std::locale::id::operator unsigned __int64
  0002d	48 89 44 24 48	 mov	 QWORD PTR _Id$6[rsp], rax

; 433  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);

  00032	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Id$6[rsp]
  00037	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Loc$[rsp]
  0003c	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
  00041	48 89 44 24 38	 mov	 QWORD PTR _Pf$4[rsp], rax

; 434  : 
; 435  :     if (!_Pf) {

  00046	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Pf$4[rsp], 0
  0004c	0f 85 8d 00 00
	00		 jne	 $LN2@use_facet

; 436  :         if (_Psave) {

  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Psave$2[rsp], 0
  00058	74 0c		 je	 SHORT $LN3@use_facet

; 437  :             _Pf = _Psave; // lazy facet already allocated

  0005a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  0005f	48 89 44 24 38	 mov	 QWORD PTR _Pf$4[rsp], rax
  00064	eb 79		 jmp	 SHORT $LN2@use_facet
$LN3@use_facet:

; 438  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  00066	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Loc$[rsp]
  0006b	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Psave$2[rsp]
  00070	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
  00075	48 83 f8 ff	 cmp	 rax, -1
  00079	75 07		 jne	 SHORT $LN5@use_facet

; 439  : #if _HAS_EXCEPTIONS
; 440  :             _Throw_bad_cast(); // lazy disallowed

  0007b	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast

; 441  : #else // _HAS_EXCEPTIONS
; 442  :             _CSTD abort(); // lazy disallowed
; 443  : #endif // _HAS_EXCEPTIONS
; 444  :         } else { // queue up lazy facet for destruction

  00080	eb 5d		 jmp	 SHORT $LN2@use_facet
$LN5@use_facet:

; 445  :             auto _Pfmod = const_cast<locale::facet*>(_Psave);

  00082	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  00087	48 89 44 24 30	 mov	 QWORD PTR _Pfmod$3[rsp], rax

; 446  :             unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base*>(_Pfmod));

  0008c	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Pfmod$3[rsp]
  00091	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Psave_guard$5[rsp]
  00096	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>

; 447  : 
; 448  : #if defined(_M_CEE)
; 449  :             _Facet_Register_m(_Pfmod);
; 450  : #else // defined(_M_CEE)
; 451  :             _Facet_Register(_Pfmod);

  0009b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Pfmod$3[rsp]
  000a0	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register

; 452  : #endif // defined(_M_CEE)
; 453  : 
; 454  :             _Pfmod->_Incref();

  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pfmod$3[rsp]
  000aa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ad	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Pfmod$3[rsp]
  000b2	ff 50 08	 call	 QWORD PTR [rax+8]

; 455  :             _Facetptr<_Facet>::_Psave = _Psave;

  000b5	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  000ba	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave

; 456  :             _Pf                       = _Psave;

  000c1	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  000c6	48 89 44 24 38	 mov	 QWORD PTR _Pf$4[rsp], rax

; 457  : 
; 458  :             (void) _Psave_guard.release();

  000cb	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Psave_guard$5[rsp]
  000d0	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 459  :         }

  000d5	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Psave_guard$5[rsp]
  000da	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 460  :     }
; 461  : 
; 462  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  000df	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pf$4[rsp]
  000e4	48 89 44 24 50	 mov	 QWORD PTR $T7[rsp], rax
  000e9	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  000ee	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  000f3	48 8b 44 24 50	 mov	 rax, QWORD PTR $T7[rsp]

; 463  :     _END_LOCK()
; 464  : } // end of use_facet body

  000f8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000fc	c3		 ret	 0
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 124  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 125  :             return _Ok;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 126  :         }

  0000e	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
tv72 = 32
_Zero_uncaught_exceptions$ = 33
this$ = 64
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00009	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  0000e	0f b6 c0	 movzx	 eax, al
  00011	85 c0		 test	 eax, eax
  00013	75 07		 jne	 SHORT $LN4@sentry
  00015	c6 44 24 20 01	 mov	 BYTE PTR tv72[rsp], 1
  0001a	eb 05		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  0001c	c6 44 24 20 00	 mov	 BYTE PTR tv72[rsp], 0
$LN5@sentry:
  00021	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv72[rsp]
  00026	88 44 24 21	 mov	 BYTE PTR _Zero_uncaught_exceptions$[rsp], al

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  0002a	0f b6 44 24 21	 movzx	 eax, BYTE PTR _Zero_uncaught_exceptions$[rsp]
  0002f	85 c0		 test	 eax, eax
  00031	74 0d		 je	 SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003b	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN2@sentry:

; 120  :             }
; 121  :         }

  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00045	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 32
this$ = 64
_Ostr$ = 72
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base

; 93   :             if (!_Ostr.good()) {

  0001d	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00029	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0002e	48 03 c8	 add	 rcx, rax
  00031	48 8b c1	 mov	 rax, rcx
  00034	48 8b c8	 mov	 rcx, rax
  00037	e8 00 00 00 00	 call	 ?good@ios_base@std@@QEBA_NXZ ; std::ios_base::good
  0003c	0f b6 c0	 movzx	 eax, al
  0003f	85 c0		 test	 eax, eax
  00041	75 0b		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00043	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00048	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 95   :                 return;

  0004c	eb 74		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  0004e	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00053	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00056	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 8b c8	 mov	 rcx, rax
  00068	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  0006d	48 89 44 24 20	 mov	 QWORD PTR _Tied$[rsp], rax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  00072	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Tied$[rsp], 0
  00078	74 0c		 je	 SHORT $LN4@sentry
  0007a	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0007f	48 39 44 24 20	 cmp	 QWORD PTR _Tied$[rsp], rax
  00084	75 0b		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  00086	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0008b	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 101  :                 return;

  0008f	eb 31		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  00091	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Tied$[rsp]
  00096	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  0009b	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  000a0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000ac	48 03 c8	 add	 rcx, rax
  000af	48 8b c1	 mov	 rax, rcx
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	e8 00 00 00 00	 call	 ?good@ios_base@std@@QEBA_NXZ ; std::ios_base::good
  000ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000bf	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 106  :         }

  000c2	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000c7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cb	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 32
tv72 = 40
this$ = 64
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 28	 mov	 QWORD PTR tv72[rsp], rax
  00016	48 8b 44 24 28	 mov	 rax, QWORD PTR tv72[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv72[rsp]
  00027	48 03 c8	 add	 rcx, rax
  0002a	48 8b c1	 mov	 rax, rcx
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00035	48 89 44 24 20	 mov	 QWORD PTR _Rdbuf$[rsp], rax

; 80   :             if (_Rdbuf) {

  0003a	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Rdbuf$[rsp], 0
  00040	74 10		 je	 SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR _Rdbuf$[rsp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Rdbuf$[rsp]
  0004f	ff 50 10	 call	 QWORD PTR [rax+16]
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 32
tv73 = 40
this$ = 64
_Ostr$ = 72
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00018	48 89 08	 mov	 QWORD PTR [rax], rcx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00023	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  00028	48 8b 44 24 28	 mov	 rax, QWORD PTR tv73[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00034	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv73[rsp]
  00039	48 03 c8	 add	 rcx, rax
  0003c	48 8b c1	 mov	 rax, rcx
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00047	48 89 44 24 20	 mov	 QWORD PTR _Rdbuf$[rsp], rax

; 73   :             if (_Rdbuf) {

  0004c	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Rdbuf$[rsp], 0
  00052	74 10		 je	 SHORT $LN2@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR _Rdbuf$[rsp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Rdbuf$[rsp]
  00061	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 75   :             }
; 76   :         }

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\_main\_univer\Documents\Chelgu\PP\Prog\C\rep\15-Cpp-Classes\CppExamples\Features\main.cpp
_TEXT	SEGMENT
c1$ = 32
p1$ = 48
__$ArrayPad$ = 64
main	PROC

; 26   : {

$LN3:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000b	48 33 c4	 xor	 rax, rsp
  0000e	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 27   : 	complex c1 = { 1,2 }, c2, c3;

  00013	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0001b	f2 0f 11 44 24
	20		 movsd	 QWORD PTR c1$[rsp], xmm0
  00021	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4000000000000000
  00029	f2 0f 11 44 24
	28		 movsd	 QWORD PTR c1$[rsp+8], xmm0

; 28   : 	c1.print();

  0002f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR c1$[rsp]
  00034	e8 00 00 00 00	 call	 ?print@complex@@QEAAXXZ	; complex::print

; 29   : 	point p1 = { 11,22 };

  00039	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4026000000000000
  00041	f2 0f 11 44 24
	30		 movsd	 QWORD PTR p1$[rsp], xmm0
  00047	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4036000000000000
  0004f	f2 0f 11 44 24
	38		 movsd	 QWORD PTR p1$[rsp+8], xmm0

; 30   : 	p1.print();

  00055	48 8d 4c 24 30	 lea	 rcx, QWORD PTR p1$[rsp]
  0005a	e8 00 00 00 00	 call	 ?print@point@@QEAAXXZ	; point::print

; 31   : 	return 0;

  0005f	33 c0		 xor	 eax, eax

; 32   : }

  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00066	48 33 cc	 xor	 rcx, rsp
  00069	e8 00 00 00 00	 call	 __security_check_cookie
  0006e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00072	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\_main\_univer\Documents\Chelgu\PP\Prog\C\rep\15-Cpp-Classes\CppExamples\Features\main.cpp
;	COMDAT ?print@point@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?print@point@@QEAAXXZ PROC				; point::print, COMDAT

; 20   : 	{

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 21   : 		std::cout << x << "," << y << std::endl;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	f2 0f 10 08	 movsd	 xmm1, QWORD PTR [rax]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  00019	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
  00025	48 8b c8	 mov	 rcx, rax
  00028	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00032	f2 0f 10 49 08	 movsd	 xmm1, QWORD PTR [rcx+8]
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 22   : 	}

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
?print@point@@QEAAXXZ ENDP				; point::print
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 48
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 978  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 979  :     _Ostr.put(_Ostr.widen('\n'));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0001a	48 03 c8	 add	 rcx, rax
  0001d	48 8b c1	 mov	 rax, rcx
  00020	b2 0a		 mov	 dl, 10
  00022	48 8b c8	 mov	 rcx, rax
  00025	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  0002a	0f b6 d0	 movzx	 edx, al
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00032	e8 00 00 00 00	 call	 ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put

; 980  :     _Ostr.flush();

  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush

; 981  :     return _Ostr;

  00041	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ostr$[rsp]

; 982  : }

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 32
tv284 = 36
tv282 = 37
_Pad$ = 40
_Count$ = 48
$T1 = 56
$T2 = 60
$T3 = 64
$T4 = 68
tv137 = 72
$T5 = 80
_Ok$ = 88
_Ostr$ = 128
_Val$ = 136
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

$LN24:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 739  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00016	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  0001e	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00023	48 89 44 24 30	 mov	 QWORD PTR _Count$[rsp], rax

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00028	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00030	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00033	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00037	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0003f	48 03 c8	 add	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  0004d	48 85 c0	 test	 rax, rax
  00050	7e 5d		 jle	 SHORT $LN17@operator
  00052	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0005a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00061	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00069	48 03 c8	 add	 rcx, rax
  0006c	48 8b c1	 mov	 rax, rcx
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  00077	48 3b 44 24 30	 cmp	 rax, QWORD PTR _Count$[rsp]
  0007c	7e 31		 jle	 SHORT $LN17@operator
  0007e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00086	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00089	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0008d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00095	48 03 c8	 add	 rcx, rax
  00098	48 8b c1	 mov	 rax, rcx
  0009b	48 8b c8	 mov	 rcx, rax
  0009e	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  000a3	48 2b 44 24 30	 sub	 rax, QWORD PTR _Count$[rsp]
  000a8	48 89 44 24 48	 mov	 QWORD PTR tv137[rsp], rax
  000ad	eb 09		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000af	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv137[rsp], 0
$LN18@operator:
  000b8	48 8b 44 24 48	 mov	 rax, QWORD PTR tv137[rsp]
  000bd	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

  000c2	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  000ca	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000cf	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 742  : 
; 743  :     if (!_Ok) {

  000d4	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000d9	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000de	0f b6 c0	 movzx	 eax, al
  000e1	85 c0		 test	 eax, eax
  000e3	75 10		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  000e5	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  000e9	83 c8 04	 or	 eax, 4
  000ec	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 745  :     } else { // state okay, insert

  000f0	e9 11 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN
; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000f5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  000fd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00100	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00104	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0010c	48 03 c8	 add	 rcx, rax
  0010f	48 8b c1	 mov	 rax, rcx
  00112	48 8b c8	 mov	 rcx, rax
  00115	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0011a	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0011f	83 f8 40	 cmp	 eax, 64			; 00000040H
  00122	0f 84 ab 00 00
	00		 je	 $LN11@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00128	eb 0d		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0012a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$[rsp]
  0012f	48 ff c8	 dec	 rax
  00132	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN4@operator:
  00137	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  0013d	0f 8e 90 00 00
	00		 jle	 $LN11@operator

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00143	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0014b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0014e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00152	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0015a	48 03 c8	 add	 rcx, rax
  0015d	48 8b c1	 mov	 rax, rcx
  00160	48 8b c8	 mov	 rcx, rax
  00163	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  00168	88 44 24 24	 mov	 BYTE PTR tv284[rsp], al
  0016c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00174	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00177	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  0017b	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  00183	48 03 d1	 add	 rdx, rcx
  00186	48 8b ca	 mov	 rcx, rdx
  00189	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0018e	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR tv284[rsp]
  00193	0f b6 d1	 movzx	 edx, cl
  00196	48 8b c8	 mov	 rcx, rax
  00199	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  0019e	89 44 24 38	 mov	 DWORD PTR $T1[rsp], eax
  001a2	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001a7	89 44 24 3c	 mov	 DWORD PTR $T2[rsp], eax
  001ab	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T1[rsp]
  001b0	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR $T2[rsp]
  001b5	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001ba	0f b6 c0	 movzx	 eax, al
  001bd	85 c0		 test	 eax, eax
  001bf	74 0d		 je	 SHORT $LN12@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

  001c1	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  001c5	83 c8 04	 or	 eax, 4
  001c8	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 751  :                     break;

  001cc	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 752  :                 }
; 753  :             }

  001ce	e9 57 ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  001d3	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  001d8	75 4c		 jne	 SHORT $LN13@operator
  001da	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  001e2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e5	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001e9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  001f1	48 03 c8	 add	 rcx, rax
  001f4	48 8b c1	 mov	 rax, rcx
  001f7	48 8b c8	 mov	 rcx, rax
  001fa	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  001ff	4c 8b 44 24 30	 mov	 r8, QWORD PTR _Count$[rsp]
  00204	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR _Val$[rsp]
  0020c	48 8b c8	 mov	 rcx, rax
  0020f	e8 00 00 00 00	 call	 ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
  00214	48 3b 44 24 30	 cmp	 rax, QWORD PTR _Count$[rsp]
  00219	74 0b		 je	 SHORT $LN13@operator

; 757  :             _State |= ios_base::badbit;

  0021b	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0021f	83 c8 04	 or	 eax, 4
  00222	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax
$LN13@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {

  00226	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  0022b	0f 85 ab 00 00
	00		 jne	 $LN14@operator

; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00231	eb 0d		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00233	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$[rsp]
  00238	48 ff c8	 dec	 rax
  0023b	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN7@operator:
  00240	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  00246	0f 8e 90 00 00
	00		 jle	 $LN14@operator

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0024c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00254	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00257	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0025b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00263	48 03 c8	 add	 rcx, rax
  00266	48 8b c1	 mov	 rax, rcx
  00269	48 8b c8	 mov	 rcx, rax
  0026c	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  00271	88 44 24 25	 mov	 BYTE PTR tv282[rsp], al
  00275	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0027d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00280	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00284	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  0028c	48 03 d1	 add	 rdx, rcx
  0028f	48 8b ca	 mov	 rcx, rdx
  00292	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00297	0f b6 4c 24 25	 movzx	 ecx, BYTE PTR tv282[rsp]
  0029c	0f b6 d1	 movzx	 edx, cl
  0029f	48 8b c8	 mov	 rcx, rax
  002a2	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  002a7	89 44 24 40	 mov	 DWORD PTR $T3[rsp], eax
  002ab	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  002b0	89 44 24 44	 mov	 DWORD PTR $T4[rsp], eax
  002b4	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T3[rsp]
  002b9	48 8d 4c 24 44	 lea	 rcx, QWORD PTR $T4[rsp]
  002be	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  002c3	0f b6 c0	 movzx	 eax, al
  002c6	85 c0		 test	 eax, eax
  002c8	74 0d		 je	 SHORT $LN15@operator

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit

  002ca	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  002ce	83 c8 04	 or	 eax, 4
  002d1	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 764  :                     break;

  002d5	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 765  :                 }
; 766  :             }

  002d7	e9 57 ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  002dc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002e4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002e7	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002eb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002f3	48 03 c8	 add	 rcx, rax
  002f6	48 8b c1	 mov	 rax, rcx
  002f9	33 d2		 xor	 edx, edx
  002fb	48 8b c8	 mov	 rcx, rax
  002fe	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEAA_J_J@Z ; std::ios_base::width
  00303	90		 npad	 1
  00304	eb 00		 jmp	 SHORT $LN9@operator
$LN22@operator:
$LN9@operator:

; 770  :         _CATCH_IO_(ios_base, _Ostr)
; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

  00306	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0030e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00311	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00315	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0031d	48 03 c8	 add	 rcx, rax
  00320	48 8b c1	 mov	 rax, rcx
  00323	45 33 c0	 xor	 r8d, r8d
  00326	8b 54 24 20	 mov	 edx, DWORD PTR _State$[rsp]
  0032a	48 8b c8	 mov	 rcx, rax
  0032d	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 774  :     return _Ostr;

  00332	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0033a	48 89 44 24 50	 mov	 QWORD PTR $T5[rsp], rax
  0033f	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00344	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00349	48 8b 44 24 50	 mov	 rax, QWORD PTR $T5[rsp]

; 775  : }

  0034e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00352	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv284 = 36
tv282 = 37
_Pad$ = 40
_Count$ = 48
$T1 = 56
$T2 = 60
$T3 = 64
$T4 = 68
tv137 = 72
$T5 = 80
_Ok$ = 88
_Ostr$ = 128
_Val$ = 136
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  0000d	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00017	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0001b	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00022	48 03 c8	 add	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	41 b0 01	 mov	 r8b, 1
  0002b	ba 04 00 00 00	 mov	 edx, 4
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00038	90		 npad	 1
  00039	48 8d 05 00 00
	00 00		 lea	 rax, $LN22@catch$0
  00040	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
  00046	cc		 int	 3
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv284 = 36
tv282 = 37
_Pad$ = 40
_Count$ = 48
$T1 = 56
$T2 = 60
$T3 = 64
$T4 = 68
tv137 = 72
$T5 = 80
_Ok$ = 88
_Ostr$ = 128
_Val$ = 136
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  0000d	48 8b 85 80 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00017	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0001b	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00022	48 03 c8	 add	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	41 b0 01	 mov	 r8b, 1
  0002b	ba 04 00 00 00	 mov	 edx, 4
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00038	90		 npad	 1
  00039	48 8d 05 00 00
	00 00		 lea	 rax, $LN22@catch$0
  00040	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
  00046	cc		 int	 3
?catch$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
_TEXT	SEGMENT
_Rdbuf$ = 32
_Ok$1 = 40
this$ = 80
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT

; 545  :     basic_ostream& __CLR_OR_THIS_CALL flush() { // flush output stream

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 546  :         const auto _Rdbuf = _Myios::rdbuf();

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00015	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0001a	48 03 c8	 add	 rcx, rax
  0001d	48 8b c1	 mov	 rax, rcx
  00020	48 8b c8	 mov	 rcx, rax
  00023	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00028	48 89 44 24 20	 mov	 QWORD PTR _Rdbuf$[rsp], rax

; 547  :         if (_Rdbuf) { // buffer exists, flush it

  0002d	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Rdbuf$[rsp], 0
  00033	74 60		 je	 SHORT $LN2@flush

; 548  :             const sentry _Ok(*this);

  00035	48 8b 54 24 50	 mov	 rdx, QWORD PTR this$[rsp]
  0003a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Ok$1[rsp]
  0003f	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 549  : 
; 550  :             if (_Ok && _Rdbuf->pubsync() == -1) {

  00044	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Ok$1[rsp]
  00049	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0004e	0f b6 c0	 movzx	 eax, al
  00051	85 c0		 test	 eax, eax
  00053	74 36		 je	 SHORT $LN3@flush
  00055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Rdbuf$[rsp]
  0005a	e8 00 00 00 00	 call	 ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
  0005f	83 f8 ff	 cmp	 eax, -1
  00062	75 27		 jne	 SHORT $LN3@flush

; 551  :                 _Myios::setstate(ios_base::badbit); // sync failed

  00064	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00069	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00070	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00075	48 03 c8	 add	 rcx, rax
  00078	48 8b c1	 mov	 rax, rcx
  0007b	45 33 c0	 xor	 r8d, r8d
  0007e	ba 04 00 00 00	 mov	 edx, 4
  00083	48 8b c8	 mov	 rcx, rax
  00086	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN3@flush:

; 552  :             }
; 553  :         }

  0008b	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Ok$1[rsp]
  00090	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
$LN2@flush:

; 554  :         return *this;

  00095	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]

; 555  :     }

  0009a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009e	c3		 ret	 0
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
_TEXT	SEGMENT
_State$ = 32
$T1 = 36
$T2 = 40
$T3 = 48
_Ok$ = 56
this$ = 96
_Ch$ = 104
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::put, COMDAT

; 508  :     basic_ostream& __CLR_OR_THIS_CALL put(_Elem _Ch) { // insert a character

$LN12:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 509  :         ios_base::iostate _State = ios_base::goodbit;

  0000d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 510  :         const sentry _Ok(*this);

  00015	48 8b 54 24 60	 mov	 rdx, QWORD PTR this$[rsp]
  0001a	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Ok$[rsp]
  0001f	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 511  : 
; 512  :         if (!_Ok) {

  00024	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00029	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0002e	0f b6 c0	 movzx	 eax, al
  00031	85 c0		 test	 eax, eax
  00033	75 0d		 jne	 SHORT $LN2@put

; 513  :             _State |= ios_base::badbit;

  00035	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00039	83 c8 04	 or	 eax, 4
  0003c	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 514  :         } else { // state okay, insert character

  00040	eb 5c		 jmp	 SHORT $LN3@put
$LN2@put:

; 515  :             _TRY_IO_BEGIN
; 516  :             if (_Traits::eq_int_type(_Traits::eof(), _Myios::rdbuf()->sputc(_Ch))) {

  00042	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0004e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00053	48 03 c8	 add	 rcx, rax
  00056	48 8b c1	 mov	 rax, rcx
  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00061	0f b6 54 24 68	 movzx	 edx, BYTE PTR _Ch$[rsp]
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  0006e	89 44 24 24	 mov	 DWORD PTR $T1[rsp], eax
  00072	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00077	89 44 24 28	 mov	 DWORD PTR $T2[rsp], eax
  0007b	48 8d 54 24 24	 lea	 rdx, QWORD PTR $T1[rsp]
  00080	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  00085	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0008a	0f b6 c0	 movzx	 eax, al
  0008d	85 c0		 test	 eax, eax
  0008f	74 0b		 je	 SHORT $LN5@put

; 517  :                 _State |= ios_base::badbit;

  00091	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00095	83 c8 04	 or	 eax, 4
  00098	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax
$LN5@put:
  0009c	eb 00		 jmp	 SHORT $LN3@put
$LN10@put:
$LN3@put:

; 518  :             }
; 519  :             _CATCH_IO_END
; 520  :         }
; 521  : 
; 522  :         _Myios::setstate(_State);

  0009e	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000a3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a6	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000af	48 03 c8	 add	 rcx, rax
  000b2	48 8b c1	 mov	 rax, rcx
  000b5	45 33 c0	 xor	 r8d, r8d
  000b8	8b 54 24 20	 mov	 edx, DWORD PTR _State$[rsp]
  000bc	48 8b c8	 mov	 rcx, rax
  000bf	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 523  :         return *this;

  000c4	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000c9	48 89 44 24 30	 mov	 QWORD PTR $T3[rsp], rax
  000ce	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000d3	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR $T3[rsp]

; 524  :     }

  000dd	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e1	c3		 ret	 0
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::put
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
$T1 = 36
$T2 = 40
$T3 = 48
_Ok$ = 56
this$ = 96
_Ch$ = 104
?catch$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::catch$0

; 518  :             }
; 519  :             _CATCH_IO_END

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z$0:
  0000d	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00011	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00014	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00018	48 8b 4d 60	 mov	 rcx, QWORD PTR this$[rbp]
  0001c	48 03 c8	 add	 rcx, rax
  0001f	48 8b c1	 mov	 rax, rcx
  00022	41 b0 01	 mov	 r8b, 1
  00025	ba 04 00 00 00	 mov	 edx, 4
  0002a	48 8b c8	 mov	 rcx, rax
  0002d	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00032	90		 npad	 1
  00033	48 8d 05 00 00
	00 00		 lea	 rax, $LN10@catch$0
  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
  00040	cc		 int	 3
?catch$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
$T1 = 36
$T2 = 40
$T3 = 48
_Ok$ = 56
this$ = 96
_Ch$ = 104
?catch$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::catch$0

; 519  :             _CATCH_IO_END

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z$0:
  0000d	48 8b 45 60	 mov	 rax, QWORD PTR this$[rbp]
  00011	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00014	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00018	48 8b 4d 60	 mov	 rcx, QWORD PTR this$[rbp]
  0001c	48 03 c8	 add	 rcx, rax
  0001f	48 8b c1	 mov	 rax, rcx
  00022	41 b0 01	 mov	 r8b, 1
  00025	ba 04 00 00 00	 mov	 edx, 4
  0002a	48 8b c8	 mov	 rcx, rax
  0002d	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00032	90		 npad	 1
  00033	48 8d 05 00 00
	00 00		 lea	 rax, $LN10@catch$0
  0003a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003e	5d		 pop	 rbp
  0003f	c3		 ret	 0
  00040	cc		 int	 3
?catch$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
_TEXT	SEGMENT
tv188 = 48
_State$ = 52
tv146 = 56
_Nput_fac$1 = 64
$T2 = 72
_Ok$ = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
this$ = 192
_Val$ = 200
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT

; 404  :     basic_ostream& __CLR_OR_THIS_CALL operator<<(double _Val) { // insert a double

$LN11:
  00000	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 405  :         ios_base::iostate _State = ios_base::goodbit;

  00014	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 406  :         const sentry _Ok(*this);

  0001c	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00024	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00029	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 407  : 
; 408  :         if (_Ok) { // state okay, use facet to insert

  0002e	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00033	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00038	0f b6 c0	 movzx	 eax, al
  0003b	85 c0		 test	 eax, eax
  0003d	0f 84 27 01 00
	00		 je	 $LN2@operator

; 409  :             const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  00043	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00052	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	48 03 c8	 add	 rcx, rax
  0005d	48 8b c1	 mov	 rax, rcx
  00060	48 8d 54 24 60	 lea	 rdx, QWORD PTR $T3[rsp]
  00065	48 8b c8	 mov	 rcx, rax
  00068	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00075	48 89 44 24 40	 mov	 QWORD PTR _Nput_fac$1[rsp], rax
  0007a	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T3[rsp]
  0007f	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00084	90		 npad	 1

; 410  : 
; 411  :             _TRY_IO_BEGIN
; 412  :             if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {

  00085	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0008d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00090	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00094	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009c	48 03 c8	 add	 rcx, rax
  0009f	48 8b c1	 mov	 rax, rcx
  000a2	48 8b c8	 mov	 rcx, rax
  000a5	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  000aa	88 44 24 30	 mov	 BYTE PTR tv188[rsp], al
  000ae	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000b6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b9	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000bd	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  000c5	48 03 d1	 add	 rdx, rcx
  000c8	48 8b ca	 mov	 rcx, rdx
  000cb	48 89 4c 24 38	 mov	 QWORD PTR tv146[rsp], rcx
  000d0	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  000d8	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  000db	48 63 52 04	 movsxd	 rdx, DWORD PTR [rdx+4]
  000df	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  000e7	4c 03 c2	 add	 r8, rdx
  000ea	49 8b d0	 mov	 rdx, r8
  000ed	48 8b ca	 mov	 rcx, rdx
  000f0	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  000f5	48 8b d0	 mov	 rdx, rax
  000f8	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  00100	e8 00 00 00 00	 call	 ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
  00105	48 8d 4c 24 70	 lea	 rcx, QWORD PTR $T4[rsp]
  0010a	48 8b f9	 mov	 rdi, rcx
  0010d	48 8b f0	 mov	 rsi, rax
  00110	b9 10 00 00 00	 mov	 ecx, 16
  00115	f3 a4		 rep movsb
  00117	f2 0f 10 84 24
	c8 00 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  00120	f2 0f 11 44 24
	28		 movsd	 QWORD PTR [rsp+40], xmm0
  00126	0f b6 44 24 30	 movzx	 eax, BYTE PTR tv188[rsp]
  0012b	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0012f	48 8b 44 24 38	 mov	 rax, QWORD PTR tv146[rsp]
  00134	4c 8b c8	 mov	 r9, rax
  00137	4c 8d 44 24 70	 lea	 r8, QWORD PTR $T4[rsp]
  0013c	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR $T6[rsp]
  00144	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Nput_fac$1[rsp]
  00149	e8 00 00 00 00	 call	 ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
  0014e	48 8b c8	 mov	 rcx, rax
  00151	e8 00 00 00 00	 call	 ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
  00156	0f b6 c0	 movzx	 eax, al
  00159	85 c0		 test	 eax, eax
  0015b	74 0b		 je	 SHORT $LN4@operator

; 413  :                 _State |= ios_base::badbit;

  0015d	8b 44 24 34	 mov	 eax, DWORD PTR _State$[rsp]
  00161	83 c8 04	 or	 eax, 4
  00164	89 44 24 34	 mov	 DWORD PTR _State$[rsp], eax
$LN4@operator:
  00168	eb 00		 jmp	 SHORT $LN2@operator
$LN9@operator:
$LN2@operator:

; 414  :             }
; 415  :             _CATCH_IO_END
; 416  :         }
; 417  : 
; 418  :         _Myios::setstate(_State);

  0016a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00172	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00175	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00179	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00181	48 03 c8	 add	 rcx, rax
  00184	48 8b c1	 mov	 rax, rcx
  00187	45 33 c0	 xor	 r8d, r8d
  0018a	8b 54 24 34	 mov	 edx, DWORD PTR _State$[rsp]
  0018e	48 8b c8	 mov	 rcx, rax
  00191	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 419  :         return *this;

  00196	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0019e	48 89 44 24 48	 mov	 QWORD PTR $T2[rsp], rax
  001a3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _Ok$[rsp]
  001a8	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  001ad	48 8b 44 24 48	 mov	 rax, QWORD PTR $T2[rsp]

; 420  :     }

  001b2	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  001b9	5f		 pop	 rdi
  001ba	5e		 pop	 rsi
  001bb	c3		 ret	 0
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
tv188 = 48
_State$ = 52
tv146 = 56
_Nput_fac$1 = 64
$T2 = 72
_Ok$ = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
this$ = 192
_Val$ = 200
?catch$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::catch$0

; 414  :             }
; 415  :             _CATCH_IO_END

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z$0:
  0000d	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00017	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0001b	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00022	48 03 c8	 add	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	41 b0 01	 mov	 r8b, 1
  0002b	ba 04 00 00 00	 mov	 edx, 4
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00038	90		 npad	 1
  00039	48 8d 05 00 00
	00 00		 lea	 rax, $LN9@catch$0
  00040	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
  00046	cc		 int	 3
?catch$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv188 = 48
_State$ = 52
tv146 = 56
_Nput_fac$1 = 64
$T2 = 72
_Ok$ = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
this$ = 192
_Val$ = 200
?catch$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::catch$0

; 415  :             _CATCH_IO_END

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z$0:
  0000d	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00014	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00017	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0001b	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00022	48 03 c8	 add	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	41 b0 01	 mov	 r8b, 1
  0002b	ba 04 00 00 00	 mov	 edx, 4
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00038	90		 npad	 1
  00039	48 8d 05 00 00
	00 00		 lea	 rax, $LN9@catch$0
  00040	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
  00046	cc		 int	 3
?catch$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
_TEXT	SEGMENT
this$ = 48
_Pfn$ = 56
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT

; 184  :         basic_ostream&(__cdecl* _Pfn)(basic_ostream&) ) { // call basic_ostream manipulator

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 185  :         return _Pfn(*this);

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	ff 54 24 38	 call	 QWORD PTR _Pfn$[rsp]

; 186  :     }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT

; 155  :     void __CLR_OR_THIS_CALL _Osfx() { // perform any wrapup

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 156  :         _TRY_BEGIN
; 157  :         if (this->good() && this->flags() & ios_base::unitbuf) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001a	48 03 c8	 add	 rcx, rax
  0001d	48 8b c1	 mov	 rax, rcx
  00020	48 8b c8	 mov	 rcx, rax
  00023	e8 00 00 00 00	 call	 ?good@ios_base@std@@QEBA_NXZ ; std::ios_base::good
  00028	0f b6 c0	 movzx	 eax, al
  0002b	85 c0		 test	 eax, eax
  0002d	74 7a		 je	 SHORT $LN3@Osfx
  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00037	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00040	48 03 c8	 add	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0004e	83 e0 02	 and	 eax, 2
  00051	85 c0		 test	 eax, eax
  00053	74 54		 je	 SHORT $LN3@Osfx

; 158  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00055	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0005a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00061	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00066	48 03 c8	 add	 rcx, rax
  00069	48 8b c1	 mov	 rax, rcx
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00074	48 8b c8	 mov	 rcx, rax
  00077	e8 00 00 00 00	 call	 ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
  0007c	83 f8 ff	 cmp	 eax, -1
  0007f	75 28		 jne	 SHORT $LN3@Osfx

; 159  :                 _Myios::setstate(ios_base::badbit);

  00081	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00086	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00089	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0008d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00092	48 03 c8	 add	 rcx, rax
  00095	48 8b c1	 mov	 rax, rcx
  00098	45 33 c0	 xor	 r8d, r8d
  0009b	ba 04 00 00 00	 mov	 edx, 4
  000a0	48 8b c8	 mov	 rcx, rax
  000a3	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000a8	90		 npad	 1
$LN3@Osfx:
  000a9	eb 00		 jmp	 SHORT $LN8@Osfx
$LN9@Osfx:
$LN8@Osfx:

; 160  :             }
; 161  :         }
; 162  :         _CATCH_ALL
; 163  :         _CATCH_END
; 164  :     }

  000ab	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000af	c3		 ret	 0
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::_Osfx'::`1'::catch$0

; 160  :             }
; 161  :         }
; 162  :         _CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ$0:

; 160  :             }
; 161  :         }
; 162  :         _CATCH_ALL
; 163  :         _CATCH_END

  0000d	48 8d 05 00 00
	00 00		 lea	 rax, $LN9@catch$0
  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5d		 pop	 rbp
  00019	c3		 ret	 0
  0001a	cc		 int	 3
?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::_Osfx'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::_Osfx'::`1'::catch$0

; 162  :         _CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ$0:

; 163  :         _CATCH_END

  0000d	48 8d 05 00 00
	00 00		 lea	 rax, $LN9@catch$0
  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5d		 pop	 rbp
  00019	c3		 ret	 0
  0001a	cc		 int	 3
?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::_Osfx'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 80
_Byte$ = 88
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT

; 114  :     _Elem __CLR_OR_THIS_CALL widen(char _Byte) const { // convert _Byte to character using imbued locale

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 115  :         return _STD use_facet<_Ctype>(getloc()).widen(_Byte);

  0000d	48 8d 54 24 28	 lea	 rdx, QWORD PTR $T2[rsp]
  00012	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  00024	0f b6 54 24 58	 movzx	 edx, BYTE PTR _Byte$[rsp]
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ?widen@?$ctype@D@std@@QEBADD@Z ; std::ctype<char>::widen
  00031	88 44 24 20	 mov	 BYTE PTR $T1[rsp], al
  00035	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  0003a	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  0003f	0f b6 44 24 20	 movzx	 eax, BYTE PTR $T1[rsp]

; 116  :     }

  00044	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00048	c3		 ret	 0
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
_TEXT	SEGMENT
this$ = 8
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT

; 100  :     _Elem __CLR_OR_THIS_CALL fill() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 101  :         return _Fillch;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 40 58	 movzx	 eax, BYTE PTR [rax+88]

; 102  :     }

  0000e	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT

; 79   :     _NODISCARD _Mysb* __CLR_OR_THIS_CALL rdbuf() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 80   :         return _Mystrbuf;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]

; 81   :     }

  0000e	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT

; 69   :     _Myos* __CLR_OR_THIS_CALL tie() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 70   :         return _Tiestr;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]

; 71   :     }

  0000e	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
_TEXT	SEGMENT
this$ = 48
_State$ = 56
_Reraise$ = 64
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT

; 52   :         iostate _State, bool _Reraise = false) { // merge _State into state, possibly reraise exception

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 53   :         clear(rdstate() | _State, _Reraise);

  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?rdstate@ios_base@std@@QEBAHXZ ; std::ios_base::rdstate
  0001c	0b 44 24 38	 or	 eax, DWORD PTR _State$[rsp]
  00020	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR _Reraise$[rsp]
  00026	8b d0		 mov	 edx, eax
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear

; 54   :     }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
_TEXT	SEGMENT
tv72 = 32
this$ = 64
_State$ = 72
_Reraise$ = 80
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT

; 40   :     void __CLR_OR_THIS_CALL clear(iostate _State = goodbit, bool _Reraise = false) {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 41   :         // set state, possibly reraise exception
; 42   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::_Iostate{} : ios_base::badbit), _Reraise);

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  0001c	74 0a		 je	 SHORT $LN3@clear
  0001e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
  00026	eb 08		 jmp	 SHORT $LN4@clear
$LN3@clear:
  00028	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR tv72[rsp], 4
$LN4@clear:
  00030	8b 44 24 20	 mov	 eax, DWORD PTR tv72[rsp]
  00034	8b 4c 24 48	 mov	 ecx, DWORD PTR _State$[rsp]
  00038	0b c8		 or	 ecx, eax
  0003a	8b c1		 mov	 eax, ecx
  0003c	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR _Reraise$[rsp]
  00042	8b d0		 mov	 edx, eax
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00049	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QEAAXH_N@Z ; std::ios_base::clear

; 43   :     }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\_main\_univer\Documents\Chelgu\PP\Prog\C\rep\15-Cpp-Classes\CppExamples\Features\main.cpp
;	COMDAT ?print@complex@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?print@complex@@QEAAXXZ PROC				; complex::print, COMDAT

; 10   : 	{

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 11   : 		std::cout << re << "," << im << std::endl;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	f2 0f 10 08	 movsd	 xmm1, QWORD PTR [rax]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  00019	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
  00025	48 8b c8	 mov	 rcx, rax
  00028	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00032	f2 0f 10 49 08	 movsd	 xmm1, QWORD PTR [rcx+8]
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<

; 12   : 	}

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
?print@complex@@QEAAXXZ ENDP				; complex::print
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?getloc@ios_base@std@@QEBA?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT

; 372  :     _NODISCARD locale __CLR_OR_THIS_CALL getloc() const { // get locale

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 373  :         return *_Ploc;

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 50 40	 mov	 rdx, QWORD PTR [rax+64]
  00017	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0001c	e8 00 00 00 00	 call	 ??0locale@std@@QEAA@AEBV01@@Z ; std::locale::locale
  00021	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  :     }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ?width@ios_base@std@@QEAA_J_J@Z
_TEXT	SEGMENT
_Oldwidth$ = 0
this$ = 32
_Newwidth$ = 40
?width@ios_base@std@@QEAA_J_J@Z PROC			; std::ios_base::width, COMDAT

; 366  :     streamsize __CLR_OR_THIS_CALL width(streamsize _Newwidth) { // set width to argument

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 367  :         const streamsize _Oldwidth = _Wide;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00017	48 89 04 24	 mov	 QWORD PTR _Oldwidth$[rsp], rax

; 368  :         _Wide                      = _Newwidth;

  0001b	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Newwidth$[rsp]
  00025	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 369  :         return _Oldwidth;

  00029	48 8b 04 24	 mov	 rax, QWORD PTR _Oldwidth$[rsp]

; 370  :     }

  0002d	48 83 c4 18	 add	 rsp, 24
  00031	c3		 ret	 0
?width@ios_base@std@@QEAA_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ?width@ios_base@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 8
?width@ios_base@std@@QEBA_JXZ PROC			; std::ios_base::width, COMDAT

; 362  :     _NODISCARD streamsize __CLR_OR_THIS_CALL width() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 363  :         return _Wide;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]

; 364  :     }

  0000e	c3		 ret	 0
?width@ios_base@std@@QEBA_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 8
?precision@ios_base@std@@QEBA_JXZ PROC			; std::ios_base::precision, COMDAT

; 352  :     _NODISCARD streamsize __CLR_OR_THIS_CALL precision() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 353  :         return _Prec;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]

; 354  :     }

  0000e	c3		 ret	 0
?precision@ios_base@std@@QEBA_JXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ?flags@ios_base@std@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?flags@ios_base@std@@QEBAHXZ PROC			; std::ios_base::flags, COMDAT

; 325  :     _NODISCARD fmtflags __CLR_OR_THIS_CALL flags() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 326  :         return _Fmtfl;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 40 18	 mov	 eax, DWORD PTR [rax+24]

; 327  :     }

  0000d	c3		 ret	 0
?flags@ios_base@std@@QEBAHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ?good@ios_base@std@@QEBA_NXZ
_TEXT	SEGMENT
tv67 = 32
this$ = 64
?good@ios_base@std@@QEBA_NXZ PROC			; std::ios_base::good, COMDAT

; 294  :     _NODISCARD bool __CLR_OR_THIS_CALL good() const {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 295  :         return rdstate() == ios_base::goodbit;

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?rdstate@ios_base@std@@QEBAHXZ ; std::ios_base::rdstate
  00013	85 c0		 test	 eax, eax
  00015	75 0a		 jne	 SHORT $LN3@good
  00017	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  0001f	eb 08		 jmp	 SHORT $LN4@good
$LN3@good:
  00021	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN4@good:
  00029	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv67[rsp]

; 296  :     }

  0002e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00032	c3		 ret	 0
?good@ios_base@std@@QEBA_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?rdstate@ios_base@std@@QEBAHXZ PROC			; std::ios_base::rdstate, COMDAT

; 275  :     _NODISCARD iostate __CLR_OR_THIS_CALL rdstate() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 276  :         return _Mystate;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]

; 277  :     }

  0000d	c3		 ret	 0
?rdstate@ios_base@std@@QEBAHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QEAAXH_N@Z
_TEXT	SEGMENT
_Filtered$ = 32
_Msg$1 = 40
$T2 = 48
$T3 = 64
this$ = 128
_State$ = 136
_Reraise$ = 144
?clear@ios_base@std@@QEAAXH_N@Z PROC			; std::ios_base::clear, COMDAT

; 243  :     void __CLR_OR_THIS_CALL clear(iostate _State, bool _Reraise) { // set state, possibly reraise exception

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 244  :         _State &= _Statmask;

  00012	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR _State$[rsp]
  00019	83 e0 17	 and	 eax, 23
  0001c	89 84 24 88 00
	00 00		 mov	 DWORD PTR _State$[rsp], eax

; 245  :         _Mystate             = _State;

  00023	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0002b	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR _State$[rsp]
  00032	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 246  :         const auto _Filtered = _State & _Except;

  00035	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0003d	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00040	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR _State$[rsp]
  00047	23 c8		 and	 ecx, eax
  00049	8b c1		 mov	 eax, ecx
  0004b	89 44 24 20	 mov	 DWORD PTR _Filtered$[rsp], eax

; 247  :         if (_Filtered) {

  0004f	83 7c 24 20 00	 cmp	 DWORD PTR _Filtered$[rsp], 0
  00054	0f 84 85 00 00
	00		 je	 $LN2@clear

; 248  :             if (_Reraise) {

  0005a	0f b6 84 24 90
	00 00 00	 movzx	 eax, BYTE PTR _Reraise$[rsp]
  00062	85 c0		 test	 eax, eax
  00064	74 09		 je	 SHORT $LN3@clear

; 249  :                 _RERAISE;

  00066	33 d2		 xor	 edx, edx
  00068	33 c9		 xor	 ecx, ecx
  0006a	e8 00 00 00 00	 call	 _CxxThrowException
$LN3@clear:

; 250  :             }
; 251  : 
; 252  :             const char* _Msg;
; 253  :             if (_Filtered & ios_base::badbit) {

  0006f	8b 44 24 20	 mov	 eax, DWORD PTR _Filtered$[rsp]
  00073	83 e0 04	 and	 eax, 4
  00076	85 c0		 test	 eax, eax
  00078	74 0e		 je	 SHORT $LN4@clear

; 254  :                 _Msg = "ios_base::badbit set";

  0007a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00081	48 89 44 24 28	 mov	 QWORD PTR _Msg$1[rsp], rax
  00086	eb 25		 jmp	 SHORT $LN5@clear
$LN4@clear:

; 255  :             } else if (_Filtered & ios_base::failbit) {

  00088	8b 44 24 20	 mov	 eax, DWORD PTR _Filtered$[rsp]
  0008c	83 e0 02	 and	 eax, 2
  0008f	85 c0		 test	 eax, eax
  00091	74 0e		 je	 SHORT $LN6@clear

; 256  :                 _Msg = "ios_base::failbit set";

  00093	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0009a	48 89 44 24 28	 mov	 QWORD PTR _Msg$1[rsp], rax

; 257  :             } else {

  0009f	eb 0c		 jmp	 SHORT $LN7@clear
$LN6@clear:

; 258  :                 _Msg = "ios_base::eofbit set";

  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  000a8	48 89 44 24 28	 mov	 QWORD PTR _Msg$1[rsp], rax
$LN7@clear:
$LN5@clear:

; 259  :             }
; 260  : 
; 261  :             _THROW(failure(_Msg));

  000ad	ba 01 00 00 00	 mov	 edx, 1
  000b2	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  000b7	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  000bc	4c 8b c0	 mov	 r8, rax
  000bf	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Msg$1[rsp]
  000c4	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T3[rsp]
  000c9	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z ; std::ios_base::failure::failure
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI5?AVfailure@ios_base@std@@
  000d5	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T3[rsp]
  000da	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@clear:
$LN8@clear:

; 262  :         }
; 263  :     }

  000df	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000e3	c3		 ret	 0
?clear@ios_base@std@@QEAAXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gfailure@ios_base@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gfailure@ios_base@std@@UEAAPEAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1failure@ios_base@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gfailure@ios_base@std@@UEAAPEAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0failure@ios_base@std@@QEAA@AEBV012@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0failure@ios_base@std@@QEAA@AEBV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0system_error@std@@QEAA@AEBV01@@Z
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7failure@ios_base@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0failure@ios_base@std@@QEAA@AEBV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1failure@ios_base@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1failure@ios_base@std@@UEAA@XZ PROC			; std::ios_base::failure::~failure, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1system_error@std@@UEAA@XZ
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1failure@ios_base@std@@UEAA@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
_Message$ = 88
_Errcode$ = 96
??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z PROC ; std::ios_base::failure::failure, COMDAT

; 204  :         explicit failure(const char* _Message, const error_code& _Errcode = make_error_code(io_errc::stream))

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 205  :             : system_error(_Errcode, _Message) {} // construct with message

  00015	48 8d 44 24 20	 lea	 rax, QWORD PTR $T1[rsp]
  0001a	48 8b f8	 mov	 rdi, rax
  0001d	48 8b 74 24 60	 mov	 rsi, QWORD PTR _Errcode$[rsp]
  00022	b9 10 00 00 00	 mov	 ecx, 16
  00027	f3 a4		 rep movsb
  00029	4c 8b 44 24 58	 mov	 r8, QWORD PTR _Message$[rsp]
  0002e	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00033	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00038	e8 00 00 00 00	 call	 ??0system_error@std@@QEAA@Verror_code@1@PEBD@Z ; std::system_error::system_error
  0003d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7failure@ios_base@std@@6B@
  00049	48 89 08	 mov	 QWORD PTR [rax], rcx
  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	5f		 pop	 rdi
  00056	5e		 pop	 rsi
  00057	c3		 ret	 0
??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z ENDP ; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z PROC ; std::_Adl_verify_range<char *,char const *>, COMDAT

; 1307 : constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1308 :     // check that [_First, _Last) forms an iterator range
; 1309 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1310 :         _Verify_range(_First, _Last);
; 1311 :     }
; 1312 : }

  0000a	c3		 ret	 0
??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z ENDP ; std::_Adl_verify_range<char *,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Lock$1 = 32
_Psave$2 = 40
_Pfmod$3 = 48
_Pf$4 = 56
_Psave_guard$5 = 64
_Id$6 = 72
$T7 = 80
_Loc$ = 112
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 428  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 429  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00009	33 d2		 xor	 edx, edx
  0000b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00010	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 430  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::ctype<char> >::_Psave
  0001c	48 89 44 24 28	 mov	 QWORD PTR _Psave$2[rsp], rax

; 431  : 
; 432  :     const size_t _Id         = _Facet::id;

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
  00028	e8 00 00 00 00	 call	 ??Bid@locale@std@@QEAA_KXZ ; std::locale::id::operator unsigned __int64
  0002d	48 89 44 24 48	 mov	 QWORD PTR _Id$6[rsp], rax

; 433  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);

  00032	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Id$6[rsp]
  00037	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Loc$[rsp]
  0003c	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
  00041	48 89 44 24 38	 mov	 QWORD PTR _Pf$4[rsp], rax

; 434  : 
; 435  :     if (!_Pf) {

  00046	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Pf$4[rsp], 0
  0004c	0f 85 8d 00 00
	00		 jne	 $LN2@use_facet

; 436  :         if (_Psave) {

  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Psave$2[rsp], 0
  00058	74 0c		 je	 SHORT $LN3@use_facet

; 437  :             _Pf = _Psave; // lazy facet already allocated

  0005a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  0005f	48 89 44 24 38	 mov	 QWORD PTR _Pf$4[rsp], rax
  00064	eb 79		 jmp	 SHORT $LN2@use_facet
$LN3@use_facet:

; 438  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  00066	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Loc$[rsp]
  0006b	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Psave$2[rsp]
  00070	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::ctype<char>::_Getcat
  00075	48 83 f8 ff	 cmp	 rax, -1
  00079	75 07		 jne	 SHORT $LN5@use_facet

; 439  : #if _HAS_EXCEPTIONS
; 440  :             _Throw_bad_cast(); // lazy disallowed

  0007b	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast

; 441  : #else // _HAS_EXCEPTIONS
; 442  :             _CSTD abort(); // lazy disallowed
; 443  : #endif // _HAS_EXCEPTIONS
; 444  :         } else { // queue up lazy facet for destruction

  00080	eb 5d		 jmp	 SHORT $LN2@use_facet
$LN5@use_facet:

; 445  :             auto _Pfmod = const_cast<locale::facet*>(_Psave);

  00082	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  00087	48 89 44 24 30	 mov	 QWORD PTR _Pfmod$3[rsp], rax

; 446  :             unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base*>(_Pfmod));

  0008c	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Pfmod$3[rsp]
  00091	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Psave_guard$5[rsp]
  00096	e8 00 00 00 00	 call	 ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@PEAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>

; 447  : 
; 448  : #if defined(_M_CEE)
; 449  :             _Facet_Register_m(_Pfmod);
; 450  : #else // defined(_M_CEE)
; 451  :             _Facet_Register(_Pfmod);

  0009b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Pfmod$3[rsp]
  000a0	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register

; 452  : #endif // defined(_M_CEE)
; 453  : 
; 454  :             _Pfmod->_Incref();

  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR _Pfmod$3[rsp]
  000aa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ad	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Pfmod$3[rsp]
  000b2	ff 50 08	 call	 QWORD PTR [rax+8]

; 455  :             _Facetptr<_Facet>::_Psave = _Psave;

  000b5	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  000ba	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::ctype<char> >::_Psave

; 456  :             _Pf                       = _Psave;

  000c1	48 8b 44 24 28	 mov	 rax, QWORD PTR _Psave$2[rsp]
  000c6	48 89 44 24 38	 mov	 QWORD PTR _Pf$4[rsp], rax

; 457  : 
; 458  :             (void) _Psave_guard.release();

  000cb	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Psave_guard$5[rsp]
  000d0	e8 00 00 00 00	 call	 ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAAPEAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 459  :         }

  000d5	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Psave_guard$5[rsp]
  000da	e8 00 00 00 00	 call	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 460  :     }
; 461  : 
; 462  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  000df	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pf$4[rsp]
  000e4	48 89 44 24 50	 mov	 QWORD PTR $T7[rsp], rax
  000e9	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  000ee	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  000f3	48 8b 44 24 50	 mov	 rax, QWORD PTR $T7[rsp]

; 463  :     _END_LOCK()
; 464  : } // end of use_facet body

  000f8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000fc	c3		 ret	 0
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$ctype@D@std@@MEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$ctype@D@std@@MEAAPEAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1?$ctype@D@std@@MEAA@XZ ; std::ctype<char>::~ctype<char>
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G?$ctype@D@std@@MEAAPEAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
__formal$ = 72
_Dest$ = 80
?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z PROC	; std::ctype<char>::do_narrow, COMDAT

; 2810 :         char* _Dest) const { // narrow elements in [_First, _Last) to chars

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2811 :         _Adl_verify_range(_First, _Last);

  00018	48 8d 54 24 40	 lea	 rdx, QWORD PTR _Last$[rsp]
  0001d	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _First$[rsp]
  00022	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>

; 2812 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00027	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Last$[rsp]
  00031	48 2b c8	 sub	 rcx, rax
  00034	48 8b c1	 mov	 rax, rcx
  00037	4c 8b c0	 mov	 r8, rax
  0003a	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First$[rsp]
  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00044	e8 00 00 00 00	 call	 memcpy

; 2813 :         return _Last;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR _Last$[rsp]

; 2814 :     }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z ENDP	; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MEBADDD@Z
_TEXT	SEGMENT
this$ = 8
_Ch$ = 16
__formal$ = 24
?do_narrow@?$ctype@D@std@@MEBADDD@Z PROC		; std::ctype<char>::do_narrow, COMDAT

; 2805 :     virtual _Elem __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char) const { // narrow char

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2806 :         return _Ch;

  0000e	0f b6 44 24 10	 movzx	 eax, BYTE PTR _Ch$[rsp]

; 2807 :     }

  00013	c3		 ret	 0
?do_narrow@?$ctype@D@std@@MEBADDD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
_Dest$ = 72
?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z PROC	; std::ctype<char>::do_widen, COMDAT

; 2799 :         const char* _First, const char* _Last, _Elem* _Dest) const { // widen chars in [_First, _Last)

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2800 :         _Adl_verify_range(_First, _Last);

  00018	48 8d 54 24 40	 lea	 rdx, QWORD PTR _Last$[rsp]
  0001d	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _First$[rsp]
  00022	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ; std::_Adl_verify_range<char const *,char const *>

; 2801 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00027	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Last$[rsp]
  00031	48 2b c8	 sub	 rcx, rax
  00034	48 8b c1	 mov	 rax, rcx
  00037	4c 8b c0	 mov	 r8, rax
  0003a	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First$[rsp]
  0003f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00044	e8 00 00 00 00	 call	 memcpy

; 2802 :         return _Last;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR _Last$[rsp]

; 2803 :     }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z ENDP	; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MEBADD@Z
_TEXT	SEGMENT
this$ = 8
_Byte$ = 16
?do_widen@?$ctype@D@std@@MEBADD@Z PROC			; std::ctype<char>::do_widen, COMDAT

; 2794 :     virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const { // widen char

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2795 :         return _Byte;

  00009	0f b6 44 24 10	 movzx	 eax, BYTE PTR _Byte$[rsp]

; 2796 :     }

  0000e	c3		 ret	 0
?do_widen@?$ctype@D@std@@MEBADD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z PROC	; std::ctype<char>::do_toupper, COMDAT

; 2785 :         const _Elem* _Last) const { // convert [_First, _Last) in place to upper case

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2786 :         _Adl_verify_range(_First, _Last);

  00013	48 8d 54 24 40	 lea	 rdx, QWORD PTR _Last$[rsp]
  00018	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _First$[rsp]
  0001d	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z ; std::_Adl_verify_range<char *,char const *>

; 2787 :         for (; _First != _Last; ++_First) {

  00022	eb 0d		 jmp	 SHORT $LN4@do_toupper
$LN2@do_toupper:
  00024	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]
  00029	48 ff c0	 inc	 rax
  0002c	48 89 44 24 38	 mov	 QWORD PTR _First$[rsp], rax
$LN4@do_toupper:
  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR _Last$[rsp]
  00036	48 39 44 24 38	 cmp	 QWORD PTR _First$[rsp], rax
  0003b	74 22		 je	 SHORT $LN3@do_toupper

; 2788 :             *_First = static_cast<_Elem>(_Toupper(static_cast<unsigned char>(*_First), &_Ctype));

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 83 c0 10	 add	 rax, 16
  00046	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0004b	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0004e	48 8b d0	 mov	 rdx, rax
  00051	e8 00 00 00 00	 call	 _Toupper
  00056	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0005b	88 01		 mov	 BYTE PTR [rcx], al

; 2789 :         }

  0005d	eb c5		 jmp	 SHORT $LN2@do_toupper
$LN3@do_toupper:

; 2790 : 
; 2791 :         return _First;

  0005f	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]

; 2792 :     }

  00064	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00068	c3		 ret	 0
?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z ENDP	; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MEBADD@Z
_TEXT	SEGMENT
this$ = 48
_Ch$ = 56
?do_toupper@?$ctype@D@std@@MEBADD@Z PROC		; std::ctype<char>::do_toupper, COMDAT

; 2780 :     virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const { // convert element to upper case

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2781 :         return static_cast<_Elem>(_Toupper(static_cast<unsigned char>(_Ch), &_Ctype));

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00012	48 83 c0 10	 add	 rax, 16
  00016	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR _Ch$[rsp]
  0001b	48 8b d0	 mov	 rdx, rax
  0001e	e8 00 00 00 00	 call	 _Toupper

; 2782 :     }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
?do_toupper@?$ctype@D@std@@MEBADD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z PROC	; std::ctype<char>::do_tolower, COMDAT

; 2771 :         const _Elem* _Last) const { // convert [_First, _Last) in place to lower case

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2772 :         _Adl_verify_range(_First, _Last);

  00013	48 8d 54 24 40	 lea	 rdx, QWORD PTR _Last$[rsp]
  00018	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _First$[rsp]
  0001d	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PEADPEBD@std@@YAXAEBQEADAEBQEBD@Z ; std::_Adl_verify_range<char *,char const *>

; 2773 :         for (; _First != _Last; ++_First) {

  00022	eb 0d		 jmp	 SHORT $LN4@do_tolower
$LN2@do_tolower:
  00024	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]
  00029	48 ff c0	 inc	 rax
  0002c	48 89 44 24 38	 mov	 QWORD PTR _First$[rsp], rax
$LN4@do_tolower:
  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR _Last$[rsp]
  00036	48 39 44 24 38	 cmp	 QWORD PTR _First$[rsp], rax
  0003b	74 22		 je	 SHORT $LN3@do_tolower

; 2774 :             *_First = static_cast<_Elem>(_Tolower(static_cast<unsigned char>(*_First), &_Ctype));

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 83 c0 10	 add	 rax, 16
  00046	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0004b	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0004e	48 8b d0	 mov	 rdx, rax
  00051	e8 00 00 00 00	 call	 _Tolower
  00056	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0005b	88 01		 mov	 BYTE PTR [rcx], al

; 2775 :         }

  0005d	eb c5		 jmp	 SHORT $LN2@do_tolower
$LN3@do_tolower:

; 2776 : 
; 2777 :         return _First;

  0005f	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]

; 2778 :     }

  00064	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00068	c3		 ret	 0
?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z ENDP	; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MEBADD@Z
_TEXT	SEGMENT
this$ = 48
_Ch$ = 56
?do_tolower@?$ctype@D@std@@MEBADD@Z PROC		; std::ctype<char>::do_tolower, COMDAT

; 2766 :     virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const { // convert element to lower case

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2767 :         return static_cast<_Elem>(_Tolower(static_cast<unsigned char>(_Ch), &_Ctype));

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00012	48 83 c0 10	 add	 rax, 16
  00016	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR _Ch$[rsp]
  0001b	48 8b d0	 mov	 rdx, rax
  0001e	e8 00 00 00 00	 call	 _Tolower

; 2768 :     }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
?do_tolower@?$ctype@D@std@@MEBADD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?_Tidy@?$ctype@D@std@@IEAAXXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
?_Tidy@?$ctype@D@std@@IEAAXXZ PROC			; std::ctype<char>::_Tidy, COMDAT

; 2756 :     void __CLR_OR_THIS_CALL _Tidy() noexcept { // free any allocated storage

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2757 :         if (0 < _Ctype._Delfl) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  00012	7e 10		 jle	 SHORT $LN2@Tidy

; 2758 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0001d	e8 00 00 00 00	 call	 free
  00022	eb 23		 jmp	 SHORT $LN3@Tidy
$LN2@Tidy:

; 2759 :         } else if (_Ctype._Delfl < 0) {

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00029	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  0002d	7d 18		 jge	 SHORT $LN4@Tidy

; 2760 :             delete[] _Ctype._Table;

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00038	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00042	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN4@Tidy:
$LN3@Tidy:

; 2761 :         }
; 2762 : 
; 2763 :         _CSTD free(_Ctype._LocaleName);

  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00050	e8 00 00 00 00	 call	 free

; 2764 :     }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IEAAXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 96
_Lobj$ = 104
?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z PROC	; std::ctype<char>::_Init, COMDAT

; 2752 :     void __CLR_OR_THIS_CALL _Init(const _Locinfo& _Lobj) { // initialize from _Lobj

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2753 :         _Ctype = _Lobj._Getctype();

  00010	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00015	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  0001a	e8 00 00 00 00	 call	 ?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ ; std::_Locinfo::_Getctype
  0001f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00024	48 8d 79 10	 lea	 rdi, QWORD PTR [rcx+16]
  00028	48 8b f0	 mov	 rsi, rax
  0002b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00030	f3 a4		 rep movsb

; 2754 :     }

  00032	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00036	5f		 pop	 rdi
  00037	5e		 pop	 rsi
  00038	c3		 ret	 0
?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z ENDP	; std::ctype<char>::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$ctype@D@std@@MEAA@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT

; 2748 :     virtual __CLR_OR_THIS_CALL ~ctype() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$ctype@D@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2749 :         _Tidy();

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Tidy@?$ctype@D@std@@IEAAXXZ ; std::ctype<char>::_Tidy

; 2750 :     }

  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1ctype_base@std@@UEAA@XZ ; std::ctype_base::~ctype_base
  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??1?$ctype@D@std@@MEAA@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv86 = 48
$T3 = 56
_Ppf$ = 176
_Ploc$ = 184
?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2729 :     static size_t __CLRCALL_OR_CDECL _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00011	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 2730 :         if (_Ppf && !*_Ppf) {

  00019	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR _Ppf$[rsp], 0
  00022	0f 84 92 00 00
	00		 je	 $LN2@Getcat
  00028	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  00030	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00034	0f 85 80 00 00
	00		 jne	 $LN2@Getcat

; 2731 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->c_str()));

  0003a	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0003f	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00044	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00049	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T2[rsp], 0
  0004f	74 36		 je	 SHORT $LN4@Getcat
  00051	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _Ploc$[rsp]
  00059	e8 00 00 00 00	 call	 ?c_str@locale@std@@QEBAPEBDXZ ; std::locale::c_str
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T3[rsp]
  00066	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QEAA@PEBD@Z ; std::_Locinfo::_Locinfo
  0006b	83 4c 24 20 01	 or	 DWORD PTR $T1[rsp], 1
  00070	45 33 c0	 xor	 r8d, r8d
  00073	48 8b d0	 mov	 rdx, rax
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T2[rsp]
  0007b	e8 00 00 00 00	 call	 ??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z ; std::ctype<char>::ctype<char>
  00080	48 89 44 24 30	 mov	 QWORD PTR tv86[rsp], rax
  00085	eb 09		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  00087	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv86[rsp], 0
$LN5@Getcat:
  00090	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  00098	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv86[rsp]
  0009d	48 89 08	 mov	 QWORD PTR [rax], rcx
  000a0	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  000a4	83 e0 01	 and	 eax, 1
  000a7	85 c0		 test	 eax, eax
  000a9	74 0f		 je	 SHORT $LN2@Getcat
  000ab	83 64 24 20 fe	 and	 DWORD PTR $T1[rsp], -2
  000b0	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T3[rsp]
  000b5	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 2732 :         }
; 2733 : 
; 2734 :         return _X_CTYPE;

  000ba	b8 02 00 00 00	 mov	 eax, 2

; 2735 :     }

  000bf	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000c6	c3		 ret	 0
?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ENDP ; std::ctype<char>::_Getcat
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z
_TEXT	SEGMENT
this$ = 48
_Lobj$ = 56
_Refs$ = 64
??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z PROC		; std::ctype<char>::ctype<char>, COMDAT

; 2725 :     __CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0) : ctype_base(_Refs) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Refs$[rsp]
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ??0ctype_base@std@@QEAA@_K@Z ; std::ctype_base::ctype_base
  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$ctype@D@std@@6B@
  0002e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2726 :         _Init(_Lobj);

  00031	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Lobj$[rsp]
  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z ; std::ctype<char>::_Init

; 2727 :     }

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00049	c3		 ret	 0
??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z ENDP		; std::ctype<char>::ctype<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
_Dest$ = 72
?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z PROC		; std::ctype<char>::widen, COMDAT

; 2693 :         _Elem* _Dest) const { // widen chars in [_First, _Last)

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2694 :         return do_widen(_First, _Last, _Dest);

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Dest$[rsp]
  00025	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Last$[rsp]
  0002a	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First$[rsp]
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00034	ff 50 38	 call	 QWORD PTR [rax+56]

; 2695 :     }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z ENDP		; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QEBADD@Z
_TEXT	SEGMENT
this$ = 48
_Byte$ = 56
?widen@?$ctype@D@std@@QEBADD@Z PROC			; std::ctype<char>::widen, COMDAT

; 2688 :     _Elem __CLR_OR_THIS_CALL widen(char _Byte) const { // widen char

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2689 :         return do_widen(_Byte);

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00012	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00015	0f b6 54 24 38	 movzx	 edx, BYTE PTR _Byte$[rsp]
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	ff 50 40	 call	 QWORD PTR [rax+64]

; 2690 :     }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
?widen@?$ctype@D@std@@QEBADD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gctype_base@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gctype_base@std@@UEAAPEAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1ctype_base@std@@UEAA@XZ ; std::ctype_base::~ctype_base
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gctype_base@std@@UEAAPEAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??1ctype_base@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1ctype_base@std@@UEAA@XZ PROC				; std::ctype_base::~ctype_base, COMDAT

; 2381 :     __CLR_OR_THIS_CALL ~ctype_base() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ctype_base@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
??1ctype_base@std@@UEAA@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??0ctype_base@std@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 48
_Refs$ = 56
??0ctype_base@std@@QEAA@_K@Z PROC			; std::ctype_base::ctype_base, COMDAT

; 2379 :     __CLR_OR_THIS_CALL ctype_base(size_t _Refs = 0) : locale::facet(_Refs) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Refs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0facet@locale@std@@IEAA@_K@Z ; std::locale::facet::facet
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ctype_base@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0ctype_base@std@@QEAA@_K@Z ENDP			; std::ctype_base::ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z PROC	; std::_Adl_verify_range<char const *,char const *>, COMDAT

; 1307 : constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1308 :     // check that [_First, _Last) forms an iterator range
; 1309 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1310 :         _Verify_range(_First, _Last);
; 1311 :     }
; 1312 : }

  0000a	c3		 ret	 0
??$_Adl_verify_range@PEBDPEBD@std@@YAXAEBQEBD0@Z ENDP	; std::_Adl_verify_range<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
_TEXT	SEGMENT
tv71 = 32
_Facptr$ = 40
_Ptr0$ = 48
this$ = 80
_Id$ = 88
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z PROC	; std::locale::_Getfacet, COMDAT

; 373  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 374  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00017	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0001b	48 39 44 24 58	 cmp	 QWORD PTR _Id$[rsp], rax
  00020	73 1d		 jae	 SHORT $LN6@Getfacet
  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0002f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Id$[rsp]
  00034	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00038	48 89 44 24 20	 mov	 QWORD PTR tv71[rsp], rax
  0003d	eb 09		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  0003f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR tv71[rsp], 0
$LN7@Getfacet:
  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR tv71[rsp]
  0004d	48 89 44 24 28	 mov	 QWORD PTR _Facptr$[rsp], rax

; 375  :         if (_Facptr || !_Ptr->_Xparent) {

  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Facptr$[rsp], 0
  00058	75 11		 jne	 SHORT $LN3@Getfacet
  0005a	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0005f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00063	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  00067	85 c0		 test	 eax, eax
  00069	75 07		 jne	 SHORT $LN2@Getfacet
$LN3@Getfacet:

; 376  :             return _Facptr; // found facet or not transparent

  0006b	48 8b 44 24 28	 mov	 rax, QWORD PTR _Facptr$[rsp]
  00070	eb 30		 jmp	 SHORT $LN1@Getfacet
$LN2@Getfacet:

; 377  :         }
; 378  : 
; 379  :         // look in current locale
; 380  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  00072	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00077	48 89 44 24 30	 mov	 QWORD PTR _Ptr0$[rsp], rax

; 381  :         if (_Id < _Ptr0->_Facetcount) {

  0007c	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ptr0$[rsp]
  00081	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00085	48 39 44 24 58	 cmp	 QWORD PTR _Id$[rsp], rax
  0008a	73 14		 jae	 SHORT $LN4@Getfacet

; 382  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  0008c	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ptr0$[rsp]
  00091	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00095	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Id$[rsp]
  0009a	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0009e	eb 02		 jmp	 SHORT $LN1@Getfacet
$LN4@Getfacet:

; 383  :         }
; 384  : 
; 385  :         return nullptr; // no entry in current locale

  000a0	33 c0		 xor	 eax, eax
$LN1@Getfacet:

; 386  :     }

  000a2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a6	c3		 ret	 0
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ENDP	; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?c_str@locale@std@@QEBAPEBDXZ
_TEXT	SEGMENT
tv70 = 32
this$ = 64
?c_str@locale@std@@QEBAPEBDXZ PROC			; std::locale::c_str, COMDAT

; 369  :     _Ret_z_ const char* c_str() const {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 370  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00013	74 1c		 je	 SHORT $LN3@c_str
  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0001e	48 83 c0 28	 add	 rax, 40			; 00000028H
  00022	48 8b c8	 mov	 rcx, rax
  00025	e8 00 00 00 00	 call	 ?c_str@?$_Yarn@D@std@@QEBAPEBDXZ ; std::_Yarn<char>::c_str
  0002a	48 89 44 24 20	 mov	 QWORD PTR tv70[rsp], rax
  0002f	eb 0c		 jmp	 SHORT $LN4@c_str
$LN3@c_str:
  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
  00038	48 89 44 24 20	 mov	 QWORD PTR tv70[rsp], rax
$LN4@c_str:
  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR tv70[rsp]

; 371  :     }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
?c_str@locale@std@@QEBAPEBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??1locale@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
tv84 = 40
this$ = 64
??1locale@std@@QEAA@XZ PROC				; std::locale::~locale, COMDAT

; 350  :     ~locale() noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 351  :         if (_Ptr) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00013	74 49		 je	 SHORT $LN2@locale

; 352  :             delete _Ptr->_Decref();

  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00023	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00027	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002a	ff 50 10	 call	 QWORD PTR [rax+16]
  0002d	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00032	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00038	74 1b		 je	 SHORT $LN4@locale
  0003a	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	ba 01 00 00 00	 mov	 edx, 1
  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0004c	ff 10		 call	 QWORD PTR [rax]
  0004e	48 89 44 24 28	 mov	 QWORD PTR tv84[rsp], rax
  00053	eb 09		 jmp	 SHORT $LN5@locale
$LN4@locale:
  00055	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv84[rsp], 0
$LN5@locale:
$LN2@locale:

; 353  :         }
; 354  :     }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
??1locale@std@@QEAA@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??0locale@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??0locale@std@@QEAA@AEBV01@@Z PROC			; std::locale::locale, COMDAT

; 267  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Right$[rsp]
  00018	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0001c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 268  :         _Ptr->_Incref();

  00020	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00025	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00032	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00035	ff 50 08	 call	 QWORD PTR [rax+8]

; 269  :     }

  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00041	c3		 ret	 0
??0locale@std@@QEAA@AEBV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gfacet@locale@std@@MEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gfacet@locale@std@@MEAAPEAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gfacet@locale@std@@MEAAPEAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??1facet@locale@std@@MEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1facet@locale@std@@MEAA@XZ PROC			; std::locale::facet::~facet, COMDAT

; 155  :         virtual __CLR_OR_THIS_CALL ~facet() noexcept override {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7facet@locale@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ??1_Facet_base@std@@UEAA@XZ ; std::_Facet_base::~_Facet_base
  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
??1facet@locale@std@@MEAA@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??0facet@locale@std@@IEAA@_K@Z
_TEXT	SEGMENT
this$ = 48
_Initrefs$ = 56
??0facet@locale@std@@IEAA@_K@Z PROC			; std::locale::facet::facet, COMDAT

; 153  :         {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ??0_Facet_base@std@@QEAA@XZ
  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7facet@locale@std@@6B@
  00024	48 89 08	 mov	 QWORD PTR [rax], rcx

; 152  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002c	8b 4c 24 38	 mov	 ecx, DWORD PTR _Initrefs$[rsp]
  00030	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 153  :         {}

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003c	c3		 ret	 0
??0facet@locale@std@@IEAA@_K@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
_TEXT	SEGMENT
this$ = 8
?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ PROC ; std::locale::facet::_Decref, COMDAT

; 139  :         virtual _Facet_base* __CLR_OR_THIS_CALL _Decref() noexcept override { // decrement use count

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 140  :             if (_MT_DECR(_Myrefs) == 0) {

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 83 c0 08	 add	 rax, 8
  0000e	b9 ff ff ff ff	 mov	 ecx, -1
  00013	f0 0f c1 08	 lock xadd DWORD PTR [rax], ecx
  00017	ff c9		 dec	 ecx
  00019	8b c1		 mov	 eax, ecx
  0001b	85 c0		 test	 eax, eax
  0001d	75 07		 jne	 SHORT $LN2@Decref

; 141  :                 return this;

  0001f	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00024	eb 02		 jmp	 SHORT $LN1@Decref
$LN2@Decref:

; 142  :             }
; 143  : 
; 144  :             return nullptr;

  00026	33 c0		 xor	 eax, eax
$LN1@Decref:

; 145  :         }

  00028	c3		 ret	 0
?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ ENDP ; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Incref@facet@locale@std@@UEAAXXZ PROC			; std::locale::facet::_Incref, COMDAT

; 135  :         virtual void __CLR_OR_THIS_CALL _Incref() noexcept override { // increment use count

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 136  :             _MT_INCR(_Myrefs);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 83 c0 08	 add	 rax, 8
  0000e	f0 ff 00	 lock inc DWORD PTR [rax]

; 137  :         }

  00011	c3		 ret	 0
?_Incref@facet@locale@std@@UEAAXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??Bid@locale@std@@QEAA_KXZ
_TEXT	SEGMENT
_Lock$1 = 32
this$ = 64
??Bid@locale@std@@QEAA_KXZ PROC				; std::locale::id::operator unsigned __int64, COMDAT

; 104  :         __CLR_OR_THIS_CALL operator size_t() { // get stamp, with lazy allocation

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 105  :             if (_Id == 0) { // still zero, allocate stamp

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	75 3e		 jne	 SHORT $LN2@operator

; 106  :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00014	33 d2		 xor	 edx, edx
  00016	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  0001b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 107  :                 if (_Id == 0) {

  00020	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00025	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00029	75 1d		 jne	 SHORT $LN3@operator

; 108  :                     _Id = static_cast<size_t>(++_Id_cnt);

  0002b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00031	ff c0		 inc	 eax
  00033	89 05 00 00 00
	00		 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00039	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN3@operator:

; 109  :                 }
; 110  :                 _END_LOCK()

  00048	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  0004d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
$LN2@operator:

; 111  :             }
; 112  :             return _Id;

  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00057	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 113  :         }

  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
??Bid@locale@std@@QEAA_KXZ ENDP				; std::locale::id::operator unsigned __int64
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??0id@locale@std@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
??0id@locale@std@@QEAA@_K@Z PROC			; std::locale::id::id, COMDAT

; 99   :         __CLR_OR_THIS_CALL id(size_t _Val = 0) : _Id(_Val) {}

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _Val$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx
  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001c	c3		 ret	 0
??0id@locale@std@@QEAA@_K@Z ENDP			; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ?_Tidy@?$_Yarn@_W@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$_Yarn@_W@std@@AEAAXXZ PROC			; std::_Yarn<wchar_t>::_Tidy, COMDAT

; 121  :     void __CLR_OR_THIS_CALL _Tidy() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 122  :         if (_Myptr) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 0d		 je	 SHORT $LN2@Tidy

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001c	e8 00 00 00 00	 call	 free
$LN2@Tidy:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 131  :     }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?_Tidy@?$_Yarn@_W@std@@AEAAXXZ ENDP			; std::_Yarn<wchar_t>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ??1?$_Yarn@_W@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Yarn@_W@std@@QEAA@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT

; 100  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 101  :         _Tidy();

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Tidy@?$_Yarn@_W@std@@AEAAXXZ ; std::_Yarn<wchar_t>::_Tidy

; 102  :     }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1?$_Yarn@_W@std@@QEAA@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ??0?$_Yarn@_W@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Yarn@_W@std@@QEAA@XZ PROC				; std::_Yarn<wchar_t>::_Yarn<wchar_t>, COMDAT

; 59   :     __CLR_OR_THIS_CALL _Yarn() noexcept : _Myptr(nullptr), _Nul(0) {}

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00011	33 c0		 xor	 eax, eax
  00013	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00018	66 89 41 08	 mov	 WORD PTR [rcx+8], ax
  0001c	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00021	c3		 ret	 0
??0?$_Yarn@_W@std@@QEAA@XZ ENDP				; std::_Yarn<wchar_t>::_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$_Yarn@D@std@@AEAAXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT

; 121  :     void __CLR_OR_THIS_CALL _Tidy() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 122  :         if (_Myptr) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 0d		 je	 SHORT $LN2@Tidy

; 123  : #ifdef _DEBUG
; 124  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 125  : #else // _DEBUG
; 126  :             _CSTD free(_Myptr);

  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001c	e8 00 00 00 00	 call	 free
$LN2@Tidy:

; 127  : #endif // _DEBUG
; 128  :         }
; 129  : 
; 130  :         _Myptr = nullptr;

  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 131  :     }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AEAAXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ?c_str@?$_Yarn@D@std@@QEBAPEBDXZ
_TEXT	SEGMENT
tv68 = 0
this$ = 32
?c_str@?$_Yarn@D@std@@QEBAPEBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT

; 108  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL c_str() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 109  :         return _Myptr ? _Myptr : &_Nul;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 0e		 je	 SHORT $LN3@c_str
  00014	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001c	48 89 04 24	 mov	 QWORD PTR tv68[rsp], rax
  00020	eb 0d		 jmp	 SHORT $LN4@c_str
$LN3@c_str:
  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 83 c0 08	 add	 rax, 8
  0002b	48 89 04 24	 mov	 QWORD PTR tv68[rsp], rax
$LN4@c_str:
  0002f	48 8b 04 24	 mov	 rax, QWORD PTR tv68[rsp]

; 110  :     }

  00033	48 83 c4 18	 add	 rsp, 24
  00037	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QEBAPEBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ??1?$_Yarn@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Yarn@D@std@@QEAA@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT

; 100  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 101  :         _Tidy();

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Tidy@?$_Yarn@D@std@@AEAAXXZ ; std::_Yarn<char>::_Tidy

; 102  :     }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1?$_Yarn@D@std@@QEAA@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ??0?$_Yarn@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Yarn@D@std@@QEAA@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT

; 59   :     __CLR_OR_THIS_CALL _Yarn() noexcept : _Myptr(nullptr), _Nul(0) {}

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0
  0001a	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001f	c3		 ret	 0
??0?$_Yarn@D@std@@QEAA@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ?_Gettrue@_Locinfo@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?_Gettrue@_Locinfo@std@@QEBAPEBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT

; 244  :     const char* __CLR_OR_THIS_CALL _Gettrue() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 245  :         return "true";

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04LOAJBDKD@true@

; 246  :     }

  0000c	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QEBAPEBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ?_Getfalse@_Locinfo@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?_Getfalse@_Locinfo@std@@QEBAPEBDXZ PROC		; std::_Locinfo::_Getfalse, COMDAT

; 240  :     const char* __CLR_OR_THIS_CALL _Getfalse() const {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 241  :         return "false";

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05LAPONLG@false@

; 242  :     }

  0000c	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QEBAPEBDXZ ENDP		; std::_Locinfo::_Getfalse
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ
_TEXT	SEGMENT
this$ = 48
?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT

; 206  :     const lconv* __CLR_OR_THIS_CALL _Getlconv() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 207  :         return localeconv();

  00009	e8 00 00 00 00	 call	 localeconv

; 208  :     }

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	c3		 ret	 0
?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 80
__$ArrayPad$ = 128
this$ = 176
__$ReturnUdt$ = 184
?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT

; 202  :     _Cvtvec __CLR_OR_THIS_CALL _Getcvt() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 203  :         return ::_Getcvt();

  00025	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0002a	e8 00 00 00 00	 call	 _Getcvt
  0002f	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T2[rsp]
  00034	48 8b f9	 mov	 rdi, rcx
  00037	48 8b f0	 mov	 rsi, rax
  0003a	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0003f	f3 a4		 rep movsb
  00041	48 8d 44 24 50	 lea	 rax, QWORD PTR $T2[rsp]
  00046	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnUdt$[rsp]
  0004e	48 8b f0	 mov	 rsi, rax
  00051	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00056	f3 a4		 rep movsb
  00058	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 204  :     }

  00060	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00068	48 33 cc	 xor	 rcx, rsp
  0006b	e8 00 00 00 00	 call	 __security_check_cookie
  00070	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00077	5f		 pop	 rdi
  00078	5e		 pop	 rsi
  00079	c3		 ret	 0
?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
__$ReturnUdt$ = 136
?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT

; 198  :     _Ctypevec __CLR_OR_THIS_CALL _Getctype() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 199  :         return ::_Getctype();

  00010	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T2[rsp]
  00015	e8 00 00 00 00	 call	 _Getctype
  0001a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0001f	48 8b f9	 mov	 rdi, rcx
  00022	48 8b f0	 mov	 rsi, rax
  00025	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0002a	f3 a4		 rep movsb
  0002c	48 8d 44 24 20	 lea	 rax, QWORD PTR $T1[rsp]
  00031	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnUdt$[rsp]
  00039	48 8b f0	 mov	 rsi, rax
  0003c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00041	f3 a4		 rep movsb
  00043	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 200  :     }

  0004b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0004f	5f		 pop	 rdi
  00050	5e		 pop	 rsi
  00051	c3		 ret	 0
?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1_Locinfo@std@@QEAA@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT

; 178  :     __CLR_OR_THIS_CALL ~_Locinfo() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 179  :         _Locinfo_dtor(this);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPEAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 180  :     }

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 83 c0 58	 add	 rax, 88			; 00000058H
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 83 c0 48	 add	 rax, 72			; 00000048H
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003a	48 83 c0 38	 add	 rax, 56			; 00000038H
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 83 c0 28	 add	 rax, 40			; 00000028H
  0004f	48 8b c8	 mov	 rcx, rax
  00052	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0005c	48 83 c0 18	 add	 rax, 24
  00060	48 8b c8	 mov	 rcx, rax
  00063	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  00068	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0006d	48 83 c0 08	 add	 rax, 8
  00071	48 8b c8	 mov	 rcx, rax
  00074	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  00079	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  00086	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008a	c3		 ret	 0
??1_Locinfo@std@@QEAA@XZ ENDP				; std::_Locinfo::~_Locinfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QEAA@PEBD@Z
_TEXT	SEGMENT
this$ = 48
_Pch$ = 56
??0_Locinfo@std@@QEAA@PEBD@Z PROC			; std::_Locinfo::_Locinfo, COMDAT

; 155  :     {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 152  :         : _Lock(_LOCK_LOCALE)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	33 d2		 xor	 edx, edx
  00015	48 8b c8	 mov	 rcx, rax
  00018	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 155  :     {

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 83 c0 08	 add	 rax, 8
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::_Yarn<char>
  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 83 c0 18	 add	 rax, 24
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::_Yarn<char>
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 83 c0 28	 add	 rax, 40			; 00000028H
  00048	48 8b c8	 mov	 rcx, rax
  0004b	e8 00 00 00 00	 call	 ??0?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>
  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00055	48 83 c0 38	 add	 rax, 56			; 00000038H
  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 ??0?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>
  00061	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00066	48 83 c0 48	 add	 rax, 72			; 00000048H
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::_Yarn<char>
  00072	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00077	48 83 c0 58	 add	 rax, 88			; 00000058H
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::_Yarn<char>

; 156  :         if (_Pch) {

  00083	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Pch$[rsp], 0
  00089	74 11		 je	 SHORT $LN2@Locinfo

; 157  :             _Locinfo_ctor(this, _Pch);

  0008b	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Pch$[rsp]
  00090	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00095	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPEAV12@PEBD@Z ; std::_Locinfo::_Locinfo_ctor

; 158  :             return;

  0009a	eb 0c		 jmp	 SHORT $LN1@Locinfo
$LN2@Locinfo:

; 159  :         }
; 160  : 
; 161  :         _Xruntime_error("bad locale name");

  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@ELKIONDK@bad?5locale?5name@
  000a3	e8 00 00 00 00	 call	 ?_Xruntime_error@std@@YAXPEBD@Z ; std::_Xruntime_error
$LN1@Locinfo:

; 162  :     }

  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  000ad	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b1	c3		 ret	 0
??0_Locinfo@std@@QEAA@PEBD@Z ENDP			; std::_Locinfo::_Locinfo
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Facet_base@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G_Facet_base@std@@UEAAPEAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1_Facet_base@std@@UEAA@XZ ; std::_Facet_base::~_Facet_base
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 08 00 00 00	 mov	 edx, 8
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G_Facet_base@std@@UEAAPEAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Facet_base@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0_Facet_base@std@@QEAA@XZ PROC			; std::_Facet_base::_Facet_base, COMDAT
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7_Facet_base@std@@6B@
  00011	48 89 08	 mov	 QWORD PTR [rax], rcx
  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00019	c3		 ret	 0
??0_Facet_base@std@@QEAA@XZ ENDP			; std::_Facet_base::_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xfacet
;	COMDAT ??1_Facet_base@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1_Facet_base@std@@UEAA@XZ PROC			; std::_Facet_base::~_Facet_base, COMDAT

; 28   :     virtual __CLR_OR_THIS_CALL ~_Facet_base() noexcept {} // ensure that derived classes can be destroyed properly

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7_Facet_base@std@@6B@
  00011	48 89 08	 mov	 QWORD PTR [rax], rcx
  00014	c3		 ret	 0
??1_Facet_base@std@@UEAA@XZ ENDP			; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\typeinfo
;	COMDAT ?_Throw_bad_cast@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_cast@std@@YAXXZ PROC			; std::_Throw_bad_cast, COMDAT

; 64   : [[noreturn]] inline void _Throw_bad_cast() {

$LN3:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 65   :     _THROW(bad_cast{});

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00009	e8 00 00 00 00	 call	 ??0bad_cast@std@@QEAA@XZ ; std::bad_cast::bad_cast
  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVbad_cast@std@@
  00015	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0001a	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Throw_bad_:

; 66   : }

  0001f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00023	c3		 ret	 0
?_Throw_bad_cast@std@@YAXXZ ENDP			; std::_Throw_bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_cast@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_cast@std@@UEAAPEAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1bad_cast@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 18 00 00 00	 mov	 edx, 24
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gbad_cast@std@@UEAAPEAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0bad_cast@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_cast@std@@QEAA@AEBV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0bad_cast@std@@QEAA@AEBV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1bad_cast@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_cast@std@@UEAA@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1bad_cast@std@@UEAA@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_cast@std@@QEAA@XZ PROC				; std::bad_cast::bad_cast, COMDAT

; 137  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 136  :         : exception("bad cast", 1)

  00009	41 b8 01 00 00
	00		 mov	 r8d, 1
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast@
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001b	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception

; 137  :     {

  00020	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
  0002c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 138  :     }

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
??0bad_cast@std@@QEAA@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ
_TEXT	SEGMENT
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ PROC ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>, COMDAT

; 640  :     static _Constexpr_immortalize_impl<_Ty> _Static;
; 641  :     return _Static._Storage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static

; 642  : }

  00007	c3		 ret	 0
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ ENDP ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category2@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G_Iostream_error_category2@std@@UEAAPEAXI@Z PROC	; std::_Iostream_error_category2::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1_Iostream_error_category2@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G_Iostream_error_category2@std@@UEAAPEAXI@Z ENDP	; std::_Iostream_error_category2::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category2@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1_Iostream_error_category2@std@@UEAA@XZ PROC		; std::_Iostream_error_category2::~_Iostream_error_category2, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1error_category@std@@UEAA@XZ ; std::error_category::~error_category
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1_Iostream_error_category2@std@@UEAA@XZ ENDP		; std::_Iostream_error_category2::~_Iostream_error_category2
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_Iostream_error_length$1 = 32
this$ = 64
__$ReturnUdt$ = 72
_Errcode$ = 80
?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category2::message, COMDAT

; 532  :     _NODISCARD virtual string message(int _Errcode) const override {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 533  :         if (_Errcode == static_cast<int>(io_errc::stream)) {

  00013	83 7c 24 50 01	 cmp	 DWORD PTR _Errcode$[rsp], 1
  00018	75 29		 jne	 SHORT $LN2@message

; 534  :             static constexpr char _Iostream_error[] = "iostream stream error";
; 535  :             constexpr size_t _Iostream_error_length = sizeof(_Iostream_error) - 1; // TRANSITION, DevCom-906503

  0001a	48 c7 44 24 20
	15 00 00 00	 mov	 QWORD PTR _Iostream_error_length$1[rsp], 21

; 536  :             return string(_Iostream_error, _Iostream_error_length);

  00023	41 b8 15 00 00
	00		 mov	 r8d, 21
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Iostream_error@?4??message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
  00030	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00035	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003a	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  0003f	eb 1d		 jmp	 SHORT $LN1@message

; 537  :         } else {

  00041	eb 1b		 jmp	 SHORT $LN1@message
$LN2@message:

; 538  :             return _Syserror_map(_Errcode);

  00043	8b 4c 24 50	 mov	 ecx, DWORD PTR _Errcode$[rsp]
  00047	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPEBDH@Z ; std::_Syserror_map
  0004c	48 8b d0	 mov	 rdx, rax
  0004f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00054	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@message:

; 539  :         }
; 540  :     }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
?message@_Iostream_error_category2@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category2::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?name@_Iostream_error_category2@std@@UEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?name@_Iostream_error_category2@std@@UEBAPEBDXZ PROC	; std::_Iostream_error_category2::name, COMDAT

; 528  :     _NODISCARD virtual const char* name() const noexcept override {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 529  :         return "iostream";

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08LLGCOLLL@iostream@

; 530  :     }

  0000c	c3		 ret	 0
?name@_Iostream_error_category2@std@@UEBAPEBDXZ ENDP	; std::_Iostream_error_category2::name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gsystem_error@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gsystem_error@std@@UEAAPEAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1system_error@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gsystem_error@std@@UEAAPEAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0system_error@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0system_error@std@@QEAA@AEBV01@@Z PROC		; std::system_error::system_error, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0_System_error@std@@QEAA@AEBV01@@Z
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7system_error@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0system_error@std@@QEAA@AEBV01@@Z ENDP		; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1system_error@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1system_error@std@@UEAA@XZ PROC			; std::system_error::~system_error, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1_System_error@std@@UEAA@XZ
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1system_error@std@@UEAA@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??0system_error@std@@QEAA@Verror_code@1@PEBD@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
__$ArrayPad$ = 80
this$ = 128
_Errcode$ = 136
_Message$ = 144
??0system_error@std@@QEAA@Verror_code@1@PEBD@Z PROC	; std::system_error::system_error, COMDAT

; 467  :     system_error(error_code _Errcode, const char* _Message) : _Mybase(_Errcode, _Message) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00024	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR _Message$[rsp]
  0002c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  00031	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00036	48 8d 44 24 20	 lea	 rax, QWORD PTR $T1[rsp]
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR _Errcode$[rsp]
  00046	b9 10 00 00 00	 mov	 ecx, 16
  0004b	f3 a4		 rep movsb
  0004d	4c 8d 44 24 30	 lea	 r8, QWORD PTR $T2[rsp]
  00052	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00057	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0005f	e8 00 00 00 00	 call	 ??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
  00064	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  00069	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7system_error@std@@6B@
  0007d	48 89 08	 mov	 QWORD PTR [rax], rcx
  00080	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0008d	48 33 cc	 xor	 rcx, rsp
  00090	e8 00 00 00 00	 call	 __security_check_cookie
  00095	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00099	5f		 pop	 rdi
  0009a	5e		 pop	 rsi
  0009b	c3		 ret	 0
??0system_error@std@@QEAA@Verror_code@1@PEBD@Z ENDP	; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G_System_error@std@@UEAAPEAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1_System_error@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G_System_error@std@@UEAAPEAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_System_error@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 64
__that$ = 72
??0_System_error@std@@QEAA@AEBV01@@Z PROC		; std::_System_error::_System_error, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b 54 24 48	 mov	 rdx, QWORD PTR __that$[rsp]
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001a	e8 00 00 00 00	 call	 ??0runtime_error@std@@QEAA@AEBV01@@Z
  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7_System_error@std@@6B@
  0002b	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __that$[rsp]
  00038	48 8d 78 18	 lea	 rdi, QWORD PTR [rax+24]
  0003c	48 8d 71 18	 lea	 rsi, QWORD PTR [rcx+24]
  00040	b9 10 00 00 00	 mov	 ecx, 16
  00045	f3 a4		 rep movsb
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00050	5f		 pop	 rdi
  00051	5e		 pop	 rsi
  00052	c3		 ret	 0
??0_System_error@std@@QEAA@AEBV01@@Z ENDP		; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1_System_error@std@@UEAA@XZ PROC			; std::_System_error::~_System_error, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1runtime_error@std@@UEAA@XZ
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1_System_error@std@@UEAA@XZ ENDP			; std::_System_error::~_System_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 96
__$ArrayPad$ = 128
this$ = 176
_Errcode$ = 184
_Message$ = 192
??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT

; 452  :     _System_error(error_code _Errcode, const string& _Message)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 453  :         : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) {}

  0002a	48 8d 44 24 40	 lea	 rax, QWORD PTR $T3[rsp]
  0002f	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00034	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR _Message$[rsp]
  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00041	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00046	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  0004b	48 8b f9	 mov	 rdi, rcx
  0004e	48 8b b4 24 b8
	00 00 00	 mov	 rsi, QWORD PTR _Errcode$[rsp]
  00056	b9 10 00 00 00	 mov	 ecx, 16
  0005b	f3 a4		 rep movsb
  0005d	4c 8b c0	 mov	 r8, rax
  00060	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T2[rsp]
  00065	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T4[rsp]
  0006a	e8 00 00 00 00	 call	 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
  0006f	48 8b d0	 mov	 rdx, rax
  00072	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0007a	e8 00 00 00 00	 call	 ??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  0007f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T4[rsp]
  00084	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00089	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7_System_error@std@@6B@
  00098	48 89 08	 mov	 QWORD PTR [rax], rcx
  0009b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000a3	48 8d 78 18	 lea	 rdi, QWORD PTR [rax+24]
  000a7	48 8b b4 24 b8
	00 00 00	 mov	 rsi, QWORD PTR _Errcode$[rsp]
  000af	b9 10 00 00 00	 mov	 ecx, 16
  000b4	f3 a4		 rep movsb
  000b6	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000be	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000c6	48 33 cc	 xor	 rcx, rsp
  000c9	e8 00 00 00 00	 call	 __security_check_cookie
  000ce	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000d5	5f		 pop	 rdi
  000d6	5e		 pop	 rsi
  000d7	c3		 ret	 0
??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 64
__$ReturnUdt$ = 96
_Errcode$ = 104
_Message$ = 112
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z PROC ; std::_System_error::_Makestr, COMDAT

; 442  :     static string _Makestr(error_code _Errcode, string _Message) { // compose error message

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 443  :         if (!_Message.empty()) {

  00022	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Message$[rsp]
  00027	e8 00 00 00 00	 call	 ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
  0002c	0f b6 c0	 movzx	 eax, al
  0002f	85 c0		 test	 eax, eax
  00031	75 11		 jne	 SHORT $LN2@Makestr

; 444  :             _Message.append(": ");

  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5@
  0003a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Message$[rsp]
  0003f	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN2@Makestr:

; 445  :         }
; 446  : 
; 447  :         _Message.append(_Errcode.message());

  00044	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00049	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Errcode$[rsp]
  0004e	e8 00 00 00 00	 call	 ?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
  00053	48 8b d0	 mov	 rdx, rax
  00056	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Message$[rsp]
  0005b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00060	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00065	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 448  :         return _Message;

  0006a	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Message$[rsp]
  0006f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00074	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00079	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Message$[rsp]
  0007e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00083	48 8b 44 24 60	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 449  :     }

  00088	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0008d	48 33 cc	 xor	 rcx, rsp
  00090	e8 00 00 00 00	 call	 __security_check_cookie
  00095	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00099	c3		 ret	 0
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ENDP ; std::_System_error::_Makestr
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??8std@@YA_NAEBVerror_condition@0@0@Z
_TEXT	SEGMENT
tv78 = 32
tv72 = 36
tv69 = 40
_Left$ = 64
_Right$ = 72
??8std@@YA_NAEBVerror_condition@0@0@Z PROC		; std::operator==, COMDAT

; 272  :     _NODISCARD friend bool operator==(const error_condition& _Left, const error_condition& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 273  :         return _Left.category() == _Right.category() && _Left.value() == _Right.value();

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ?category@error_condition@std@@QEBAAEBVerror_category@2@XZ ; std::error_condition::category
  00018	48 89 44 24 28	 mov	 QWORD PTR tv69[rsp], rax
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00022	e8 00 00 00 00	 call	 ?category@error_condition@std@@QEBAAEBVerror_category@2@XZ ; std::error_condition::category
  00027	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv69[rsp]
  0002c	48 8b d1	 mov	 rdx, rcx
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 ??8error_category@std@@QEBA_NAEBV01@@Z ; std::error_category::operator==
  00037	0f b6 c0	 movzx	 eax, al
  0003a	85 c0		 test	 eax, eax
  0003c	74 2a		 je	 SHORT $LN3@operator
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00043	e8 00 00 00 00	 call	 ?value@error_condition@std@@QEBAHXZ ; std::error_condition::value
  00048	89 44 24 24	 mov	 DWORD PTR tv72[rsp], eax
  0004c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00051	e8 00 00 00 00	 call	 ?value@error_condition@std@@QEBAHXZ ; std::error_condition::value
  00056	8b 4c 24 24	 mov	 ecx, DWORD PTR tv72[rsp]
  0005a	3b c8		 cmp	 ecx, eax
  0005c	75 0a		 jne	 SHORT $LN3@operator
  0005e	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  00066	eb 08		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00068	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN4@operator:
  00070	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv78[rsp]

; 274  :     }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
??8std@@YA_NAEBVerror_condition@0@0@Z ENDP		; std::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?category@error_condition@std@@QEBAAEBVerror_category@2@XZ
_TEXT	SEGMENT
this$ = 8
?category@error_condition@std@@QEBAAEBVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT

; 259  :     _NODISCARD const error_category& category() const noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 260  :         return *_Mycat;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 261  :     }

  0000e	c3		 ret	 0
?category@error_condition@std@@QEBAAEBVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?value@error_condition@std@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?value@error_condition@std@@QEBAHXZ PROC		; std::error_condition::value, COMDAT

; 255  :     _NODISCARD int value() const noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 256  :         return _Myval;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 00		 mov	 eax, DWORD PTR [rax]

; 257  :     }

  0000c	c3		 ret	 0
?value@error_condition@std@@QEBAHXZ ENDP		; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
_Cat$ = 24
??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT

; 232  :     error_condition(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00013	8b 4c 24 10	 mov	 ecx, DWORD PTR _Val$[rsp]
  00017	89 08		 mov	 DWORD PTR [rax], ecx
  00019	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001e	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Cat$[rsp]
  00023	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00027	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002c	c3		 ret	 0
??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
tv67 = 32
tv70 = 40
this$ = 64
__$ReturnUdt$ = 72
?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::error_code::message, COMDAT

; 172  :     _NODISCARD string message() const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 173  :         return category().message(value());

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?category@error_code@std@@QEBAAEBVerror_category@2@XZ ; std::error_code::category
  00018	48 89 44 24 20	 mov	 QWORD PTR tv67[rsp], rax
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?value@error_code@std@@QEBAHXZ ; std::error_code::value
  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv67[rsp]
  0002c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002f	48 89 4c 24 28	 mov	 QWORD PTR tv70[rsp], rcx
  00034	44 8b c0	 mov	 r8d, eax
  00037	48 8b 54 24 48	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv67[rsp]
  00041	48 8b 44 24 28	 mov	 rax, QWORD PTR tv70[rsp]
  00046	ff 50 10	 call	 QWORD PTR [rax+16]
  00049	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 174  :     }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::error_code::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?category@error_code@std@@QEBAAEBVerror_category@2@XZ
_TEXT	SEGMENT
this$ = 8
?category@error_code@std@@QEBAAEBVerror_category@2@XZ PROC ; std::error_code::category, COMDAT

; 166  :     _NODISCARD const error_category& category() const noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 167  :         return *_Mycat;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 168  :     }

  0000e	c3		 ret	 0
?category@error_code@std@@QEBAAEBVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?value@error_code@std@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?value@error_code@std@@QEBAHXZ PROC			; std::error_code::value, COMDAT

; 162  :     _NODISCARD int value() const noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 163  :         return _Myval;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 00		 mov	 eax, DWORD PTR [rax]

; 164  :     }

  0000c	c3		 ret	 0
?value@error_code@std@@QEBAHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??0error_code@std@@QEAA@HAEBVerror_category@1@@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
_Cat$ = 24
??0error_code@std@@QEAA@HAEBVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT

; 139  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00013	8b 4c 24 10	 mov	 ecx, DWORD PTR _Val$[rsp]
  00017	89 08		 mov	 DWORD PTR [rax], ecx
  00019	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001e	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Cat$[rsp]
  00023	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00027	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002c	c3		 ret	 0
??0error_code@std@@QEAA@HAEBVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??8error_category@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv67 = 0
this$ = 32
_Right$ = 40
??8error_category@std@@QEBA_NAEBV01@@Z PROC		; std::error_category::operator==, COMDAT

; 93   :     _NODISCARD bool operator==(const error_category& _Right) const noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 94   :         return _Addr == _Right._Addr;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  00018	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0001c	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00020	75 09		 jne	 SHORT $LN3@operator
  00022	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv67[rsp], 1
  00029	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv67[rsp], 0
$LN4@operator:
  00032	0f b6 04 24	 movzx	 eax, BYTE PTR tv67[rsp]

; 95   :     }

  00036	48 83 c4 18	 add	 rsp, 24
  0003a	c3		 ret	 0
??8error_category@std@@QEBA_NAEBV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z
_TEXT	SEGMENT
tv74 = 32
this$ = 64
_Code$ = 72
_Errval$ = 80
?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT

; 390  : _NODISCARD inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 391  :     return *this == _Code.category() && _Code.value() == _Errval;

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Code$[rsp]
  00018	e8 00 00 00 00	 call	 ?category@error_code@std@@QEBAAEBVerror_category@2@XZ ; std::error_code::category
  0001d	48 8b d0	 mov	 rdx, rax
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ??8error_category@std@@QEBA_NAEBV01@@Z ; std::error_category::operator==
  0002a	0f b6 c0	 movzx	 eax, al
  0002d	85 c0		 test	 eax, eax
  0002f	74 1a		 je	 SHORT $LN3@equivalent
  00031	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Code$[rsp]
  00036	e8 00 00 00 00	 call	 ?value@error_code@std@@QEBAHXZ ; std::error_code::value
  0003b	3b 44 24 50	 cmp	 eax, DWORD PTR _Errval$[rsp]
  0003f	75 0a		 jne	 SHORT $LN3@equivalent
  00041	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00049	eb 08		 jmp	 SHORT $LN4@equivalent
$LN3@equivalent:
  0004b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN4@equivalent:
  00053	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv74[rsp]

; 392  : }

  00058	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005c	c3		 ret	 0
?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Errval$ = 72
_Cond$ = 80
?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT

; 386  : _NODISCARD inline bool error_category::equivalent(int _Errval, const error_condition& _Cond) const noexcept {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 387  :     return default_error_condition(_Errval) == _Cond;

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	44 8b 44 24 48	 mov	 r8d, DWORD PTR _Errval$[rsp]
  0001f	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00029	ff 50 18	 call	 QWORD PTR [rax+24]
  0002c	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Cond$[rsp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??8std@@YA_NAEBVerror_condition@0@0@Z ; std::operator==

; 388  : }

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Errval$ = 64
?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT

; 381  : _NODISCARD inline error_condition error_category::default_error_condition(int _Errval) const noexcept {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 382  :     // make error_condition for error code
; 383  :     return error_condition(_Errval, *this);

  00013	4c 8b 44 24 30	 mov	 r8, QWORD PTR this$[rsp]
  00018	8b 54 24 40	 mov	 edx, DWORD PTR _Errval$[rsp]
  0001c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00021	e8 00 00 00 00	 call	 ??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z ; std::error_condition::error_condition
  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 384  : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ??1error_category@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1error_category@std@@UEAA@XZ PROC			; std::error_category::~error_category, COMDAT

; 81   :         virtual ~error_category() noexcept = default;

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	c3		 ret	 0
??1error_category@std@@UEAA@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?iostream_category@std@@YAAEBVerror_category@1@XZ
_TEXT	SEGMENT
?iostream_category@std@@YAAEBVerror_category@1@XZ PROC	; std::iostream_category, COMDAT

; 668  : _NODISCARD inline const error_category& iostream_category() noexcept {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 669  :     return _Immortalize_memcpy_image<_Iostream_error_category2>();

  00004	e8 00 00 00 00	 call	 ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAAEBV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>

; 670  : }

  00009	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000d	c3		 ret	 0
?iostream_category@std@@YAAEBVerror_category@1@XZ ENDP	; std::iostream_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
_Errno$ = 56
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 405  : _NODISCARD inline error_code make_error_code(io_errc _Errno) noexcept {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 406  :     return error_code(static_cast<int>(_Errno), _STD iostream_category());

  0000d	e8 00 00 00 00	 call	 ?iostream_category@std@@YAAEBVerror_category@1@XZ ; std::iostream_category
  00012	4c 8b c0	 mov	 r8, rax
  00015	8b 54 24 38	 mov	 edx, DWORD PTR _Errno$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0001e	e8 00 00 00 00	 call	 ??0error_code@std@@QEAA@HAEBVerror_category@1@@Z ; std::error_code::error_code
  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 407  : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gruntime_error@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gruntime_error@std@@UEAAPEAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1runtime_error@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 18 00 00 00	 mov	 edx, 24
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gruntime_error@std@@UEAAPEAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0runtime_error@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0runtime_error@std@@QEAA@AEBV01@@Z PROC		; std::runtime_error::runtime_error, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7runtime_error@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0runtime_error@std@@QEAA@AEBV01@@Z ENDP		; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1runtime_error@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1runtime_error@std@@UEAA@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1runtime_error@std@@UEAA@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\stdexcept
;	COMDAT ??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT

; 111  :     explicit runtime_error(const string& _Message) : _Mybase(_Message.c_str()) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Message$[rsp]
  00013	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00018	48 8b d0	 mov	 rdx, rax
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBD@Z ; std::exception::exception
  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7runtime_error@std@@6B@
  00031	48 89 08	 mov	 QWORD PTR [rax], rcx
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1401 :     constexpr const _Ty1& _Get_first() const noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1402 :         return *this;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 1403 :     }

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1397 :     constexpr _Ty1& _Get_first() noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1398 :         return *this;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 1399 :     }

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4654 :     _CONSTEXPR20_CONTAINER const _Alty& _Getal() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4655 :         return _Mypair._Get_first();

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4656 :     }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4650 :     _CONSTEXPR20_CONTAINER _Alty& _Getal() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4651 :         return _Mypair._Get_first();

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4652 :     }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators, COMDAT

; 4646 :     _CONSTEXPR20_CONTAINER void _Swap_proxy_and_iterators(basic_string& _Right) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4647 :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);

  0000e	48 8b 44 24 38	 mov	 rax, QWORD PTR _Right$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	48 8b d0	 mov	 rdx, rax
  0001b	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_proxy_and_iterators

; 4648 :     }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
$T1 = 32
_Ptr$2 = 40
_Al$3 = 48
this$ = 80
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT

; 4616 :     _CONSTEXPR20_CONTAINER void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4617 :         _Mypair._Myval2._Orphan_all();

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 8b c8	 mov	 rcx, rax
  0001e	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00023	0f b6 c0	 movzx	 eax, al
  00026	85 c0		 test	 eax, eax
  00028	74 47		 je	 SHORT $LN2@Tidy_deall

; 4619 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  0002a	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 89 44 24 28	 mov	 QWORD PTR _Ptr$2[rsp], rax

; 4620 :             auto& _Al          = _Getal();

  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00041	48 89 44 24 30	 mov	 QWORD PTR _Al$3[rsp], rax

; 4621 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00046	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ; std::_Destroy_in_place<char *>

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00053	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00058	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0005c	48 ff c0	 inc	 rax
  0005f	4c 8b c0	 mov	 r8, rax
  00062	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Ptr$2[rsp]
  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$3[rsp]
  0006c	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4623 :         }
; 4624 : 
; 4625 : #ifdef __cpp_lib_constexpr_string
; 4626 :         if (_STD is_constant_evaluated()) {
; 4627 :             _Mypair._Myval2._Bx._Ptr = nullptr;
; 4628 :             _Mypair._Myval2._Mysize  = 0;
; 4629 :             _Mypair._Myval2._Myres   = 0;
; 4630 :         } else
; 4631 : #endif // __cpp_lib_constexpr_string
; 4632 :         {
; 4633 :             _Mypair._Myval2._Mysize = 0;

  00071	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00076	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  0007e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00083	48 c7 40 18 0f
	00 00 00	 mov	 QWORD PTR [rax+24], 15

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  0008b	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  00090	b8 01 00 00 00	 mov	 eax, 1
  00095	48 6b c0 00	 imul	 rax, rax, 0
  00099	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0009e	48 03 c8	 add	 rcx, rax
  000a1	48 8b c1	 mov	 rax, rcx
  000a4	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  000a9	48 8b c8	 mov	 rcx, rax
  000ac	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 4637 :         }
; 4638 :     }

  000b1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b5	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
$T1 = 32
_My_data$ = 40
this$ = 64
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT

; 4594 :     _CONSTEXPR20_CONTAINER void _Tidy_init() noexcept { // initialize basic_string data members

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4595 :         auto& _My_data   = _Mypair._Myval2;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 89 44 24 28	 mov	 QWORD PTR _My_data$[rsp], rax

; 4596 :         _My_data._Mysize = 0;

  00013	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  00018	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00020	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  00025	48 c7 40 18 0f
	00 00 00	 mov	 QWORD PTR [rax+24], 15

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0002d	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	48 6b c0 00	 imul	 rax, rax, 0
  0003b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _My_data$[rsp]
  00040	48 03 c8	 add	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 4613 :         }
; 4614 :     }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT

; 4590 :     _CONSTEXPR20_CONTAINER void _Eos(const size_type _Newsize) { // set new length and null terminator

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4591 :         _Traits::assign(_Mypair._Myval2._Myptr()[_Mypair._Myval2._Mysize = _Newsize], _Elem());

  0000e	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Newsize$[rsp]
  0001d	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0002e	48 03 44 24 48	 add	 rax, QWORD PTR _Newsize$[rsp]
  00033	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00038	48 8b c8	 mov	 rcx, rax
  0003b	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 4592 :     }

  00040	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00044	c3		 ret	 0
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 48
_Requested$ = 56
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4500 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Requested) const noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4501 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00018	4c 8b c0	 mov	 r8, rax
  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00024	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Requested$[rsp]
  00029	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth

; 4502 :     }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Masked$ = 32
$T1 = 40
_Requested$ = 64
_Old$ = 72
_Max$ = 80
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4487 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR _Requested$[rsp]
  00018	48 83 c8 0f	 or	 rax, 15
  0001c	48 89 44 24 20	 mov	 QWORD PTR _Masked$[rsp], rax

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00021	48 8b 44 24 50	 mov	 rax, QWORD PTR _Max$[rsp]
  00026	48 39 44 24 20	 cmp	 QWORD PTR _Masked$[rsp], rax
  0002b	76 07		 jbe	 SHORT $LN2@Calculate_

; 4490 :             return _Max;

  0002d	48 8b 44 24 50	 mov	 rax, QWORD PTR _Max$[rsp]
  00032	eb 59		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4491 :         }
; 4492 : 
; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00034	33 d2		 xor	 edx, edx
  00036	48 8b 44 24 48	 mov	 rax, QWORD PTR _Old$[rsp]
  0003b	b9 02 00 00 00	 mov	 ecx, 2
  00040	48 f7 f1	 div	 rcx
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Max$[rsp]
  00048	48 2b c8	 sub	 rcx, rax
  0004b	48 8b c1	 mov	 rax, rcx
  0004e	48 39 44 24 48	 cmp	 QWORD PTR _Old$[rsp], rax
  00053	76 07		 jbe	 SHORT $LN3@Calculate_

; 4494 :             return _Max;

  00055	48 8b 44 24 50	 mov	 rax, QWORD PTR _Max$[rsp]
  0005a	eb 31		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4495 :         }
; 4496 : 
; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0005c	33 d2		 xor	 edx, edx
  0005e	48 8b 44 24 48	 mov	 rax, QWORD PTR _Old$[rsp]
  00063	b9 02 00 00 00	 mov	 ecx, 2
  00068	48 f7 f1	 div	 rcx
  0006b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Old$[rsp]
  00070	48 03 c8	 add	 rcx, rax
  00073	48 8b c1	 mov	 rax, rcx
  00076	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
  0007b	48 8d 54 24 28	 lea	 rdx, QWORD PTR $T1[rsp]
  00080	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Masked$[rsp]
  00085	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  0008a	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN1@Calculate_:

; 4498 :     }

  0008d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00091	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv67 = 32
this$ = 64
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT

; 4018 :     _NODISCARD _CONSTEXPR20_CONTAINER bool empty() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4019 :         return size() == 0;

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00013	48 85 c0	 test	 rax, rax
  00016	75 0a		 jne	 SHORT $LN3@empty
  00018	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  00020	eb 08		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00022	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN4@empty:
  0002a	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv67[rsp]

; 4020 :     }

  0002f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00033	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z
_TEXT	SEGMENT
_Old_size$ = 32
this$ = 64
_Newsize$ = 72
_Ch$ = 80
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT

; 3952 :     _CONSTEXPR20_CONTAINER void resize(_CRT_GUARDOVERFLOW const size_type _Newsize, const _Elem _Ch = _Elem()) {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3953 :         // determine new length, padding with _Ch elements as needed
; 3954 :         const size_type _Old_size = size();

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0001d	48 89 44 24 20	 mov	 QWORD PTR _Old_size$[rsp], rax

; 3955 :         if (_Newsize <= _Old_size) {

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR _Old_size$[rsp]
  00027	48 39 44 24 48	 cmp	 QWORD PTR _Newsize$[rsp], rax
  0002c	77 11		 ja	 SHORT $LN2@resize

; 3956 :             _Eos(_Newsize);

  0002e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Newsize$[rsp]
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00038	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 3957 :         } else {

  0003d	eb 23		 jmp	 SHORT $LN3@resize
$LN2@resize:

; 3958 :             append(_Newsize - _Old_size, _Ch);

  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR _Old_size$[rsp]
  00044	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Newsize$[rsp]
  00049	48 2b c8	 sub	 rcx, rax
  0004c	48 8b c1	 mov	 rax, rcx
  0004f	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  00055	48 8b d0	 mov	 rdx, rax
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN3@resize:

; 3959 :         }
; 3960 :     }

  00062	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00066	c3		 ret	 0
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
_Alloc_max$ = 40
_Storage_max$ = 48
$T2 = 56
$T3 = 64
this$ = 96
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT

; 3943 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type max_size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3944 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00009	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0001b	48 89 44 24 28	 mov	 QWORD PTR _Alloc_max$[rsp], rax

; 3945 :         const size_type _Storage_max = // can always store small string

  00020	48 c7 44 24 20
	10 00 00 00	 mov	 QWORD PTR $T1[rsp], 16
  00029	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  0002e	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Alloc_max$[rsp]
  00033	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 89 44 24 30	 mov	 QWORD PTR _Storage_max$[rsp], rax

; 3946 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3947 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR _Storage_max$[rsp]
  00045	48 ff c8	 dec	 rax
  00048	48 89 44 24 38	 mov	 QWORD PTR $T2[rsp], rax
  0004d	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  00052	48 89 44 24 40	 mov	 QWORD PTR $T3[rsp], rax
  00057	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T2[rsp]
  0005c	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T3[rsp]
  00061	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  00066	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 3948 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3949 :         );
; 3950 :     }

  00069	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0006d	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT

; 3939 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type size() const noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 3940 :         return _Mypair._Myval2._Mysize;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 3941 :     }

  0000e	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 48
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT

; 3921 :     _NODISCARD _CONSTEXPR20_CONTAINER _Ret_z_ const _Elem* c_str() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3922 :         return _Mypair._Myval2._Myptr();

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3923 :     }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT

; 3847 :     /* strengthened */ {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3848 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3849 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");
; 3850 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3851 :         return _Mypair._Myval2._Myptr()[_Off];

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001b	48 03 44 24 38	 add	 rax, QWORD PTR _Off$[rsp]

; 3852 :     }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT

; 3839 :     _NODISCARD _CONSTEXPR20_CONTAINER reference operator[](const size_type _Off) noexcept /* strengthened */ {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3840 : #if _CONTAINER_DEBUG_LEVEL > 0
; 3841 :         _STL_VERIFY(_Off <= _Mypair._Myval2._Mysize, "string subscript out of range");
; 3842 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 3843 :         return _Mypair._Myval2._Myptr()[_Off];

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001b	48 03 44 24 38	 add	 rax, QWORD PTR _Off$[rsp]

; 3844 :     }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z
_TEXT	SEGMENT
$T1 = 48
_Old_size$ = 56
_Insert_at$2 = 64
_Old_ptr$3 = 72
this$ = 96
_Off$ = 104
_Count$ = 112
_Ch$ = 120
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT

; 3389 :         const size_type _Off, _CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) {

$LN4:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 3390 :         // insert _Count * _Ch at _Off
; 3391 :         _Mypair._Myval2._Check_offset(_Off);

  00019	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0001e	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Off$[rsp]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 3392 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0002b	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00034	48 89 44 24 38	 mov	 QWORD PTR _Old_size$[rsp], rax

; 3393 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00039	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  00043	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00047	48 2b c1	 sub	 rax, rcx
  0004a	48 39 44 24 70	 cmp	 QWORD PTR _Count$[rsp], rax
  0004f	0f 87 8c 00 00
	00		 ja	 $LN2@insert

; 3394 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00055	48 8b 44 24 70	 mov	 rax, QWORD PTR _Count$[rsp]
  0005a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0006a	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 3395 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0006e	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00073	48 8b c8	 mov	 rcx, rax
  00076	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0007b	48 89 44 24 48	 mov	 QWORD PTR _Old_ptr$3[rsp], rax

; 3396 :             _Elem* const _Insert_at = _Old_ptr + _Off;

  00080	48 8b 44 24 68	 mov	 rax, QWORD PTR _Off$[rsp]
  00085	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Old_ptr$3[rsp]
  0008a	48 03 c8	 add	 rcx, rax
  0008d	48 8b c1	 mov	 rax, rcx
  00090	48 89 44 24 40	 mov	 QWORD PTR _Insert_at$2[rsp], rax

; 3397 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00095	48 8b 44 24 68	 mov	 rax, QWORD PTR _Off$[rsp]
  0009a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  0009f	48 2b c8	 sub	 rcx, rax
  000a2	48 8b c1	 mov	 rax, rcx
  000a5	48 ff c0	 inc	 rax
  000a8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Count$[rsp]
  000ad	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Insert_at$2[rsp]
  000b2	48 03 d1	 add	 rdx, rcx
  000b5	48 8b ca	 mov	 rcx, rdx
  000b8	4c 8b c0	 mov	 r8, rax
  000bb	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Insert_at$2[rsp]
  000c0	e8 00 00 00 00	 call	 ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::move

; 3398 :             _Traits::assign(_Insert_at, _Count, _Ch); // fill hole

  000c5	44 0f b6 44 24
	78		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  000cb	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Count$[rsp]
  000d0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Insert_at$2[rsp]
  000d5	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3399 :             return *this;

  000da	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000df	eb 3e		 jmp	 SHORT $LN1@insert
$LN2@insert:

; 3400 :         }
; 3401 : 
; 3402 :         return _Reallocate_grow_by(

  000e1	48 8d 44 24 30	 lea	 rax, QWORD PTR $T1[rsp]
  000e6	48 8b f8	 mov	 rdi, rax
  000e9	33 c0		 xor	 eax, eax
  000eb	b9 01 00 00 00	 mov	 ecx, 1
  000f0	f3 aa		 rep stosb
  000f2	0f b6 44 24 78	 movzx	 eax, BYTE PTR _Ch$[rsp]
  000f7	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000fb	48 8b 44 24 70	 mov	 rax, QWORD PTR _Count$[rsp]
  00100	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00105	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Off$[rsp]
  0010a	44 0f b6 44 24
	30		 movzx	 r8d, BYTE PTR $T1[rsp]
  00110	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Count$[rsp]
  00115	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0011a	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_b986da8d428e4af07c64af60eec09b61>@@_K_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_b986da8d428e4af07c64af60eec09b61>@@_K2D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_b986da8d428e4af07c64af60eec09b61>,unsigned __int64,unsigned __int64,char>
$LN1@insert:

; 3403 :             _Count,
; 3404 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const size_type _Off,
; 3405 :                 const size_type _Count, const _Elem _Ch) {
; 3406 :                 _Traits::copy(_New_ptr, _Old_ptr, _Off);
; 3407 :                 _Traits::assign(_New_ptr + _Off, _Count, _Ch);
; 3408 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
; 3409 :             },
; 3410 :             _Off, _Count, _Ch);
; 3411 :     }

  0011f	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00123	5f		 pop	 rdi
  00124	c3		 ret	 0
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
_Old_ptr$3 = 40
this$ = 64
_Count$ = 72
_Ch$ = 80
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3267 :     _CONSTEXPR20_CONTAINER basic_string& assign(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) {

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3268 :         // assign _Count * _Ch
; 3269 :         if (_Count <= _Mypair._Myval2._Myres) {

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0001d	48 39 44 24 48	 cmp	 QWORD PTR _Count$[rsp], rax
  00022	77 5e		 ja	 SHORT $LN2@assign

; 3270 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00031	48 89 44 24 28	 mov	 QWORD PTR _Old_ptr$3[rsp], rax

; 3271 :             _Mypair._Myval2._Mysize = _Count;

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Count$[rsp]
  00040	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 3272 :             _Traits::assign(_Old_ptr, _Count, _Ch);

  00044	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  0004a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Count$[rsp]
  0004f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Old_ptr$3[rsp]
  00054	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3273 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00059	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  0005e	48 8b 44 24 48	 mov	 rax, QWORD PTR _Count$[rsp]
  00063	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Old_ptr$3[rsp]
  00068	48 03 c8	 add	 rcx, rax
  0006b	48 8b c1	 mov	 rax, rcx
  0006e	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00073	48 8b c8	 mov	 rcx, rax
  00076	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3274 :             return *this;

  0007b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00080	eb 2c		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3275 :         }
; 3276 : 
; 3277 :         return _Reallocate_for(

  00082	48 8d 44 24 21	 lea	 rax, QWORD PTR $T2[rsp]
  00087	48 8b f8	 mov	 rdi, rax
  0008a	33 c0		 xor	 eax, eax
  0008c	b9 01 00 00 00	 mov	 ecx, 1
  00091	f3 aa		 rep stosb
  00093	44 0f b6 4c 24
	50		 movzx	 r9d, BYTE PTR _Ch$[rsp]
  00099	44 0f b6 44 24
	21		 movzx	 r8d, BYTE PTR $T2[rsp]
  0009f	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Count$[rsp]
  000a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000a9	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
$LN1@assign:

; 3278 :             _Count,
; 3279 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem _Ch) {
; 3280 :                 _Traits::assign(_New_ptr, _Count, _Ch);
; 3281 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3282 :             },
; 3283 :             _Ch);
; 3284 :     }

  000ae	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b2	5f		 pop	 rdi
  000b3	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3263 :     _CONSTEXPR20_CONTAINER basic_string& assign(_In_z_ const _Elem* const _Ptr) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3264 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00013	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ??$_Convert_size@_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64>
  00020	4c 8b c0	 mov	 r8, rax
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3265 :     }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
_Old_ptr$3 = 40
this$ = 64
_Ptr$ = 72
_Count$ = 80
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0001d	48 39 44 24 50	 cmp	 QWORD PTR _Count$[rsp], rax
  00022	77 5d		 ja	 SHORT $LN2@assign

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00031	48 89 44 24 28	 mov	 QWORD PTR _Old_ptr$3[rsp], rax

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Count$[rsp]
  00040	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  00044	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  00049	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0004e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Old_ptr$3[rsp]
  00053	e8 00 00 00 00	 call	 ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::move

; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00058	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  0005d	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  00062	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Old_ptr$3[rsp]
  00067	48 03 c8	 add	 rcx, rax
  0006a	48 8b c1	 mov	 rax, rcx
  0006d	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00072	48 8b c8	 mov	 rcx, rax
  00075	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3251 :             return *this;

  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0007f	eb 2b		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3252 :         }
; 3253 : 
; 3254 :         return _Reallocate_for(

  00081	48 8d 44 24 21	 lea	 rax, QWORD PTR $T2[rsp]
  00086	48 8b f8	 mov	 rdi, rax
  00089	33 c0		 xor	 eax, eax
  0008b	b9 01 00 00 00	 mov	 ecx, 1
  00090	f3 aa		 rep stosb
  00092	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Ptr$[rsp]
  00097	44 0f b6 44 24
	21		 movzx	 r8d, BYTE PTR $T2[rsp]
  0009d	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Count$[rsp]
  000a2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000a7	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
$LN1@assign:

; 3255 :             _Count,
; 3256 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3257 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  000ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b0	5f		 pop	 rdi
  000b1	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 49
_Old_size$ = 56
_Old_ptr$3 = 64
this$ = 96
_Count$ = 104
_Ch$ = 112
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 3178 :     _CONSTEXPR20_CONTAINER basic_string& append(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) {

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 3179 :         // append _Count * _Ch
; 3180 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00014	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001d	48 89 44 24 38	 mov	 QWORD PTR _Old_size$[rsp], rax

; 3181 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00022	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  0002c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00030	48 2b c1	 sub	 rax, rcx
  00033	48 39 44 24 68	 cmp	 QWORD PTR _Count$[rsp], rax
  00038	0f 87 82 00 00
	00		 ja	 $LN2@append

; 3182 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  0003e	48 8b 44 24 68	 mov	 rax, QWORD PTR _Count$[rsp]
  00043	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  00048	48 03 c8	 add	 rcx, rax
  0004b	48 8b c1	 mov	 rax, rcx
  0004e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00053	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 3183 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00057	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00064	48 89 44 24 40	 mov	 QWORD PTR _Old_ptr$3[rsp], rax

; 3184 :             _Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  00069	48 8b 44 24 38	 mov	 rax, QWORD PTR _Old_size$[rsp]
  0006e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Old_ptr$3[rsp]
  00073	48 03 c8	 add	 rcx, rax
  00076	48 8b c1	 mov	 rax, rcx
  00079	44 0f b6 44 24
	70		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  0007f	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Count$[rsp]
  00084	48 8b c8	 mov	 rcx, rax
  00087	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3185 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  0008c	c6 44 24 30 00	 mov	 BYTE PTR $T1[rsp], 0
  00091	48 8b 44 24 68	 mov	 rax, QWORD PTR _Count$[rsp]
  00096	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  0009b	48 03 c8	 add	 rcx, rax
  0009e	48 8b c1	 mov	 rax, rcx
  000a1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Old_ptr$3[rsp]
  000a6	48 03 c8	 add	 rcx, rax
  000a9	48 8b c1	 mov	 rax, rcx
  000ac	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T1[rsp]
  000b1	48 8b c8	 mov	 rcx, rax
  000b4	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3186 :             return *this;

  000b9	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000be	eb 34		 jmp	 SHORT $LN1@append
$LN2@append:

; 3187 :         }
; 3188 : 
; 3189 :         return _Reallocate_grow_by(

  000c0	48 8d 44 24 31	 lea	 rax, QWORD PTR $T2[rsp]
  000c5	48 8b f8	 mov	 rdi, rax
  000c8	33 c0		 xor	 eax, eax
  000ca	b9 01 00 00 00	 mov	 ecx, 1
  000cf	f3 aa		 rep stosb
  000d1	0f b6 44 24 70	 movzx	 eax, BYTE PTR _Ch$[rsp]
  000d6	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000da	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Count$[rsp]
  000df	44 0f b6 44 24
	31		 movzx	 r8d, BYTE PTR $T2[rsp]
  000e5	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Count$[rsp]
  000ea	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000ef	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_e1befb086ad3257e3f042a63030725f7>@@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_e1befb086ad3257e3f042a63030725f7>,unsigned __int64,char>
$LN1@append:

; 3190 :             _Count,
; 3191 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const size_type _Count,
; 3192 :                 const _Elem _Ch) {
; 3193 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3194 :                 _Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
; 3195 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 3196 :             },
; 3197 :             _Count, _Ch);
; 3198 :     }

  000f4	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000f8	5f		 pop	 rdi
  000f9	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 3174 :     _CONSTEXPR20_CONTAINER basic_string& append(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3175 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00013	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ??$_Convert_size@_K@std@@YA_K_K@Z ; std::_Convert_size<unsigned __int64>
  00020	4c 8b c0	 mov	 r8, rax
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3176 :     }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 49
_Old_size$ = 56
_Old_ptr$3 = 64
this$ = 96
_Ptr$ = 104
_Count$ = 112
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 3152 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 3153 :         // append [_Ptr, _Ptr + _Count)
; 3154 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00014	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001d	48 89 44 24 38	 mov	 QWORD PTR _Old_size$[rsp], rax

; 3155 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00022	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  0002c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00030	48 2b c1	 sub	 rax, rcx
  00033	48 39 44 24 70	 cmp	 QWORD PTR _Count$[rsp], rax
  00038	0f 87 81 00 00
	00		 ja	 $LN2@append

; 3156 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  0003e	48 8b 44 24 70	 mov	 rax, QWORD PTR _Count$[rsp]
  00043	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  00048	48 03 c8	 add	 rcx, rax
  0004b	48 8b c1	 mov	 rax, rcx
  0004e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00053	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 3157 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  00057	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00064	48 89 44 24 40	 mov	 QWORD PTR _Old_ptr$3[rsp], rax

; 3158 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00069	48 8b 44 24 38	 mov	 rax, QWORD PTR _Old_size$[rsp]
  0006e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Old_ptr$3[rsp]
  00073	48 03 c8	 add	 rcx, rax
  00076	48 8b c1	 mov	 rax, rcx
  00079	4c 8b 44 24 70	 mov	 r8, QWORD PTR _Count$[rsp]
  0007e	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00083	48 8b c8	 mov	 rcx, rax
  00086	e8 00 00 00 00	 call	 ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::move

; 3159 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  0008b	c6 44 24 30 00	 mov	 BYTE PTR $T1[rsp], 0
  00090	48 8b 44 24 70	 mov	 rax, QWORD PTR _Count$[rsp]
  00095	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Old_size$[rsp]
  0009a	48 03 c8	 add	 rcx, rax
  0009d	48 8b c1	 mov	 rax, rcx
  000a0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Old_ptr$3[rsp]
  000a5	48 03 c8	 add	 rcx, rax
  000a8	48 8b c1	 mov	 rax, rcx
  000ab	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T1[rsp]
  000b0	48 8b c8	 mov	 rcx, rax
  000b3	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3160 :             return *this;

  000b8	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  000bd	eb 35		 jmp	 SHORT $LN1@append
$LN2@append:

; 3161 :         }
; 3162 : 
; 3163 :         return _Reallocate_grow_by(

  000bf	48 8d 44 24 31	 lea	 rax, QWORD PTR $T2[rsp]
  000c4	48 8b f8	 mov	 rdi, rax
  000c7	33 c0		 xor	 eax, eax
  000c9	b9 01 00 00 00	 mov	 ecx, 1
  000ce	f3 aa		 rep stosb
  000d0	48 8b 44 24 70	 mov	 rax, QWORD PTR _Count$[rsp]
  000d5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000da	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Ptr$[rsp]
  000df	44 0f b6 44 24
	31		 movzx	 r8d, BYTE PTR $T2[rsp]
  000e5	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Count$[rsp]
  000ea	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000ef	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_65e615be2a453ca0576c979606f46740>@@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_65e615be2a453ca0576c979606f46740>,char const *,unsigned __int64>
$LN1@append:

; 3164 :             _Count,
; 3165 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem* const _Ptr,
; 3166 :                 const size_type _Count) {
; 3167 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3168 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 3169 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 3170 :             },
; 3171 :             _Ptr, _Count);
; 3172 :     }

  000f4	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000f8	5f		 pop	 rdi
  000f9	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 3123 :     _CONSTEXPR20_CONTAINER basic_string& append(const basic_string& _Right) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3124 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0000e	48 8b 44 24 38	 mov	 rax, QWORD PTR _Right$[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0001b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Right$[rsp]
  00020	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
  00024	48 8b d0	 mov	 rdx, rax
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3125 :     }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3003 :         _Tidy_deallocate();

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3004 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3005 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 3006 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;
; 3007 :         _Mypair._Myval2._Myproxy = nullptr;
; 3008 :         _Delete_plain_internal(_Alproxy, _To_delete);
; 3009 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3010 :     }

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z
_TEXT	SEGMENT
tv72 = 32
_Stay_small$ = 33
_My_data$ = 40
_Right_size$ = 48
_Right_data$ = 56
_New_array$ = 64
_Right_ptr$ = 72
_New_capacity$ = 80
$T1 = 88
$T2 = 96
_Al$ = 104
tv134 = 112
this$ = 144
_Right$ = 152
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT

; 2915 :     _CONSTEXPR20_CONTAINER void _Construct_lv_contents(const basic_string& _Right) {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 2916 :         // assign by copying data stored in _Right
; 2917 :         // pre: this != &_Right
; 2918 :         // pre: *this owns no memory, iterators orphaned (note:
; 2919 :         // _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2920 :         auto& _Right_data             = _Right._Mypair._Myval2;

  00011	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR _Right$[rsp]
  00019	48 89 44 24 38	 mov	 QWORD PTR _Right_data$[rsp], rax

; 2921 :         const size_type _Right_size   = _Right_data._Mysize;

  0001e	48 8b 44 24 38	 mov	 rax, QWORD PTR _Right_data$[rsp]
  00023	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00027	48 89 44 24 30	 mov	 QWORD PTR _Right_size$[rsp], rax

; 2922 :         const _Elem* const _Right_ptr = _Right_data._Myptr();

  0002c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Right_data$[rsp]
  00031	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00036	48 89 44 24 48	 mov	 QWORD PTR _Right_ptr$[rsp], rax

; 2923 :         auto& _My_data                = _Mypair._Myval2;

  0003b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00043	48 89 44 24 28	 mov	 QWORD PTR _My_data$[rsp], rax

; 2924 : 
; 2925 : #ifdef __cpp_lib_constexpr_string
; 2926 :         const bool _Stay_small = _Right_size < _BUF_SIZE && !_STD is_constant_evaluated();
; 2927 : #else // ^^^ __cpp_lib_constexpr_string / !__cpp_lib_constexpr_string vvv
; 2928 :         const bool _Stay_small = _Right_size < _BUF_SIZE;

  00048	48 83 7c 24 30
	10		 cmp	 QWORD PTR _Right_size$[rsp], 16
  0004e	73 07		 jae	 SHORT $LN4@Construct_
  00050	c6 44 24 20 01	 mov	 BYTE PTR tv72[rsp], 1
  00055	eb 05		 jmp	 SHORT $LN5@Construct_
$LN4@Construct_:
  00057	c6 44 24 20 00	 mov	 BYTE PTR tv72[rsp], 0
$LN5@Construct_:
  0005c	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv72[rsp]
  00061	88 44 24 21	 mov	 BYTE PTR _Stay_small$[rsp], al

; 2929 : #endif // __cpp_lib_constexpr_string
; 2930 : 
; 2931 :         // NOTE: even if _Right is in large mode, we only go into large mode ourselves if the actual size of _Right
; 2932 :         // requires it
; 2933 :         if (_Stay_small) { // stay small, don't allocate

  00065	0f b6 44 24 21	 movzx	 eax, BYTE PTR _Stay_small$[rsp]
  0006a	85 c0		 test	 eax, eax
  0006c	74 38		 je	 SHORT $LN2@Construct_

; 2934 :             _Traits::copy(_My_data._Bx._Buf, _Right_ptr, _BUF_SIZE);

  0006e	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  00073	41 b8 10 00 00
	00		 mov	 r8d, 16
  00079	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right_ptr$[rsp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 2935 :             _My_data._Mysize = _Right_size;

  00086	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  0008b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Right_size$[rsp]
  00090	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2936 :             _My_data._Myres  = _BUF_SIZE - 1;

  00094	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  00099	48 c7 40 18 0f
	00 00 00	 mov	 QWORD PTR [rax+24], 15

; 2937 :             return;

  000a1	e9 bd 00 00 00	 jmp	 $LN1@Construct_
$LN2@Construct_:

; 2938 :         }
; 2939 : 
; 2940 :         auto& _Al                     = _Getal();

  000a6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ae	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000b3	48 89 44 24 68	 mov	 QWORD PTR _Al$[rsp], rax

; 2941 :         const size_type _New_capacity = (_STD min)(_Right_size | _ALLOC_MASK, max_size());

  000b8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c0	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  000c5	48 89 44 24 58	 mov	 QWORD PTR $T1[rsp], rax
  000ca	48 8b 44 24 30	 mov	 rax, QWORD PTR _Right_size$[rsp]
  000cf	48 83 c8 0f	 or	 rax, 15
  000d3	48 89 44 24 60	 mov	 QWORD PTR $T2[rsp], rax
  000d8	48 8d 54 24 58	 lea	 rdx, QWORD PTR $T1[rsp]
  000dd	48 8d 4c 24 60	 lea	 rcx, QWORD PTR $T2[rsp]
  000e2	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  000e7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ea	48 89 44 24 50	 mov	 QWORD PTR _New_capacity$[rsp], rax

; 2942 :         const pointer _New_array      = _Al.allocate(_New_capacity + 1); // throws

  000ef	48 8b 44 24 50	 mov	 rax, QWORD PTR _New_capacity$[rsp]
  000f4	48 ff c0	 inc	 rax
  000f7	48 8b d0	 mov	 rdx, rax
  000fa	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Al$[rsp]
  000ff	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00104	48 89 44 24 40	 mov	 QWORD PTR _New_array$[rsp], rax

; 2943 :         _Construct_in_place(_My_data._Bx._Ptr, _New_array);

  00109	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  0010e	48 8d 54 24 40	 lea	 rdx, QWORD PTR _New_array$[rsp]
  00113	48 8b c8	 mov	 rcx, rax
  00116	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>

; 2944 : 
; 2945 : #ifdef __cpp_lib_constexpr_string
; 2946 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2947 :             _Traits::assign(_Unfancy(_New_array), _New_capacity + 1, _Elem());
; 2948 :         }
; 2949 : #endif // __cpp_lib_constexpr_string
; 2950 :         _Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

  0011b	48 8b 44 24 30	 mov	 rax, QWORD PTR _Right_size$[rsp]
  00120	48 ff c0	 inc	 rax
  00123	48 89 44 24 70	 mov	 QWORD PTR tv134[rsp], rax
  00128	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _New_array$[rsp]
  0012d	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00132	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv134[rsp]
  00137	4c 8b c1	 mov	 r8, rcx
  0013a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right_ptr$[rsp]
  0013f	48 8b c8	 mov	 rcx, rax
  00142	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 2951 :         _My_data._Mysize = _Right_size;

  00147	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  0014c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Right_size$[rsp]
  00151	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2952 :         _My_data._Myres  = _New_capacity;

  00155	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  0015a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _New_capacity$[rsp]
  0015f	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
$LN1@Construct_:

; 2953 :     }

  00163	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0016a	c3		 ret	 0
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
_TEXT	SEGMENT
_Right_data$ = 32
_My_data$ = 40
tv93 = 48
this$ = 80
_Right$ = 88
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents, COMDAT

; 2872 :     _CONSTEXPR20_CONTAINER void _Take_contents(basic_string& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2873 :         // assign by stealing _Right's buffer
; 2874 :         // pre: this != &_Right
; 2875 :         // pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2876 :         // pre: *this owns no memory, iterators orphaned
; 2877 :         // (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2878 :         auto& _My_data    = _Mypair._Myval2;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR _My_data$[rsp], rax

; 2879 :         auto& _Right_data = _Right._Mypair._Myval2;

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _Right$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR _Right_data$[rsp], rax

; 2880 : 
; 2881 :         if constexpr (_Can_memcpy_val) {
; 2882 : #ifdef __cpp_lib_constexpr_string
; 2883 :             if (!_STD is_constant_evaluated())
; 2884 : #endif // __cpp_lib_constexpr_string
; 2885 :             {
; 2886 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2887 :                 if (_Right_data._Large_string_engaged()) {
; 2888 :                     // take ownership of _Right's iterators along with its buffer
; 2889 :                     _Swap_proxy_and_iterators(_Right);
; 2890 :                 } else {
; 2891 :                     _Right_data._Orphan_all();
; 2892 :                 }
; 2893 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2894 : 
; 2895 :                 _Memcpy_val_from(_Right);

  00022	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Right$[rsp]
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from

; 2896 :                 _Right._Tidy_init();

  00031	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00036	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2897 :                 return;

  0003b	e9 a6 00 00 00	 jmp	 $LN1@Take_conte

; 2898 :             }
; 2899 :         }
; 2900 : 
; 2901 :         if (_Right_data._Large_string_engaged()) { // steal buffer

  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Right_data$[rsp]
  00045	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	85 c0		 test	 eax, eax
  0004f	74 2f		 je	 SHORT $LN2@Take_conte

; 2902 :             _Construct_in_place(_My_data._Bx._Ptr, _Right_data._Bx._Ptr);

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR _Right_data$[rsp]
  00056	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _My_data$[rsp]
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z ; std::_Construct_in_place<char *,char * &>

; 2903 :             _Right_data._Bx._Ptr = nullptr;

  00063	48 8b 44 24 20	 mov	 rax, QWORD PTR _Right_data$[rsp]
  00068	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 2904 :             _Swap_proxy_and_iterators(_Right);

  0006f	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Right$[rsp]
  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00079	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators

; 2905 :         } else { // copy small string buffer

  0007e	eb 38		 jmp	 SHORT $LN3@Take_conte
$LN2@Take_conte:

; 2906 :             _Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);

  00080	48 8b 44 24 20	 mov	 rax, QWORD PTR _Right_data$[rsp]
  00085	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00089	48 ff c0	 inc	 rax
  0008c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Right_data$[rsp]
  00091	48 8b 54 24 28	 mov	 rdx, QWORD PTR _My_data$[rsp]
  00096	48 89 54 24 30	 mov	 QWORD PTR tv93[rsp], rdx
  0009b	4c 8b c0	 mov	 r8, rax
  0009e	48 8b d1	 mov	 rdx, rcx
  000a1	48 8b 44 24 30	 mov	 rax, QWORD PTR tv93[rsp]
  000a6	48 8b c8	 mov	 rcx, rax
  000a9	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 2907 :             _Right_data._Orphan_all();

  000ae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Right_data$[rsp]
  000b3	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all
$LN3@Take_conte:

; 2908 :         }
; 2909 : 
; 2910 :         _My_data._Mysize = _Right_data._Mysize;

  000b8	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  000bd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Right_data$[rsp]
  000c2	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000c6	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2911 :         _My_data._Myres  = _Right_data._Myres;

  000ca	48 8b 44 24 28	 mov	 rax, QWORD PTR _My_data$[rsp]
  000cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Right_data$[rsp]
  000d4	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  000d8	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2912 :         _Right._Tidy_init();

  000dc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  000e1	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
$LN1@Take_conte:

; 2913 :     }

  000e6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ea	c3		 ret	 0
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z
_TEXT	SEGMENT
_Right_data_mem$ = 32
_My_data_mem$ = 40
this$ = 64
_Right$ = 72
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from, COMDAT

; 2863 :     void _Memcpy_val_from(const basic_string& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2864 :         _STL_INTERNAL_CHECK(_Can_memcpy_val); // TRANSITION, if constexpr
; 2865 :         const auto _My_data_mem =

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  0001b	48 89 44 24 28	 mov	 QWORD PTR _My_data_mem$[rsp], rax

; 2866 :             reinterpret_cast<unsigned char*>(_STD addressof(_Mypair._Myval2)) + _Memcpy_val_offset;
; 2867 :         const auto _Right_data_mem =

  00020	48 8b 44 24 48	 mov	 rax, QWORD PTR _Right$[rsp]
  00025	48 8b c8	 mov	 rcx, rax
  00028	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
  0002d	48 89 44 24 20	 mov	 QWORD PTR _Right_data_mem$[rsp], rax

; 2868 :             reinterpret_cast<const unsigned char*>(_STD addressof(_Right._Mypair._Myval2)) + _Memcpy_val_offset;
; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00032	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00038	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Right_data_mem$[rsp]
  0003d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _My_data_mem$[rsp]
  00042	e8 00 00 00 00	 call	 memcpy

; 2870 :     }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 2857 :     _CONSTEXPR20_CONTAINER basic_string& assign(basic_string&& _Right) noexcept(noexcept(*this = _STD move(_Right))) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2858 :         *this = _STD move(_Right);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ??$move@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
  00018	48 8b d0	 mov	 rdx, rax
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 2859 :         return *this;

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]

; 2860 :     }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Right$ = 72
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT

; 2849 :         noexcept(_Move_assign(_Right, _Choose_pocma<_Alty>{}))) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 2850 :         if (this != _STD addressof(_Right)) {

  0000f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00014	e8 00 00 00 00	 call	 ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00019	48 39 44 24 40	 cmp	 QWORD PTR this$[rsp], rax
  0001e	74 26		 je	 SHORT $LN2@operator

; 2851 :             _Move_assign(_Right, _Choose_pocma<_Alty>{});

  00020	48 8d 44 24 20	 lea	 rax, QWORD PTR $T1[rsp]
  00025	48 8b f8	 mov	 rdi, rax
  00028	33 c0		 xor	 eax, eax
  0002a	b9 01 00 00 00	 mov	 ecx, 1
  0002f	f3 aa		 rep stosb
  00031	44 0f b6 44 24
	20		 movzx	 r8d, BYTE PTR $T1[rsp]
  00037	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  0003c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U_Equal_allocators@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
$LN2@operator:

; 2852 :         }
; 2853 : 
; 2854 :         return *this;

  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]

; 2855 :     }

  0004b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U_Equal_allocators@2@@Z
_TEXT	SEGMENT
tv66 = 32
this$ = 64
_Right$ = 72
__formal$ = 80
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U_Equal_allocators@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign, COMDAT

; 2775 :     _CONSTEXPR20_CONTAINER void _Move_assign(basic_string& _Right, _Equal_allocators) noexcept {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2776 :         _Tidy_deallocate();

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2777 :         _Pocma(_Getal(), _Right._Getal());

  0001d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00027	48 89 44 24 20	 mov	 QWORD PTR tv66[rsp], rax
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00031	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00036	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv66[rsp]
  0003b	48 8b d1	 mov	 rdx, rcx
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 ??$_Pocma@V?$allocator@D@std@@@std@@YAXAEAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >

; 2778 :         _Take_contents(_Right);

  00046	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2779 :     }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
?_Move_assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@U_Equal_allocators@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Move_assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Right$ = 72
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2605 :         : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::move<std::allocator<char> &>
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00025	4c 8b c0	 mov	 r8, rax
  00028	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  0002d	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >

; 2606 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 2607 :         _Take_contents(_Right);

  00046	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2608 :     }

  00055	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
_TEXT	SEGMENT
_Proxy$ = 32
$T1 = 33
_Alproxy$ = 40
this$ = 64
_Count$ = 72
_Ch$ = 80
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2538 :         : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00018	0f b6 54 24 21	 movzx	 edx, BYTE PTR $T1[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 2539 :         // construct from _Count * _Ch
; 2540 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  0002c	48 89 44 24 28	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 2541 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00036	4c 8b c0	 mov	 r8, rax
  00039	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Alproxy$[rsp]
  0003e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  00043	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2542 :         _Tidy_init();

  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004d	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2543 :         assign(_Count, _Ch);

  00052	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  00058	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Count$[rsp]
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00062	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2544 :         _Proxy._Release();

  00067	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  0006c	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2545 :     }

  00071	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
_Proxy$ = 32
$T1 = 33
_Alproxy$ = 40
this$ = 64
_Ptr$ = 72
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2517 :     _CONSTEXPR20_CONTAINER basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00013	0f b6 54 24 21	 movzx	 edx, BYTE PTR $T1[rsp]
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 2518 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  00027	48 89 44 24 28	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 2519 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00031	4c 8b c0	 mov	 r8, rax
  00034	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Alproxy$[rsp]
  00039	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  0003e	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2520 :         _Tidy_init();

  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00048	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2521 :         assign(_Ptr);

  0004d	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00057	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2522 :         _Proxy._Release();

  0005c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  00061	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2523 :     }

  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006f	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z
_TEXT	SEGMENT
_Proxy$ = 32
$T1 = 33
_Alproxy$ = 40
this$ = 64
_Ptr$ = 72
_Count$ = 80
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2499 :         : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00018	0f b6 54 24 21	 movzx	 edx, BYTE PTR $T1[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 2500 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  0002c	48 89 44 24 28	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 2501 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00036	4c 8b c0	 mov	 r8, rax
  00039	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Alproxy$[rsp]
  0003e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  00043	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2502 :         _Tidy_init();

  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004d	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2503 :         assign(_Ptr, _Count);

  00052	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  00057	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0005c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00061	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2504 :         _Proxy._Release();

  00066	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  0006b	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2505 :     }

  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2467 :         : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>

; 2468 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy

; 2469 :         _Tidy_init();

  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00034	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2470 :     }

  00039	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
_Proxy$ = 32
$T1 = 33
$T2 = 34
_Alproxy$ = 40
this$ = 64
_Right$ = 72
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2451 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00018	48 8b d0	 mov	 rdx, rax
  0001b	48 8d 4c 24 21	 lea	 rcx, QWORD PTR $T1[rsp]
  00020	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  00025	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	4c 8b c0	 mov	 r8, rax
  0002d	0f b6 54 24 22	 movzx	 edx, BYTE PTR $T2[rsp]
  00032	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >

; 2452 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Fake_alloc@std@@3U_Fake_allocator@1@B
  0003e	48 89 44 24 28	 mov	 QWORD PTR _Alproxy$[rsp], rax

; 2453 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00043	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00048	4c 8b c0	 mov	 r8, rax
  0004b	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Alproxy$[rsp]
  00050	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  00055	e8 00 00 00 00	 call	 ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl

; 2454 :         _Construct_lv_contents(_Right);

  0005a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00064	e8 00 00 00 00	 call	 ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents

; 2455 :         _Proxy._Release();

  00069	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Proxy$[rsp]
  0006e	e8 00 00 00 00	 call	 ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ; std::_Fake_proxy_ptr_impl::_Release

; 2456 :     }

  00073	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00078	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007c	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 2348 :         _CONSTEXPR20_CONTAINER ~_Bxty() noexcept {} // user-provided, for fancy pointers

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2336 :     [[noreturn]] static void _Xran() {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2337 :         _Xout_of_range("invalid string position");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  0000b	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 2338 :     }

  00010	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00014	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT

; 2322 :     _CONSTEXPR20_CONTAINER void _Check_offset(const size_type _Off) const {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2323 :         // checks whether _Off is in the bounds of [0, size()]
; 2324 :         if (_Mysize < _Off) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Off$[rsp]
  00018	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  0001c	73 05		 jae	 SHORT $LN2@Check_offs

; 2325 :             _Xran();

  0001e	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN2@Check_offs:
$LN3@Check_offs:

; 2326 :         }
; 2327 :     }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 0
this$ = 32
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT

; 2313 :     _CONSTEXPR20_CONTAINER bool _Large_string_engaged() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 2314 : #ifdef __cpp_lib_constexpr_string
; 2315 :         if (_STD is_constant_evaluated()) {
; 2316 :             return true;
; 2317 :         }
; 2318 : #endif // __cpp_lib_constexpr_string
; 2319 :         return _BUF_SIZE <= _Myres;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 78 18 10	 cmp	 QWORD PTR [rax+24], 16
  00013	72 09		 jb	 SHORT $LN3@Large_stri
  00015	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv66[rsp], 1
  0001c	eb 07		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  0001e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv66[rsp], 0
$LN4@Large_stri:
  00025	0f b6 04 24	 movzx	 eax, BYTE PTR tv66[rsp]

; 2320 :     }

  00029	48 83 c4 18	 add	 rsp, 24
  0002d	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2304 :     _CONSTEXPR20_CONTAINER const value_type* _Myptr() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2305 :         const value_type* _Result = _Bx._Buf;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax

; 2306 :         if (_Large_string_engaged()) {

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0001d	0f b6 c0	 movzx	 eax, al
  00020	85 c0		 test	 eax, eax
  00022	74 12		 je	 SHORT $LN2@Myptr

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0002c	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00031	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax
$LN2@Myptr:

; 2308 :         }
; 2309 : 
; 2310 :         return _Result;

  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR _Result$[rsp]

; 2311 :     }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2295 :     _CONSTEXPR20_CONTAINER value_type* _Myptr() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2296 :         value_type* _Result = _Bx._Buf;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax

; 2297 :         if (_Large_string_engaged()) {

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0001d	0f b6 c0	 movzx	 eax, al
  00020	85 c0		 test	 eax, eax
  00022	74 12		 je	 SHORT $LN2@Myptr

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0002c	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00031	48 89 44 24 20	 mov	 QWORD PTR _Result$[rsp], rax
$LN2@Myptr:

; 2299 :         }
; 2300 : 
; 2301 :         return _Result;

  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR _Result$[rsp]

; 2302 :     }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT

; 2284 :     _CONSTEXPR20_CONTAINER _String_val() noexcept : _Bx() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 2285 : 
; 2286 :     // length of internal buffer, [1, 16]:
; 2287 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2288 :     // roundup mask for allocated buffers, [0, 15]:
; 2289 :     static constexpr size_type _ALLOC_MASK = sizeof(value_type) <= 1 ? 15
; 2290 :                                            : sizeof(value_type) <= 2 ? 7
; 2291 :                                            : sizeof(value_type) <= 4 ? 3
; 2292 :                                            : sizeof(value_type) <= 8 ? 1
; 2293 :                                                                      : 0;
; 2294 : 
; 2295 :     _CONSTEXPR20_CONTAINER value_type* _Myptr() noexcept {
; 2296 :         value_type* _Result = _Bx._Buf;
; 2297 :         if (_Large_string_engaged()) {
; 2298 :             _Result = _Unfancy(_Bx._Ptr);
; 2299 :         }
; 2300 : 
; 2301 :         return _Result;
; 2302 :     }
; 2303 : 
; 2304 :     _CONSTEXPR20_CONTAINER const value_type* _Myptr() const noexcept {
; 2305 :         const value_type* _Result = _Bx._Buf;
; 2306 :         if (_Large_string_engaged()) {
; 2307 :             _Result = _Unfancy(_Bx._Ptr);
; 2308 :         }
; 2309 : 
; 2310 :         return _Result;
; 2311 :     }
; 2312 : 
; 2313 :     _CONSTEXPR20_CONTAINER bool _Large_string_engaged() const noexcept {
; 2314 : #ifdef __cpp_lib_constexpr_string
; 2315 :         if (_STD is_constant_evaluated()) {
; 2316 :             return true;
; 2317 :         }
; 2318 : #endif // __cpp_lib_constexpr_string
; 2319 :         return _BUF_SIZE <= _Myres;
; 2320 :     }
; 2321 : 
; 2322 :     _CONSTEXPR20_CONTAINER void _Check_offset(const size_type _Off) const {
; 2323 :         // checks whether _Off is in the bounds of [0, size()]
; 2324 :         if (_Mysize < _Off) {
; 2325 :             _Xran();
; 2326 :         }
; 2327 :     }
; 2328 : 
; 2329 :     _CONSTEXPR20_CONTAINER void _Check_offset_exclusive(const size_type _Off) const {
; 2330 :         // checks whether _Off is in the bounds of [0, size())
; 2331 :         if (_Mysize <= _Off) {
; 2332 :             _Xran();
; 2333 :         }
; 2334 :     }
; 2335 : 
; 2336 :     [[noreturn]] static void _Xran() {
; 2337 :         _Xout_of_range("invalid string position");
; 2338 :     }
; 2339 : 
; 2340 :     _CONSTEXPR20_CONTAINER size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2341 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2342 :         return (_STD min)(_Size, _Mysize - _Off);
; 2343 :     }
; 2344 : 
; 2345 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers
; 2347 : 
; 2348 :         _CONSTEXPR20_CONTAINER ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2349 : 
; 2350 :         value_type _Buf[_BUF_SIZE];
; 2351 :         pointer _Ptr;
; 2352 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2353 :     } _Bx;
; 2354 : 
; 2355 :     size_type _Mysize = 0; // current length of string

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 2284 :     _CONSTEXPR20_CONTAINER _String_val() noexcept : _Bx() {}

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
_Al$ = 16
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 731  :     _NODISCARD static _CONSTEXPR20_DYNALLOC _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 732  :         return _Al;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 733  :     }

  0000f	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
__formal$ = 8
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 727  :     _NODISCARD static _CONSTEXPR20_DYNALLOC size_type max_size(const _Alloc&) noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 728  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00005	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 729  :     }

  0000c	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  00013	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YA_K_K@Z ; std::_Get_size_of_n<1>
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 840  :     }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00013	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0001d	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 836  :     }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 825  :     constexpr allocator() noexcept {}

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c3		 ret	 0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2373 : [[noreturn]] inline void _Xlen_string() {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2374 :     _Xlength_error("string too long");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
  0000b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2375 : }

  00010	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00014	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 478  :         return static_cast<int_type>(EOF);

  00000	b8 ff ff ff ff	 mov	 eax, -1

; 479  :     }

  00005	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
_Left$ = 32
_Right$ = 40
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 469  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 470  :         return _Left == _Right;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  00018	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0001a	39 08		 cmp	 DWORD PTR [rax], ecx
  0001c	75 09		 jne	 SHORT $LN3@eq_int_typ
  0001e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv65[rsp], 1
  00025	eb 07		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00027	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv65[rsp], 0
$LN4@eq_int_typ:
  0002e	0f b6 04 24	 movzx	 eax, BYTE PTR tv65[rsp]

; 471  :     }

  00032	48 83 c4 18	 add	 rsp, 24
  00036	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z
_TEXT	SEGMENT
_Ch$ = 8
?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::to_int_type, COMDAT

; 465  :     _NODISCARD static constexpr int_type to_int_type(const _Elem& _Ch) noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 466  :         return static_cast<unsigned char>(_Ch);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ch$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 467  :     }

  0000d	c3		 ret	 0
?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 449  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 450  :         _Left = _Right;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Left$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _Right$[rsp]
  00014	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00017	88 08		 mov	 BYTE PTR [rax], cl

; 451  :     }

  00019	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z
_TEXT	SEGMENT
_First$ = 48
_Count$ = 56
_Ch$ = 64
?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z PROC ; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 438  :         _Out_writes_all_(_Count) _Elem* const _First, size_t _Count, const _Elem _Ch) noexcept /* strengthened */ {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 439  :         // assign _Count * _Ch to [_First, ...)
; 440  : #ifdef __cpp_lib_is_constant_evaluated
; 441  :         if (_STD is_constant_evaluated()) {
; 442  :             return _Primary_char_traits::assign(_First, _Count, _Ch);
; 443  :         }
; 444  : #endif // __cpp_lib_is_constant_evaluated
; 445  : 
; 446  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00013	0f be 44 24 40	 movsx	 eax, BYTE PTR _Ch$[rsp]
  00018	4c 8b 44 24 38	 mov	 r8, QWORD PTR _Count$[rsp]
  0001d	8b d0		 mov	 edx, eax
  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  00024	e8 00 00 00 00	 call	 memset

; 447  :     }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ENDP ; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 48
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 396  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 397  :         // find length of null-terminated string
; 398  : #if _HAS_CXX17
; 399  : #ifdef __cpp_char8_t
; 400  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 401  : #if _HAS_U8_INTRINSICS
; 402  :             return __builtin_u8strlen(_First);
; 403  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 404  :             return _Primary_char_traits::length(_First);
; 405  : #endif // _HAS_U8_INTRINSICS
; 406  :         } else
; 407  : #endif // __cpp_char8_t
; 408  :         {
; 409  :             return __builtin_strlen(_First);
; 410  :         }
; 411  : #else // _HAS_CXX17
; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  0000e	e8 00 00 00 00	 call	 strlen

; 413  : #endif // _HAS_CXX17
; 414  :     }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 80   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 81   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 82   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 83   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 84   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 85   : #ifdef __cpp_lib_is_constant_evaluated
; 86   :         if (_STD is_constant_evaluated()) {
; 87   :             // dest: [_First1, _First1 + _Count)
; 88   :             // src: [_First2, _First2 + _Count)
; 89   :             // We need to handle overlapping ranges.
; 90   :             // If _First1 is in the src range, we need a backward loop.
; 91   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 92   : 
; 93   :             if (_First1 == _First2) {
; 94   :                 return _First1; // Self-assignment; either loop would work, but returning immediately is faster.
; 95   :             }
; 96   : 
; 97   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 98   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 99   :             bool _Loop_forward = true;
; 100  : 
; 101  :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 102  :                 if (_First1 == _Src) {
; 103  :                     _Loop_forward = false;
; 104  :                     break;
; 105  :                 }
; 106  :             }
; 107  : 
; 108  :             if (_Loop_forward) {
; 109  :                 for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 110  :                     _First1[_Idx] = _First2[_Idx];
; 111  :                 }
; 112  :             } else {
; 113  :                 for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 114  :                     _First1[_Count - 1 - _Idx] = _First2[_Count - 1 - _Idx];
; 115  :                 }
; 116  :             }
; 117  : 
; 118  :             return _First1;
; 119  :         }
; 120  : #endif // __cpp_lib_is_constant_evaluated
; 121  : 
; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First2$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First1$[rsp]
  00022	e8 00 00 00 00	 call	 memmove

; 123  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 124  : 
; 125  :         return _First1;

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR _First1$[rsp]

; 126  :     }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 48
_First2$ = 56
_Count$ = 64
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 49   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 50   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 51   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 52   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 53   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 54   : #ifdef __cpp_lib_is_constant_evaluated
; 55   :         if (_STD is_constant_evaluated()) {
; 56   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 57   :             for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 58   :                 _First1[_Idx] = _First2[_Idx];
; 59   :             }
; 60   : 
; 61   :             return _First1;
; 62   :         }
; 63   : #endif // __cpp_lib_is_constant_evaluated
; 64   : 
; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First2$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First1$[rsp]
  00022	e8 00 00 00 00	 call	 memcpy

; 66   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 67   : 
; 68   :         return _First1;

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR _First1$[rsp]

; 69   :     }

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ PROC	; std::_Fake_proxy_ptr_impl::_Release, COMDAT

; 1311 :     _CONSTEXPR20_CONTAINER void _Release() noexcept {}

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	c3		 ret	 0
?_Release@_Fake_proxy_ptr_impl@std@@QEAAXXZ ENDP	; std::_Fake_proxy_ptr_impl::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
__formal$ = 24
??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z PROC ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl, COMDAT

; 1308 :     _CONSTEXPR20_CONTAINER _Fake_proxy_ptr_impl(const _Fake_allocator&, const _Container_base0&) noexcept {}

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00014	c3		 ret	 0
??0_Fake_proxy_ptr_impl@std@@QEAA@AEBU_Fake_allocator@1@AEBU_Container_base0@1@@Z ENDP ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z PROC ; std::_Container_base0::_Alloc_proxy, COMDAT

; 1039 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(const _Fake_allocator&) noexcept {}

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	c3		 ret	 0
?_Alloc_proxy@_Container_base0@std@@QEAAXAEBU_Fake_allocator@2@@Z ENDP ; std::_Container_base0::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z PROC ; std::_Container_base0::_Swap_proxy_and_iterators, COMDAT

; 1038 :     _CONSTEXPR20_CONTAINER void _Swap_proxy_and_iterators(_Container_base0&) noexcept {}

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	c3		 ret	 0
?_Swap_proxy_and_iterators@_Container_base0@std@@QEAAXAEAU12@@Z ENDP ; std::_Container_base0::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base0@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Orphan_all@_Container_base0@std@@QEAAXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT

; 1037 :     _CONSTEXPR20_CONTAINER void _Orphan_all() noexcept {}

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QEAAXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Convert_size@_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 8
??$_Convert_size@_K@std@@YA_K_K@Z PROC			; std::_Convert_size<unsigned __int64>, COMDAT

; 978  : _NODISCARD constexpr size_t _Convert_size<size_t>(const size_t _Len) noexcept {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 979  :     // convert size_t to size_t, unchanged
; 980  :     return _Len;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Len$[rsp]

; 981  : }

  0000a	c3		 ret	 0
??$_Convert_size@_K@std@@YA_K_K@Z ENDP			; std::_Convert_size<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Back_shift$ = 32
_Ptr_container$ = 40
_Ptr_user$ = 48
_Min_back_shift$ = 56
_Ptr$ = 80
_Bytes$ = 88
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 153  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 154  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 155  :     _Bytes += _Non_user_size;

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR _Bytes$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 83 c0 27	 add	 rax, 39			; 00000027H
  0001a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  0001f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 156  : 
; 157  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00027	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002a	48 89 44 24 30	 mov	 QWORD PTR _Ptr_user$[rsp], rax

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002f	b8 08 00 00 00	 mov	 eax, 8
  00034	48 6b c0 ff	 imul	 rax, rax, -1
  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ptr_user$[rsp]
  0003d	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00041	48 89 44 24 28	 mov	 QWORD PTR _Ptr_container$[rsp], rax

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);

  00046	48 c7 44 24 38
	08 00 00 00	 mov	 QWORD PTR _Min_back_shift$[rsp], 8

; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004f	48 8b 44 24 50	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00054	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Ptr_container$[rsp]
  00059	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005c	48 2b c1	 sub	 rax, rcx
  0005f	48 89 44 24 20	 mov	 QWORD PTR _Back_shift$[rsp], rax
$LN4@Adjust_man:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00064	48 83 7c 24 20
	08		 cmp	 QWORD PTR _Back_shift$[rsp], 8
  0006a	72 0a		 jb	 SHORT $LN8@Adjust_man
  0006c	48 83 7c 24 20
	27		 cmp	 QWORD PTR _Back_shift$[rsp], 39 ; 00000027H
  00072	77 02		 ja	 SHORT $LN8@Adjust_man
  00074	eb 0b		 jmp	 SHORT $LN9@Adjust_man
$LN8@Adjust_man:
$LN7@Adjust_man:
  00076	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
  0007b	33 c0		 xor	 eax, eax
  0007d	85 c0		 test	 eax, eax
  0007f	75 f5		 jne	 SHORT $LN7@Adjust_man
$LN9@Adjust_man:
  00081	33 c0		 xor	 eax, eax
  00083	85 c0		 test	 eax, eax
  00085	75 dd		 jne	 SHORT $LN4@Adjust_man

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00087	48 8b 44 24 50	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0008c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Ptr_container$[rsp]
  00091	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN10@Adjust_man:

; 174  : }

  00094	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00098	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 84   :         void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 85   :         return ::operator new(_Bytes);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Bytes$[rsp]
  0000e	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 86   :     }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 648  :         return LLONG_MAX;

  00000	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 649  :     }

  0000a	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 321  :     _THROW(bad_array_new_length{});

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  00015	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0001a	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Throw_bad_:

; 322  : }

  0001f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00023	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 18 00 00 00	 mov	 edx, 24
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 140  :         : bad_alloc("bad array new length")

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00015	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00026	48 89 08	 mov	 QWORD PTR [rax], rcx

; 142  :     }

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 18 00 00 00	 mov	 edx, 24
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 129  :         : exception(_Message, 1)

  0000e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00014	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Message$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001e	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception

; 130  :     {

  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0002f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 131  :     }

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 18 00 00 00	 mov	 edx, 24
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00013	74 0f		 je	 SHORT $LN3@what
  00015	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0001a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0001e	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
  00022	eb 0b		 jmp	 SHORT $LN4@what
$LN3@what:
  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  0002b	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
$LN4@what:
  0002f	48 8b 04 24	 mov	 rax, QWORD PTR tv69[rsp]

; 96   :     }

  00033	48 83 c4 18	 add	 rsp, 24
  00037	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 83 c0 08	 add	 rax, 8
  00021	48 8b c8	 mov	 rcx, rax
  00024	e8 00 00 00 00	 call	 __std_exception_destroy

; 91   :     }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0001b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         : _Data()

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 10 00 00 00	 mov	 ecx, 16
  00031	f3 aa		 rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Other$[rsp]
  00041	48 83 c1 08	 add	 rcx, 8
  00045	48 8b d0	 mov	 rdx, rax
  00048	e8 00 00 00 00	 call	 __std_exception_copy

; 74   :     }

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0001c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 65   :         : _Data()

  0001f	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00024	48 83 c0 08	 add	 rax, 8
  00028	48 8b f8	 mov	 rdi, rax
  0002b	33 c0		 xor	 eax, eax
  0002d	b9 10 00 00 00	 mov	 ecx, 16
  00032	f3 aa		 rep stosb

; 67   :         _Data._What = _Message;

  00034	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Message$[rsp]
  0003e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 68   :     }

  00042	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
_InitData$ = 32
this$ = 64
_Message$ = 72
??0exception@std@@QEAA@QEBD@Z PROC			; std::exception::exception, COMDAT

; 59   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0001b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 58   :         : _Data()

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 10 00 00 00	 mov	 ecx, 16
  00031	f3 aa		 rep stosb

; 60   :         __std_exception_data _InitData = { _Message, true };

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR _Message$[rsp]
  00038	48 89 44 24 20	 mov	 QWORD PTR _InitData$[rsp], rax
  0003d	c6 44 24 28 01	 mov	 BYTE PTR _InitData$[rsp+8], 1

; 61   :         __std_exception_copy(&_InitData, &_Data);

  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 c0 08	 add	 rax, 8
  0004b	48 8b d0	 mov	 rdx, rax
  0004e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _InitData$[rsp]
  00053	e8 00 00 00 00	 call	 __std_exception_copy

; 62   :     }

  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
??0exception@std@@QEAA@QEBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
;	COMDAT sprintf_s
_TEXT	SEGMENT
_Result$ = 48
_ArgList$ = 56
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
sprintf_s PROC						; COMDAT

; 1823 :         {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1824 :             int _Result;
; 1825 :             va_list _ArgList;
; 1826 :             __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 68	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1827 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00022	48 8b 44 24 38	 mov	 rax, QWORD PTR _ArgList$[rsp]
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	45 33 c9	 xor	 r9d, r9d
  0002f	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Format$[rsp]
  00034	48 8b 54 24 58	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  00039	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003e	e8 00 00 00 00	 call	 _vsprintf_s_l
  00043	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1828 :             __crt_va_end(_ArgList);

  00047	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1829 :             return _Result;

  00050	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]

; 1830 :         }

  00054	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00058	c3		 ret	 0
sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsprintf_s_l PROC					; COMDAT

; 1490 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1491 :         int const _Result = __stdio_common_vsprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0003b	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00040	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00043	e8 00 00 00 00	 call	 __stdio_common_vsprintf_s
  00048	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1492 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1493 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1494 : 
; 1495 :         return _Result < 0 ? -1 : _Result;

  0004c	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00051	7d 0a		 jge	 SHORT $LN3@vsprintf_s
  00053	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv73[rsp], -1
  0005b	eb 08		 jmp	 SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
  0005d	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00061	89 44 24 34	 mov	 DWORD PTR tv73[rsp], eax
$LN4@vsprintf_s:
  00065	8b 44 24 34	 mov	 eax, DWORD PTR tv73[rsp]

; 1496 :     }

  00069	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006d	c3		 ret	 0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT frexpl
_TEXT	SEGMENT
_X$ = 48
_Y$ = 56
frexpl	PROC						; COMDAT

; 861  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [rsp+8], xmm0
  0000b	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 862  :         return frexp((double)_X, _Y);

  0000f	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Y$[rsp]
  00014	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR _X$[rsp]
  0001a	e8 00 00 00 00	 call	 frexp

; 863  :     }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
frexpl	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT fabsl
_TEXT	SEGMENT
_X$ = 48
fabsl	PROC						; COMDAT

; 840  :     {

$LN3:
  00000	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [rsp+8], xmm0
  00006	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 841  :         return fabs((double)_X);

  0000a	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR _X$[rsp]
  00010	e8 00 00 00 00	 call	 fabs

; 842  :     }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
fabsl	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 8
_Where$ = 16
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 168  :         (void)_Size;
; 169  :         return _Where;

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR _Where$[rsp]

; 170  :     }

  0000f	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
END
